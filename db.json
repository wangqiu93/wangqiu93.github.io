{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/索引优化.png","path":"img/posts/索引优化.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/Redis数据结构.png","path":"img/posts/Redis数据结构.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/聚簇索引.png","path":"img/posts/聚簇索引.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/MyBatis.png","path":"img/posts/MyBatis.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c8c4f7005171894563484d01a7ff73eac1a3dcd2","modified":1627624393642},{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1627624270592},{"_id":"themes/yelee/README.md","hash":"034155f3c0a9ac4a30bbdcfd549f151960f5ef8d","modified":1627624270592},{"_id":"themes/yelee/_config.yml","hash":"bb9b47f9370130c97737003fccbb7f103523a483","modified":1627624270592},{"_id":"themes/yelee/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1627624270599},{"_id":"source/categories/index.md","hash":"286902e1a3f2259e4ac980e4831f78fd1b728ff5","modified":1627624270527},{"_id":"source/_posts/20170918.md","hash":"eff92e13a849be1e49919582168cc90a3d5b746e","modified":1627483183357},{"_id":"source/_posts/20171212.md","hash":"83ef6a5dfc88867e302db2aa7f7d68c0fc341494","modified":1627560775019},{"_id":"source/_posts/20180617.md","hash":"62c836cfd462af9a1c405f3b682588419eee37ea","modified":1627562089393},{"_id":"source/_posts/20180618.md","hash":"9c29c8b15df51d47dc0deb10ca40193f82544f04","modified":1627483009158},{"_id":"source/_posts/20180619.md","hash":"9951496508b3e1cad44fe555c48cffce0cbb46fc","modified":1627483009163},{"_id":"source/_posts/20180630.md","hash":"60d35e8889a8d7f512fa84b58767d70bbcbe146f","modified":1627560775019},{"_id":"source/_posts/20180720.md","hash":"ecc889d1efd5061a5213f9bc754966c3184b37bc","modified":1627653847707},{"_id":"source/_posts/20180725.md","hash":"ef561fff0744d3d80dacb9a4e710579897bbd99e","modified":1627623506381},{"_id":"source/_posts/20180727.md","hash":"62d3b771b52387496fa2f36bd4d86179899a1d72","modified":1627791635990},{"_id":"source/_posts/20180802.md","hash":"f3e471b255ba1a4449d30ada6beaf7befecc0b4d","modified":1627795285231},{"_id":"source/_posts/20180815.md","hash":"cd29cb51eff149ef0e25696263118dc800ebd29f","modified":1627568184581},{"_id":"source/_posts/20180916.md","hash":"cedf25961978404e270971592819ad9c30b14aff","modified":1627707622396},{"_id":"source/_posts/20181010.md","hash":"b8d5fceceb20b26cf7b1a241e423f40f2167653b","modified":1627564675383},{"_id":"source/_posts/20181023.md","hash":"618548337f40604b6ef2a0ac85d506eadc07ea15","modified":1627599068250},{"_id":"source/_posts/20181111.md","hash":"825905016229eb2bfcfa27b826986c7f09833b28","modified":1627711272182},{"_id":"source/_posts/20181112.md","hash":"2d80226146f077205aa1e009bb674712471c6254","modified":1627564036284},{"_id":"source/_posts/20181113.md","hash":"7426f8ef20306ce63d19a9c5106eff15b9fd9983","modified":1627696085791},{"_id":"source/_posts/20181114.md","hash":"fade689dc7bc20a80a05c2ee213fb4489ac61edc","modified":1627483310207},{"_id":"source/_posts/20181115.md","hash":"0c8e2dee17800fbfe7f18ded37587f6a8e4ca771","modified":1627483310200},{"_id":"source/_posts/20190107.md","hash":"0a195df11e8a310addd95677120c5e27b55dc8dd","modified":1627483310210},{"_id":"source/_posts/20190112.md","hash":"0fd0504a23cdc30342ab12b27721c7f9a001a8b7","modified":1627597858724},{"_id":"source/_posts/20210728.md","hash":"3361e29a1e6fdd4588491a387f29e52a5e07c36e","modified":1627566228766},{"_id":"source/_posts/20210730.md","hash":"3e80aae58762751ae22d850ab3db7b1440f6d51b","modified":1627566827939},{"_id":"source/about/index.md","hash":"68d7f5958d1ea5f1f75a0ebce43630b9c7bea3a9","modified":1627624270527},{"_id":"source/tags/index.md","hash":"522a7f03486a3113d6a4cec3bfa0cbb7c2e70c9c","modified":1627624270527},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1627624270592},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1627624270592},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1627624270593},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1627624270593},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1627624270593},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1627624270598},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1627624270599},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1627624270599},{"_id":"themes/yelee/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1627624270599},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1627624270599},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1627624270599},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1627624270599},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1627624270600},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"4024557da5cd7925084eb0bdf045ef438a0b5754","modified":1627624270593},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"8af583c5f60c69ffdc97bee4e8fdac1ba34ebecd","modified":1627624270593},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1627624270593},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"d781737389f408a5dd57a0f9430d2704b7fe192c","modified":1627624270594},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"a439ebf7c4798ad3830e66ccf226a60b05ffea0a","modified":1627624270594},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"2ea24319611a8fceeed4491c710920ab72b3e165","modified":1627624270595},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1627624270595},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"8ef930a8ed8b1a3d71b18cca02bc4963e310cf00","modified":1627624270595},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1627624270595},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1627624270596},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"6ea8bacacc8370ccf5af4e6f66da3bc743b88342","modified":1627624270596},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"252f3757edea31d55a7e5624e2214f268bf07283","modified":1627624270596},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"48696ded8e57def05d7ea58e74730f49d66ea6b5","modified":1627624270596},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1627624270596},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"9e504a0ec060ac3c6622855734ebea6eca2b78e9","modified":1627624270596},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"190efc2e8ee037387685ff7dd24ae6db8bc77c60","modified":1627624270597},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"6da102cd4a05bc6b4807b937862a7332f6845e5f","modified":1627624270598},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1627624270598},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1627624270598},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"a0c6362e0f0161bbb7e70d50a4d9e39f2ff8ca48","modified":1627624270598},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1627624270602},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1627624270602},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1627624270602},{"_id":"themes/yelee/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1627624270604},{"_id":"themes/yelee/source/css/_variables.styl","hash":"bca217a64e422ea7a4a1748b8fc980b408e8c836","modified":1627624270608},{"_id":"themes/yelee/source/css/style.styl","hash":"33519d7a6be12193795382840810e9ab1a5eae8e","modified":1627624270608},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1627624270608},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1627624270608},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1627624270608},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1627624270608},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1627624270608},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1627624270608},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1627624270609},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1627624270609},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1627624270609},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1627624270609},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1627624270609},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1627624270609},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1627624270609},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1627624270609},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1627624270609},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1627624270609},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1627624270610},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1627624270610},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1627624270610},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1627624270610},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1627624270610},{"_id":"themes/yelee/source/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1627624270610},{"_id":"themes/yelee/source/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1627624270610},{"_id":"themes/yelee/source/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1627624270611},{"_id":"themes/yelee/source/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1627624270611},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1627624270611},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1627624270611},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1627624270602},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1627624270603},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1627624270604},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1627624270594},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1627624270594},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"b0b73b4629983b4de447418f30bf744cdf7ed044","modified":1627624270594},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"15c269b81046b22ee44d38d9a08fc66618318435","modified":1627624270594},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1627624270595},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"265bb12f7cfa5e0bcbb74fdd409ba13a6d9d2e22","modified":1627624270597},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"593cdf0a9eca655c8a763f2d5fb22254d19b1252","modified":1627624270597},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"357a8de8a7ed8194efc16f55f97f7e2551b31bf9","modified":1627624270597},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"60cb646f3bc22c46d6ff4b95bb36dad577ed76c0","modified":1627624270597},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"9dad471e27de9e066666f3082137eccaede2e67b","modified":1627624270597},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1627624270598},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1627624270600},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1627624270600},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1627624270601},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1627624270601},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"416786f566582fe697a12bb03a9eb2d1c604e2c7","modified":1627624270604},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"384f9a9c017400b12f52ac33759380075e527998","modified":1627624270605},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1627624270605},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4dcf5d3e3435897de91b39473a93fb7c3ad73dde","modified":1627624270606},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"db9cc156c7df27f7f54b0e7ff34b5949f55f99eb","modified":1627624270606},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"d82129844528ae1a5c9547bc6d3f5bd37b0fb801","modified":1627624270606},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"034eb9605e006a0d0098bd963e9cdc11a1eaf6c3","modified":1627624270606},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"4681032f51fd0df6451051ba35efa1f9f745c302","modified":1627624270606},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"d05287b44c64576b8560461bc6c3b7e8ceda5539","modified":1627624270606},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"1932774d30b8706919342f9cf36ea2d99987ce14","modified":1627624270606},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1627624270607},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"24ff28457b5e1519a8b4561284f6159bdd827ad4","modified":1627624270607},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"9d7847cc899970a19d288c9eec9f24691c053ef3","modified":1627624270607},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1627624270607},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1627624270607},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1627624270607},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1627624270607},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"45d36a307c22a754ed87f3ae6441ba8616f7329c","modified":1627624270604},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"9b96dd1c51b43a1130b3bb6eedb293b77eef8b1d","modified":1627624270604},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"ebf7ca8598d93235479460ea7d1be97d44224b05","modified":1627624270604},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"816044b7680514626981e945ee6be943a5de60a7","modified":1627624270605},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1627624270605},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"2014a25ec300910b8a093ec8010f6703a2142021","modified":1627624270605},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1627624270605},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"365026a5a30bcc88bec1b46c391c7d3bce41f033","modified":1627624270605},{"_id":"public/categories/index.html","hash":"03edb23a9ccc836eee971815d34355eb96549269","modified":1627624488961},{"_id":"public/categories/综合模块/index.html","hash":"c4af2328a2045bb21668ec1c4fc5efd19049d8fa","modified":1627624488961},{"_id":"public/tags/缓存/index.html","hash":"695c1b6916698c3f59ecef478c13d9c013018e39","modified":1627624488961},{"_id":"public/tags/消息队列/index.html","hash":"706d6a636fd79f0154f1eb301e12c9ad0c21f8a5","modified":1627624488961},{"_id":"public/about/index.html","hash":"699111bb410a5ecbf398df96a7051cffe3157cc3","modified":1627624488961},{"_id":"public/tags/index.html","hash":"ec5dd1cefe37666b8092334672a4a6c197d11b7c","modified":1627624488961},{"_id":"public/2021/07/29/20210730/index.html","hash":"0c32cb4d7d171a880ce0d77d92619b83afdcb71d","modified":1627624488961},{"_id":"public/2021/07/29/20181113/index.html","hash":"fb322ddcd7bc4a4c06e64d1a554393093efeccb5","modified":1627624488961},{"_id":"public/2021/07/29/20181111/index.html","hash":"80f43d06dbbf598135b2e495a03ee0657833a355","modified":1627624488961},{"_id":"public/2021/07/29/20180916/index.html","hash":"efc382081903901ef3c486c6736148ab24d6f86f","modified":1627624488961},{"_id":"public/2021/07/29/20180617/index.html","hash":"f78ffafd40a426590223b45dc272901e86f26498","modified":1627624488961},{"_id":"public/2021/07/29/20180630/index.html","hash":"8e7b24702d9c9db5540d65961c22b26830631120","modified":1627624488962},{"_id":"public/2021/07/29/20180725/index.html","hash":"e3004579a6d8af02d2ca9799f07e3aceb4b8ae11","modified":1627624488962},{"_id":"public/2021/07/29/20171212/index.html","hash":"f8c144fcb3e409fab169fc4f9579b2cc470175d4","modified":1627624488962},{"_id":"public/2021/07/28/20210728/index.html","hash":"938b874ec3cbe5e20fb903ef8c374e7b73c0d6eb","modified":1627624488962},{"_id":"public/2021/07/28/20181114/index.html","hash":"e02eea445f9090c0b9b8df14edd14bf398d23a55","modified":1627624488962},{"_id":"public/2021/07/28/20181115/index.html","hash":"9aab12b6d5169ce0624ad207979719e4c36997e4","modified":1627624488962},{"_id":"public/2021/07/28/20190107/index.html","hash":"69f085e1c7b666962b393fa9f38bb5e515f3d11c","modified":1627624488962},{"_id":"public/2021/07/28/20190112/index.html","hash":"4b1b9695aafd0f75728c295bdafc7b4736b2002f","modified":1627624488962},{"_id":"public/2021/07/28/20180815/index.html","hash":"19b97b6f4c277dc8a676192389e1a0f2ea7889ec","modified":1627624488962},{"_id":"public/2021/07/28/20181010/index.html","hash":"29da10621fae6e6dcf541f2babe0c569ca9aa574","modified":1627624488962},{"_id":"public/2021/07/28/20181023/index.html","hash":"93960a494d54c63d107e83b261ec69243f0a8b2c","modified":1627624488962},{"_id":"public/2021/07/28/20181112/index.html","hash":"a0ba8af210f90cdc1cc5d9ea2c1d165f1b65c5ca","modified":1627624488962},{"_id":"public/2021/07/28/20180619/index.html","hash":"898bea21f103b1ce4ba69d47622667d4028a9223","modified":1627624488963},{"_id":"public/2021/07/28/20180727/index.html","hash":"1397e2dc29add3caac859dee969c9b2c928a49e9","modified":1627624488963},{"_id":"public/2021/07/28/20180720/index.html","hash":"883e7f023b1d6016d5fd346ed40bd7c08631652e","modified":1627624488963},{"_id":"public/2021/07/28/20180802/index.html","hash":"4e347a7ae60b54682ef370f98eca216a067fe9c5","modified":1627624488963},{"_id":"public/2021/07/28/20170918/index.html","hash":"33743541191ab50e157c902393e8639949fc7915","modified":1627624488963},{"_id":"public/2021/07/28/20180618/index.html","hash":"4d9ab104fb9a42dcdd4e47eaa28bc4fbe648919b","modified":1627624488963},{"_id":"public/archives/index.html","hash":"9c328db04c97cfe7a9fbcf800399592dd9eaeb28","modified":1627624488963},{"_id":"public/archives/page/2/index.html","hash":"a915f81da3e4e5764f8dfe7b5ee6338abd0ad831","modified":1627624488963},{"_id":"public/archives/page/3/index.html","hash":"b468dd6c0947f8d35ad3dfd2e0850e93bb7359dd","modified":1627624488963},{"_id":"public/archives/2021/index.html","hash":"901900c15b0a376419b9397d71b55af1b2591f3a","modified":1627624488963},{"_id":"public/archives/2021/page/2/index.html","hash":"86f47e1cc87503fac8a4c4a1fe858ca32590978f","modified":1627624488963},{"_id":"public/archives/2021/page/3/index.html","hash":"c5a687539054a4300fa1deeeb0f0db20785a3e3c","modified":1627624488963},{"_id":"public/archives/2021/07/index.html","hash":"c2c1c16be2bcf4e9e1c416f6129d9a462e1716f2","modified":1627624488963},{"_id":"public/archives/2021/07/page/2/index.html","hash":"4ad1d8065fca354bcfe3a9dd43b711ad40eaa569","modified":1627624488963},{"_id":"public/archives/2021/07/page/3/index.html","hash":"b95f4529ff785023ad0f3c7d674ba7dd0fb38995","modified":1627624488963},{"_id":"public/categories/基础模块/index.html","hash":"62777c4dba003c33afeb7cccab53b221e7d878ba","modified":1627624488963},{"_id":"public/categories/应用模块/index.html","hash":"bd862213fdaf7d4d91f369a560f57dfe79f0739e","modified":1627624488964},{"_id":"public/categories/应用模块/page/2/index.html","hash":"66c945a92372a1ad03a13c9334df8feb2040bea5","modified":1627624488964},{"_id":"public/index.html","hash":"82efcb704d6f8e35232e512e0c7d32d238a1bae5","modified":1627624488964},{"_id":"public/page/3/index.html","hash":"28d5166f20f66ceb0d389be63cce9bce58f63bad","modified":1627624488964},{"_id":"public/page/2/index.html","hash":"8e0432d1073a0b672388a01ec3f8f96d571cc958","modified":1627624488964},{"_id":"public/tags/框架/index.html","hash":"29d39cb4e87dfd3490f73511ea313a46bc8b1535","modified":1627624488964},{"_id":"public/tags/中间件/index.html","hash":"4b1d3fc0b6a9a7d4101c30fd4672f8b55f955b89","modified":1627624488964},{"_id":"public/tags/数据库/index.html","hash":"50a9e5835800ca75cba8a26f688ffee0fbc21181","modified":1627624488964},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1627624488971},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1627624488971},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1627624488971},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1627624488971},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1627624488972},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1627624488972},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1627624488972},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1627624488972},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1627624488972},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1627624488972},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1627624488972},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1627624488972},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1627624488972},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1627624488972},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1627624488972},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1627624488972},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1627624488972},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1627624488972},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1627624488972},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1627624488972},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1627624488972},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1627624488972},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1627624488972},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1627624488972},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1627624488972},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1627624488972},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1627624488972},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1627624488973},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1627624489467},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1627624489467},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1627624489468},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1627624489470},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1627624489470},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1627624489470},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1627624489471},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1627624489471},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1627624489471},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1627624489471},{"_id":"public/css/style.css","hash":"689bb5bd04a0693814432d971e50a5652d4d6631","modified":1627624489471},{"_id":"themes/yelee/source/img/posts/索引优化.png","hash":"57f3578a2eee3477158102ecc96f4eefdc444b1e","modified":1627694937979},{"_id":"themes/yelee/source/img/posts/Redis数据结构.png","hash":"2e41fb643c2545ae384dc4cc231086f62f2a0e0a","modified":1627708840376},{"_id":"themes/yelee/source/img/posts/聚簇索引.png","hash":"64d1d1b8e841cf95b54a84cf3bd0221aa264ef7e","modified":1627694659297},{"_id":"themes/yelee/source/img/posts/MyBatis.png","hash":"beec07d8f23bf7db21b438840d75235ecc1de7b4","modified":1627795144780}],"Category":[{"name":"综合模块","_id":"ckrpxlgsr0004ni0m45b2uztv"},{"name":"基础模块","_id":"ckrpxlgsv0009ni0mfxp9edx7"},{"name":"应用模块","_id":"ckrpxlgt4000tni0moed4hn4z"}],"Data":[],"Page":[{"title":"分类","date":"2017-12-23T12:34:27.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-12-23 20:34:27\ntype: \"categories\"\n---\n","updated":"2021-07-30T05:51:10.527Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckrpxlgsm0000ni0ml2o735rm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2017-12-23T12:34:27.000Z","type":"about","_content":"Java程序员\n\n# 工作经历\n* 2019.11 - 至今 ：上海仙豆智能机器人有限公司\n* 2018.10 - 2019.11 上海中移智行有限公司\n* 2015.12 - 2018.10 : 苏州科达科技股份有限公司\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-12-23 20:34:27\ntype: \"about\"\n---\nJava程序员\n\n# 工作经历\n* 2019.11 - 至今 ：上海仙豆智能机器人有限公司\n* 2018.10 - 2019.11 上海中移智行有限公司\n* 2015.12 - 2018.10 : 苏州科达科技股份有限公司\n\n","updated":"2021-07-30T05:51:10.527Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckrpxlgsp0002ni0m1l490dji","content":"<p>Java程序员</p>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><ul>\n<li>2019.11 - 至今 ：上海仙豆智能机器人有限公司</li>\n<li>2018.10 - 2019.11 上海中移智行有限公司</li>\n<li>2015.12 - 2018.10 : 苏州科达科技股份有限公司</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Java程序员</p>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><ul>\n<li>2019.11 - 至今 ：上海仙豆智能机器人有限公司</li>\n<li>2018.10 - 2019.11 上海中移智行有限公司</li>\n<li>2015.12 - 2018.10 : 苏州科达科技股份有限公司</li>\n</ul>\n"},{"title":"标签","date":"2017-07-28T07:17:20.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-07-28 15:17:20\ntype: \"tags\"\n---\n","updated":"2021-07-30T05:51:10.527Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckrpxlgss0005ni0mdpe5zct5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"硬技能图谱","_content":"\n努力很容易，坚持努力很难，不忘初心，方得始终。\n<!-- more -->\n![img](http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png)\n","source":"_posts/20170918.md","raw":"---\ntitle: 硬技能图谱\ncategory: 综合模块\n---\n\n努力很容易，坚持努力很难，不忘初心，方得始终。\n<!-- more -->\n![img](http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png)\n","slug":"20170918","published":1,"date":"2021-07-28T12:08:06.940Z","updated":"2021-07-28T14:39:43.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgsm0001ni0mycbnulp7","content":"<p>努力很容易，坚持努力很难，不忘初心，方得始终。<br><a id=\"more\"></a><br><img src=\"http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<p>努力很容易，坚持努力很难，不忘初心，方得始终。<br>","more":"<br><img src=\"http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png\" alt=\"img\"></p>"},{"title":"操作系统与计算机网络","_content":"\n<!-- more -->\n\n## 计算机网络\n\n### HTTP\n\n### TCP\n三次握手建连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png)\n\n四次挥手断连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png)\n\n### UDP\n\n### QUIC\n\n### RPC\n\n### MQTT\n\n### GB32960(新能源通信协议)\n[在线文档](http://c.gb688.cn/bzgk/gb/showGb?type=online&hcno=674DE45C0AD3DE2CD75B9C4CD8ED57C1)\n\n\n## 操作系统\n\n### top\n### netstat\n\n## 经验\n生产配置：4C8G\n\n\n","source":"_posts/20171212.md","raw":"---\ntitle: 操作系统与计算机网络\ncategory: 基础模块\n---\n\n<!-- more -->\n\n## 计算机网络\n\n### HTTP\n\n### TCP\n三次握手建连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png)\n\n四次挥手断连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png)\n\n### UDP\n\n### QUIC\n\n### RPC\n\n### MQTT\n\n### GB32960(新能源通信协议)\n[在线文档](http://c.gb688.cn/bzgk/gb/showGb?type=online&hcno=674DE45C0AD3DE2CD75B9C4CD8ED57C1)\n\n\n## 操作系统\n\n### top\n### netstat\n\n## 经验\n生产配置：4C8G\n\n\n","slug":"20171212","published":1,"date":"2021-07-29T12:12:55.018Z","updated":"2021-07-29T12:12:55.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgsq0003ni0mn61ti78b","content":"<a id=\"more\"></a>\n<h2 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h2><h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><p>三次握手建连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png\" alt=\"img\"></p>\n<p>四次挥手断连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png\" alt=\"img\"></p>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><h3 id=\"QUIC\"><a href=\"#QUIC\" class=\"headerlink\" title=\"QUIC\"></a>QUIC</h3><h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><h3 id=\"MQTT\"><a href=\"#MQTT\" class=\"headerlink\" title=\"MQTT\"></a>MQTT</h3><h3 id=\"GB32960-新能源通信协议\"><a href=\"#GB32960-新能源通信协议\" class=\"headerlink\" title=\"GB32960(新能源通信协议)\"></a>GB32960(新能源通信协议)</h3><p><a href=\"http://c.gb688.cn/bzgk/gb/showGb?type=online&amp;hcno=674DE45C0AD3DE2CD75B9C4CD8ED57C1\" target=\"_blank\" rel=\"external\">在线文档</a></p>\n<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><p>生产配置：4C8G</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h2><h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><p>三次握手建连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png\" alt=\"img\"></p>\n<p>四次挥手断连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png\" alt=\"img\"></p>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><h3 id=\"QUIC\"><a href=\"#QUIC\" class=\"headerlink\" title=\"QUIC\"></a>QUIC</h3><h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><h3 id=\"MQTT\"><a href=\"#MQTT\" class=\"headerlink\" title=\"MQTT\"></a>MQTT</h3><h3 id=\"GB32960-新能源通信协议\"><a href=\"#GB32960-新能源通信协议\" class=\"headerlink\" title=\"GB32960(新能源通信协议)\"></a>GB32960(新能源通信协议)</h3><p><a href=\"http://c.gb688.cn/bzgk/gb/showGb?type=online&amp;hcno=674DE45C0AD3DE2CD75B9C4CD8ED57C1\" target=\"_blank\" rel=\"external\">在线文档</a></p>\n<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><p>生产配置：4C8G</p>"},{"title":"Java","_content":"\n# 常用集合\n## HashMap\n时间复杂度：最好O（1），最差O（N）\n实现：数组加链表，数组中的每一项是一个链表，通过**计算**存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，链表中的节点存储的是键值对。\n优化：JDK1.8之后为减少搜索时间，当链表长度大于阔值（默认8）且数组长度大于64时，链表会转换为**红黑树**。\n参考文章：[Java集合之一—HashMap](https://blog.csdn.net/woshimaxiao1/article/details/83661464)\n## ConcurrentHashMap\n1.7：使用 Segment （继承ReentrantLock，结构为数组加链表且均采用 volatile 修饰，保证获取时的可见性）进行分段加锁，降低并发锁定，支持 Segment 数组数量的线程并发。\n1.8：抛弃了分段锁，使用 CAS + synchronized 来提高性能，并且同 hashMap 一样增加了红黑树。\n参考文章：[HashMap？ConcurrentHashMap？相信看完这篇没人能难住你！](https://blog.csdn.net/weixin_44460333/article/details/86770169)\n\n\n## JUC\n### 原子类\n例如：AtomicBoolean、AtomicLong、AtomicInteger、LongAdder、LongAccumulator等。\nAtomicLong：通过 unsafe 类实现，基于CAS。\nLongAdder：基于Cell，分段锁思想，空间换时间，更适合高并发场景。\nLongAccumulator：提供了比LongAdder更强大的功能，能够指定对数据的操作规则，例如可以把对数据的相加操作改成相乘操作。\n### 锁类\nReentrantLock\nReentrantReadWriteLock\nStampedLock：JDK 1.8 改进的读写锁，是使用一种 CLH 的乐观锁，能够有效防止写饥饿。所谓写饥饿就是在多线程读写时，读线程访问非常频繁，导致总是有读线程占用资源，写线程很难加上写锁。\nLockSupport\n### 异步执行类\nExecutors：用于创建线程池\nForkJoinPool：1.7提供，采用分治思想，将大任务分解成多个小任务处理，然后在合并处理结果。特点是使用工作窃取算法，可以有效平衡多任务时间长短不一的场景。\nFutureTask\nCompletableFuture：可以支持流式调用，可以方便的进行多 future 的组合使用，例如可以同时执行两个异步任务，然后对执行结果进行合并处理。还可以很方便地设置完成时间。\n### 阻塞队列类\nLinkedBlockingDeque：双端队列，也就是可以分别从队头和队尾操作入队、出队。\nArrayBlockingQueue：单端队列，只能从队尾入队，队头出队。 \n### 多线程协作类\nCountDownLatch：实现计数器功能，可以用来控制等待多个线程执行任务后进行汇总。\nCyclicBarrier：可以让一组线程等待至某个状态之后，再全部同时执行，一般在测试时使用，可以让多线程更好的并发执行。\nSemaphore：用来控制对共享资源的访问并发度。允许多个线程共享资源，适用于限制使用共享资源线程数量的场景，例如 100 个车辆要使用 20 个停车位，那么最多允许 20 个车占用停车位。\n### 集合类\nConcurrentHashMap：线程安全的HashMap。\nCopyOnWriteArrayList：通过写入数据时进行 copy 修改，然后更新引用的方式，来消除并行读写中的锁使用，比较适合读多写少，数据量比较小，但是并发非常高的场景。\n\n# 反射\n\n# 动态代理\n\n## JDK动态代理\n\n## CGLIB动态代理\nJDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。\n\n# 基础数据类型\n\n# 对象引用\n\n# 异常\n\n# 注解\n\n# SPI\n\n# 版本特性\n\n","source":"_posts/20180617.md","raw":"---\ntitle: Java\ncategory: 基础模块\n---\n\n# 常用集合\n## HashMap\n时间复杂度：最好O（1），最差O（N）\n实现：数组加链表，数组中的每一项是一个链表，通过**计算**存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，链表中的节点存储的是键值对。\n优化：JDK1.8之后为减少搜索时间，当链表长度大于阔值（默认8）且数组长度大于64时，链表会转换为**红黑树**。\n参考文章：[Java集合之一—HashMap](https://blog.csdn.net/woshimaxiao1/article/details/83661464)\n## ConcurrentHashMap\n1.7：使用 Segment （继承ReentrantLock，结构为数组加链表且均采用 volatile 修饰，保证获取时的可见性）进行分段加锁，降低并发锁定，支持 Segment 数组数量的线程并发。\n1.8：抛弃了分段锁，使用 CAS + synchronized 来提高性能，并且同 hashMap 一样增加了红黑树。\n参考文章：[HashMap？ConcurrentHashMap？相信看完这篇没人能难住你！](https://blog.csdn.net/weixin_44460333/article/details/86770169)\n\n\n## JUC\n### 原子类\n例如：AtomicBoolean、AtomicLong、AtomicInteger、LongAdder、LongAccumulator等。\nAtomicLong：通过 unsafe 类实现，基于CAS。\nLongAdder：基于Cell，分段锁思想，空间换时间，更适合高并发场景。\nLongAccumulator：提供了比LongAdder更强大的功能，能够指定对数据的操作规则，例如可以把对数据的相加操作改成相乘操作。\n### 锁类\nReentrantLock\nReentrantReadWriteLock\nStampedLock：JDK 1.8 改进的读写锁，是使用一种 CLH 的乐观锁，能够有效防止写饥饿。所谓写饥饿就是在多线程读写时，读线程访问非常频繁，导致总是有读线程占用资源，写线程很难加上写锁。\nLockSupport\n### 异步执行类\nExecutors：用于创建线程池\nForkJoinPool：1.7提供，采用分治思想，将大任务分解成多个小任务处理，然后在合并处理结果。特点是使用工作窃取算法，可以有效平衡多任务时间长短不一的场景。\nFutureTask\nCompletableFuture：可以支持流式调用，可以方便的进行多 future 的组合使用，例如可以同时执行两个异步任务，然后对执行结果进行合并处理。还可以很方便地设置完成时间。\n### 阻塞队列类\nLinkedBlockingDeque：双端队列，也就是可以分别从队头和队尾操作入队、出队。\nArrayBlockingQueue：单端队列，只能从队尾入队，队头出队。 \n### 多线程协作类\nCountDownLatch：实现计数器功能，可以用来控制等待多个线程执行任务后进行汇总。\nCyclicBarrier：可以让一组线程等待至某个状态之后，再全部同时执行，一般在测试时使用，可以让多线程更好的并发执行。\nSemaphore：用来控制对共享资源的访问并发度。允许多个线程共享资源，适用于限制使用共享资源线程数量的场景，例如 100 个车辆要使用 20 个停车位，那么最多允许 20 个车占用停车位。\n### 集合类\nConcurrentHashMap：线程安全的HashMap。\nCopyOnWriteArrayList：通过写入数据时进行 copy 修改，然后更新引用的方式，来消除并行读写中的锁使用，比较适合读多写少，数据量比较小，但是并发非常高的场景。\n\n# 反射\n\n# 动态代理\n\n## JDK动态代理\n\n## CGLIB动态代理\nJDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。\n\n# 基础数据类型\n\n# 对象引用\n\n# 异常\n\n# 注解\n\n# SPI\n\n# 版本特性\n\n","slug":"20180617","published":1,"date":"2021-07-29T12:12:55.019Z","updated":"2021-07-29T12:34:49.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgst0006ni0m32xqj6qu","content":"<h1 id=\"常用集合\"><a href=\"#常用集合\" class=\"headerlink\" title=\"常用集合\"></a>常用集合</h1><h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><p>时间复杂度：最好O（1），最差O（N）<br>实现：数组加链表，数组中的每一项是一个链表，通过<strong>计算</strong>存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，链表中的节点存储的是键值对。<br>优化：JDK1.8之后为减少搜索时间，当链表长度大于阔值（默认8）且数组长度大于64时，链表会转换为<strong>红黑树</strong>。<br>参考文章：<a href=\"https://blog.csdn.net/woshimaxiao1/article/details/83661464\" target=\"_blank\" rel=\"external\">Java集合之一—HashMap</a></p>\n<h2 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h2><p>1.7：使用 Segment （继承ReentrantLock，结构为数组加链表且均采用 volatile 修饰，保证获取时的可见性）进行分段加锁，降低并发锁定，支持 Segment 数组数量的线程并发。<br>1.8：抛弃了分段锁，使用 CAS + synchronized 来提高性能，并且同 hashMap 一样增加了红黑树。<br>参考文章：<a href=\"https://blog.csdn.net/weixin_44460333/article/details/86770169\" target=\"_blank\" rel=\"external\">HashMap？ConcurrentHashMap？相信看完这篇没人能难住你！</a></p>\n<h2 id=\"JUC\"><a href=\"#JUC\" class=\"headerlink\" title=\"JUC\"></a>JUC</h2><h3 id=\"原子类\"><a href=\"#原子类\" class=\"headerlink\" title=\"原子类\"></a>原子类</h3><p>例如：AtomicBoolean、AtomicLong、AtomicInteger、LongAdder、LongAccumulator等。<br>AtomicLong：通过 unsafe 类实现，基于CAS。<br>LongAdder：基于Cell，分段锁思想，空间换时间，更适合高并发场景。<br>LongAccumulator：提供了比LongAdder更强大的功能，能够指定对数据的操作规则，例如可以把对数据的相加操作改成相乘操作。</p>\n<h3 id=\"锁类\"><a href=\"#锁类\" class=\"headerlink\" title=\"锁类\"></a>锁类</h3><p>ReentrantLock<br>ReentrantReadWriteLock<br>StampedLock：JDK 1.8 改进的读写锁，是使用一种 CLH 的乐观锁，能够有效防止写饥饿。所谓写饥饿就是在多线程读写时，读线程访问非常频繁，导致总是有读线程占用资源，写线程很难加上写锁。<br>LockSupport</p>\n<h3 id=\"异步执行类\"><a href=\"#异步执行类\" class=\"headerlink\" title=\"异步执行类\"></a>异步执行类</h3><p>Executors：用于创建线程池<br>ForkJoinPool：1.7提供，采用分治思想，将大任务分解成多个小任务处理，然后在合并处理结果。特点是使用工作窃取算法，可以有效平衡多任务时间长短不一的场景。<br>FutureTask<br>CompletableFuture：可以支持流式调用，可以方便的进行多 future 的组合使用，例如可以同时执行两个异步任务，然后对执行结果进行合并处理。还可以很方便地设置完成时间。</p>\n<h3 id=\"阻塞队列类\"><a href=\"#阻塞队列类\" class=\"headerlink\" title=\"阻塞队列类\"></a>阻塞队列类</h3><p>LinkedBlockingDeque：双端队列，也就是可以分别从队头和队尾操作入队、出队。<br>ArrayBlockingQueue：单端队列，只能从队尾入队，队头出队。 </p>\n<h3 id=\"多线程协作类\"><a href=\"#多线程协作类\" class=\"headerlink\" title=\"多线程协作类\"></a>多线程协作类</h3><p>CountDownLatch：实现计数器功能，可以用来控制等待多个线程执行任务后进行汇总。<br>CyclicBarrier：可以让一组线程等待至某个状态之后，再全部同时执行，一般在测试时使用，可以让多线程更好的并发执行。<br>Semaphore：用来控制对共享资源的访问并发度。允许多个线程共享资源，适用于限制使用共享资源线程数量的场景，例如 100 个车辆要使用 20 个停车位，那么最多允许 20 个车占用停车位。</p>\n<h3 id=\"集合类\"><a href=\"#集合类\" class=\"headerlink\" title=\"集合类\"></a>集合类</h3><p>ConcurrentHashMap：线程安全的HashMap。<br>CopyOnWriteArrayList：通过写入数据时进行 copy 修改，然后更新引用的方式，来消除并行读写中的锁使用，比较适合读多写少，数据量比较小，但是并发非常高的场景。</p>\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><h1 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h1><h2 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h2><h2 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h2><p>JDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。</p>\n<h1 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h1><h1 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h1><h1 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h1><h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h1 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a>SPI</h1><h1 id=\"版本特性\"><a href=\"#版本特性\" class=\"headerlink\" title=\"版本特性\"></a>版本特性</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"常用集合\"><a href=\"#常用集合\" class=\"headerlink\" title=\"常用集合\"></a>常用集合</h1><h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><p>时间复杂度：最好O（1），最差O（N）<br>实现：数组加链表，数组中的每一项是一个链表，通过<strong>计算</strong>存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，链表中的节点存储的是键值对。<br>优化：JDK1.8之后为减少搜索时间，当链表长度大于阔值（默认8）且数组长度大于64时，链表会转换为<strong>红黑树</strong>。<br>参考文章：<a href=\"https://blog.csdn.net/woshimaxiao1/article/details/83661464\" target=\"_blank\" rel=\"external\">Java集合之一—HashMap</a></p>\n<h2 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h2><p>1.7：使用 Segment （继承ReentrantLock，结构为数组加链表且均采用 volatile 修饰，保证获取时的可见性）进行分段加锁，降低并发锁定，支持 Segment 数组数量的线程并发。<br>1.8：抛弃了分段锁，使用 CAS + synchronized 来提高性能，并且同 hashMap 一样增加了红黑树。<br>参考文章：<a href=\"https://blog.csdn.net/weixin_44460333/article/details/86770169\" target=\"_blank\" rel=\"external\">HashMap？ConcurrentHashMap？相信看完这篇没人能难住你！</a></p>\n<h2 id=\"JUC\"><a href=\"#JUC\" class=\"headerlink\" title=\"JUC\"></a>JUC</h2><h3 id=\"原子类\"><a href=\"#原子类\" class=\"headerlink\" title=\"原子类\"></a>原子类</h3><p>例如：AtomicBoolean、AtomicLong、AtomicInteger、LongAdder、LongAccumulator等。<br>AtomicLong：通过 unsafe 类实现，基于CAS。<br>LongAdder：基于Cell，分段锁思想，空间换时间，更适合高并发场景。<br>LongAccumulator：提供了比LongAdder更强大的功能，能够指定对数据的操作规则，例如可以把对数据的相加操作改成相乘操作。</p>\n<h3 id=\"锁类\"><a href=\"#锁类\" class=\"headerlink\" title=\"锁类\"></a>锁类</h3><p>ReentrantLock<br>ReentrantReadWriteLock<br>StampedLock：JDK 1.8 改进的读写锁，是使用一种 CLH 的乐观锁，能够有效防止写饥饿。所谓写饥饿就是在多线程读写时，读线程访问非常频繁，导致总是有读线程占用资源，写线程很难加上写锁。<br>LockSupport</p>\n<h3 id=\"异步执行类\"><a href=\"#异步执行类\" class=\"headerlink\" title=\"异步执行类\"></a>异步执行类</h3><p>Executors：用于创建线程池<br>ForkJoinPool：1.7提供，采用分治思想，将大任务分解成多个小任务处理，然后在合并处理结果。特点是使用工作窃取算法，可以有效平衡多任务时间长短不一的场景。<br>FutureTask<br>CompletableFuture：可以支持流式调用，可以方便的进行多 future 的组合使用，例如可以同时执行两个异步任务，然后对执行结果进行合并处理。还可以很方便地设置完成时间。</p>\n<h3 id=\"阻塞队列类\"><a href=\"#阻塞队列类\" class=\"headerlink\" title=\"阻塞队列类\"></a>阻塞队列类</h3><p>LinkedBlockingDeque：双端队列，也就是可以分别从队头和队尾操作入队、出队。<br>ArrayBlockingQueue：单端队列，只能从队尾入队，队头出队。 </p>\n<h3 id=\"多线程协作类\"><a href=\"#多线程协作类\" class=\"headerlink\" title=\"多线程协作类\"></a>多线程协作类</h3><p>CountDownLatch：实现计数器功能，可以用来控制等待多个线程执行任务后进行汇总。<br>CyclicBarrier：可以让一组线程等待至某个状态之后，再全部同时执行，一般在测试时使用，可以让多线程更好的并发执行。<br>Semaphore：用来控制对共享资源的访问并发度。允许多个线程共享资源，适用于限制使用共享资源线程数量的场景，例如 100 个车辆要使用 20 个停车位，那么最多允许 20 个车占用停车位。</p>\n<h3 id=\"集合类\"><a href=\"#集合类\" class=\"headerlink\" title=\"集合类\"></a>集合类</h3><p>ConcurrentHashMap：线程安全的HashMap。<br>CopyOnWriteArrayList：通过写入数据时进行 copy 修改，然后更新引用的方式，来消除并行读写中的锁使用，比较适合读多写少，数据量比较小，但是并发非常高的场景。</p>\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><h1 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h1><h2 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h2><h2 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h2><p>JDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。</p>\n<h1 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h1><h1 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h1><h1 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h1><h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h1 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a>SPI</h1><h1 id=\"版本特性\"><a href=\"#版本特性\" class=\"headerlink\" title=\"版本特性\"></a>版本特性</h1>"},{"title":"设计模式","_content":"\n设计模式分为 3 大类型共 23 种：\n* 创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n* 结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n* 行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。\n<!-- more -->\n\n# 单例模式\n\n# 工厂模式\n\n# 代理模式\n\n# 责任链模式\n\n# 适配器模式\n\n# 观察者模式\n\n# 构造者模式\n","source":"_posts/20180618.md","raw":"---\ntitle: 设计模式\ncategory: 基础模块\n---\n\n设计模式分为 3 大类型共 23 种：\n* 创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n* 结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n* 行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。\n<!-- more -->\n\n# 单例模式\n\n# 工厂模式\n\n# 代理模式\n\n# 责任链模式\n\n# 适配器模式\n\n# 观察者模式\n\n# 构造者模式\n","slug":"20180618","published":1,"date":"2021-07-28T12:08:06.940Z","updated":"2021-07-28T14:36:49.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgst0007ni0mbh92zw77","content":"<p>设计模式分为 3 大类型共 23 种：</p>\n<ul>\n<li>创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li>\n<li>结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li>\n<li>行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。<a id=\"more\"></a>\n</li>\n</ul>\n<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><h1 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h1><h1 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h1><h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h1 id=\"构造者模式\"><a href=\"#构造者模式\" class=\"headerlink\" title=\"构造者模式\"></a>构造者模式</h1>","site":{"data":{}},"excerpt":"<p>设计模式分为 3 大类型共 23 种：</p>\n<ul>\n<li>创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li>\n<li>结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li>\n<li>行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。","more":"</li>\n</ul>\n<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><h1 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h1><h1 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h1><h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h1 id=\"构造者模式\"><a href=\"#构造者模式\" class=\"headerlink\" title=\"构造者模式\"></a>构造者模式</h1>"},{"title":"JVM","_content":"\n架构师必备武器\n<!-- more -->\n\n# 内存模型\n\n## JVM内存模型\n\n## Java内存模型\n\n# 类加载\n\n# GC\n\n# 性能调优\n\n# 执行模式\n\n# 编译器优化\n","source":"_posts/20180619.md","raw":"---\ntitle: JVM\ncategory: 基础模块\n---\n\n架构师必备武器\n<!-- more -->\n\n# 内存模型\n\n## JVM内存模型\n\n## Java内存模型\n\n# 类加载\n\n# GC\n\n# 性能调优\n\n# 执行模式\n\n# 编译器优化\n","slug":"20180619","published":1,"date":"2021-07-28T12:08:06.941Z","updated":"2021-07-28T14:36:49.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgsu0008ni0mlehd0j7c","content":"<p>架构师必备武器<br><a id=\"more\"></a></p>\n<h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><h2 id=\"JVM内存模型\"><a href=\"#JVM内存模型\" class=\"headerlink\" title=\"JVM内存模型\"></a>JVM内存模型</h2><h2 id=\"Java内存模型\"><a href=\"#Java内存模型\" class=\"headerlink\" title=\"Java内存模型\"></a>Java内存模型</h2><h1 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h1><h1 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h1><h1 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h1><h1 id=\"执行模式\"><a href=\"#执行模式\" class=\"headerlink\" title=\"执行模式\"></a>执行模式</h1><h1 id=\"编译器优化\"><a href=\"#编译器优化\" class=\"headerlink\" title=\"编译器优化\"></a>编译器优化</h1>","site":{"data":{}},"excerpt":"<p>架构师必备武器<br>","more":"</p>\n<h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><h2 id=\"JVM内存模型\"><a href=\"#JVM内存模型\" class=\"headerlink\" title=\"JVM内存模型\"></a>JVM内存模型</h2><h2 id=\"Java内存模型\"><a href=\"#Java内存模型\" class=\"headerlink\" title=\"Java内存模型\"></a>Java内存模型</h2><h1 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h1><h1 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h1><h1 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h1><h1 id=\"执行模式\"><a href=\"#执行模式\" class=\"headerlink\" title=\"执行模式\"></a>执行模式</h1><h1 id=\"编译器优化\"><a href=\"#编译器优化\" class=\"headerlink\" title=\"编译器优化\"></a>编译器优化</h1>"},{"title":"并发与多线程","_content":"\n## 线程池\n线程池通过复用线程，避免线程频繁地创建和销毁。\n\n### 线程池任务执行流程\n提交任务的方法\nsubmit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。\nexecute：submit 最终也是通过 execute 执行的。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png)\n1. 向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。\n2. 如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。\n3. 如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。\n4. 如果已经达到了最大线程数，则执行指定的拒绝策略\n\n### 创建线程池\nJava 的 Executors 工具类中提供了 5 种类型的线程池。\n\n* FixedThreadPool\n固定大小线程池，特点是线程数固定，使用无界队列。\n适用于任务数量不均匀的场景、对内存压力不敏感但系统负载比较敏感的场景。\n\n~~~java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n~~~\n\n* CachedThreadPool\nCached 线程池，特点是不限制线程数。\n适用于要求低延迟的短期任务场景。\n\n~~~java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n~~~\n\n* SingleThreadExecutor\n单线程线程池，就是一个线程的固定线程池。\n适用于需要异步执行但需要保证任务顺序的场景。\n\n~~~java\npublic static ScheduledExecutorService newSingleThreadScheduledExecutor() {\n    return new DelegatedScheduledExecutorService\n        (new ScheduledThreadPoolExecutor(1));\n}\n~~~\n\n* ScheduledThreadPool\nScheduled 线程池。\n适用于定期执行任务场景，支持按固定频率定期执行和按固定延时定期执行两种方式。\n\n~~~java\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n    return new ScheduledThreadPoolExecutor(corePoolSize);\n}\n\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue());\n}\n~~~\n\n* WorkStealingPool\n工作窃取线程池，使用的是 ForkJoinPool，是固定并行度的多任务队列。\n适合任务执行时长不均匀的场景。\n\n~~~java\npublic static ExecutorService newWorkStealingPool(int parallelism) {\n     return new ForkJoinPool\n         (parallelism,\n          ForkJoinPool.defaultForkJoinWorkerThreadFactory,\n          null, true);\n }\n~~~\n另外还可以根据业务需要自定义线程池，可使用 ThreadPoolExecutor(JUC工具类) 或 ThreadPoolTaskExecutor(Spring封装类) 。\n\n### 核心参数\n* 核心线程数\n* 最大线程数\n* 线程空闲时间和空闲时间的单位\n当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。\n* 缓存队列\nArrayBlockingQueue: 有界队列，队列有最大容量限制\nLinkedBlockingQueue: 无界队列，队列不限制容量\nSynchronousQueue: 同步队列，内部没有缓冲区。\n* 线程工厂\n用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等，一般使用默认工厂类即可。\n\n~~~java\npublic class VehicleThreadFactory implements ThreadFactory {\n    private final ThreadGroup group;\n    private final AtomicInteger threadNumber = new AtomicInteger(1);\n    private final String prefix;\n    public VehicleThreadFactory(String name) {\n        SecurityManager s = System.getSecurityManager();\n        group = (s != null) ? s.getThreadGroup() :\n                Thread.currentThread().getThreadGroup();\n        prefix = name + \"-thread-\";\n    }\n    @Override\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(group, r,\n                prefix + threadNumber.getAndIncrement(),\n                0);\n        if (t.isDaemon()) {\n            t.setDaemon(false);\n        }\n        if (t.getPriority() != Thread.NORM_PRIORITY) {\n            t.setPriority(Thread.NORM_PRIORITY);\n        }\n        return t;\n    }\n}\n~~~\n* 拒绝策略\nAbort：默认策略，抛出 RejectedExecutionException 。\nDiscard：直接丢弃任务。\nCallerRuns：由提交任务的线程直接执行。\nDiscardOldest: 会丢弃最早提交的任务。\n也可以自定义策略，例如：\n~~~java\n(r, executor) -> {\n    try {\n        executor.getQueue().put(r);\n    } catch (InterruptedException e) {\n        log.warn(\"retry put task error,message:{}\", e);\n    }\n}\n~~~\n\n## 同步与互斥\n\n### synchronized\nsynchronized 应用在方法上时，在字节码中是通过方法的 **ACC_SYNCHRONIZED** 标志来实现的；\nsynchronized 应用在同步块上时，在字节码中是通过 **monitorenter** 和 **monitorexit** 实现的。\n最终都是通过对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，当 Monitor 被某个线程持有后，就会处于锁定状态，此时 Owner 会指向持有 Monitor 对象的线程。Monitor 还有两个队列，用来存放进入及等待获取锁的线程。\nJVM对其进行了大量优化\n* 锁消除\n* 锁粗化\n* 自旋和自适应自旋\n* 锁升级\n无锁->偏向锁->轻量级锁->重量级锁\n### Lock\nAQS是实现Lock基础，AQS 有一个 state 标记位，值为1时表示有线程占用，其他线程需要进入到同步队列等待。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ANLfHAAA3fj0S8po403.png)\n1. 当获得锁的线程需要等待某个条件时，会进入 condition 的等待队列，等待队列可以有多个。\n2. 当 condition 条件满足时，线程会从等待队列重新进入同步队列进行获取锁的竞争\n\n* ReentrantLock\n基于AQS实现，内部有公平锁和非公平锁两种实现，差别就在于新来的线程是否比已经在同步队列中的等待线程更早获得锁。\n* Semaphore\n基于AQS实现，差别在于 ReentrantLock 是独占锁，Semaphore 是共享锁。\n\n### CAS\n乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS。它认为并发操作并不总会发生。\n操作流程如下：其中比较并写回的操作是通过操作系统原语实现的，保证执行过程中不会被中断。\n1. 线程在读取数据时不进行加锁；\n2. 在准备写回数据时，比较原值是否修改；\n3. 若未被其他线程修改则写回；\n4. 若已被修改，则重新执行读取流程。\n\n缺点：容易出现ABA问题，不一定会影响结果，但还是需要防范，可以通过增加额外的标志位或者时间戳解决。JUC 工具包中提供了这样的类。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6AB5XwAAAWMnENBjk562.png)\n1. 线程 T1 读取值 A 之后，发生两次写入。\n2. 先由线程 T2 写回了 B\n3. 又由 T3 写回了 A\n4. 此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。\n\nsynchronized 和 ReentrantLock 的区别：\n相同点：都是可重入、重量级锁。\n不同点：\n1. synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API。\n2. ReentrantLock 比 synchronized 增加了一些高级功能。例如：等待可中断、可实现公平锁、可绑定多个条件。\n使用场景：\n\n## 线程状态转换\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI2Ab8rJAACvTREK08g324.png)\n1. 当创建一个线程时，线程处在 NEW 状态。\n2. 运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态，但线程此时是 READY 状态，就绪状态等待线程调度，在获取 CPU 后才能进入 RUNNING 运行状态。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。\n3. 线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态，当获取到锁后，会从 BLOCKED 状态恢复到 RUNNABLE 可运行状态。\n4. 调用 Object.wait、Thread.join等，进入 TIMED_WAITING 有超时时间的等待状态。调用 Thread.join 或者 Locksupport.park 等，进入 WAITING 无超时的等待状态。均可以通过 notify 或 unpark 结束等待状态并恢复到RUNNABLE 可运行状态。\n5. 线程运行完成结束，进入 TERMINATED 状态。\n\n## 线程通信\n### wait\nwait 和 sleep 区别：\n* wait 属于 Object 类，sleep 属于 Thread 类；\n* wait 会释放锁对象，而 sleep 不会；\n* 使用的位置不同，wait 需要在同步块中使用，sleep 可以在任意地方；\n* sleep 需要捕获异常，而 wait 不需要。\n\n### notify\n### notifyAll\n\n## 死锁\n产生条件：\n* 互斥\n* 请求并持有\n* 非剥夺\n* 循环等待\n死锁检测与防止\n竞争条件与临界区\n\n## 机制\n### ThreadLocal\n用来解决线程数据隔离的问题，底层使用ThreadLocalMap保存线程变量。\n\n### Fork/Join\n用于大任务的分割与汇总\n\n### Volatile\n对多线程数据可见性的保证\n \n### Interrupt\n线程的中断机制","source":"_posts/20180630.md","raw":"---\ntitle: 并发与多线程\ncategory: 基础模块\n---\n\n## 线程池\n线程池通过复用线程，避免线程频繁地创建和销毁。\n\n### 线程池任务执行流程\n提交任务的方法\nsubmit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。\nexecute：submit 最终也是通过 execute 执行的。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png)\n1. 向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。\n2. 如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。\n3. 如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。\n4. 如果已经达到了最大线程数，则执行指定的拒绝策略\n\n### 创建线程池\nJava 的 Executors 工具类中提供了 5 种类型的线程池。\n\n* FixedThreadPool\n固定大小线程池，特点是线程数固定，使用无界队列。\n适用于任务数量不均匀的场景、对内存压力不敏感但系统负载比较敏感的场景。\n\n~~~java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n~~~\n\n* CachedThreadPool\nCached 线程池，特点是不限制线程数。\n适用于要求低延迟的短期任务场景。\n\n~~~java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n~~~\n\n* SingleThreadExecutor\n单线程线程池，就是一个线程的固定线程池。\n适用于需要异步执行但需要保证任务顺序的场景。\n\n~~~java\npublic static ScheduledExecutorService newSingleThreadScheduledExecutor() {\n    return new DelegatedScheduledExecutorService\n        (new ScheduledThreadPoolExecutor(1));\n}\n~~~\n\n* ScheduledThreadPool\nScheduled 线程池。\n适用于定期执行任务场景，支持按固定频率定期执行和按固定延时定期执行两种方式。\n\n~~~java\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n    return new ScheduledThreadPoolExecutor(corePoolSize);\n}\n\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue());\n}\n~~~\n\n* WorkStealingPool\n工作窃取线程池，使用的是 ForkJoinPool，是固定并行度的多任务队列。\n适合任务执行时长不均匀的场景。\n\n~~~java\npublic static ExecutorService newWorkStealingPool(int parallelism) {\n     return new ForkJoinPool\n         (parallelism,\n          ForkJoinPool.defaultForkJoinWorkerThreadFactory,\n          null, true);\n }\n~~~\n另外还可以根据业务需要自定义线程池，可使用 ThreadPoolExecutor(JUC工具类) 或 ThreadPoolTaskExecutor(Spring封装类) 。\n\n### 核心参数\n* 核心线程数\n* 最大线程数\n* 线程空闲时间和空闲时间的单位\n当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。\n* 缓存队列\nArrayBlockingQueue: 有界队列，队列有最大容量限制\nLinkedBlockingQueue: 无界队列，队列不限制容量\nSynchronousQueue: 同步队列，内部没有缓冲区。\n* 线程工厂\n用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等，一般使用默认工厂类即可。\n\n~~~java\npublic class VehicleThreadFactory implements ThreadFactory {\n    private final ThreadGroup group;\n    private final AtomicInteger threadNumber = new AtomicInteger(1);\n    private final String prefix;\n    public VehicleThreadFactory(String name) {\n        SecurityManager s = System.getSecurityManager();\n        group = (s != null) ? s.getThreadGroup() :\n                Thread.currentThread().getThreadGroup();\n        prefix = name + \"-thread-\";\n    }\n    @Override\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(group, r,\n                prefix + threadNumber.getAndIncrement(),\n                0);\n        if (t.isDaemon()) {\n            t.setDaemon(false);\n        }\n        if (t.getPriority() != Thread.NORM_PRIORITY) {\n            t.setPriority(Thread.NORM_PRIORITY);\n        }\n        return t;\n    }\n}\n~~~\n* 拒绝策略\nAbort：默认策略，抛出 RejectedExecutionException 。\nDiscard：直接丢弃任务。\nCallerRuns：由提交任务的线程直接执行。\nDiscardOldest: 会丢弃最早提交的任务。\n也可以自定义策略，例如：\n~~~java\n(r, executor) -> {\n    try {\n        executor.getQueue().put(r);\n    } catch (InterruptedException e) {\n        log.warn(\"retry put task error,message:{}\", e);\n    }\n}\n~~~\n\n## 同步与互斥\n\n### synchronized\nsynchronized 应用在方法上时，在字节码中是通过方法的 **ACC_SYNCHRONIZED** 标志来实现的；\nsynchronized 应用在同步块上时，在字节码中是通过 **monitorenter** 和 **monitorexit** 实现的。\n最终都是通过对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，当 Monitor 被某个线程持有后，就会处于锁定状态，此时 Owner 会指向持有 Monitor 对象的线程。Monitor 还有两个队列，用来存放进入及等待获取锁的线程。\nJVM对其进行了大量优化\n* 锁消除\n* 锁粗化\n* 自旋和自适应自旋\n* 锁升级\n无锁->偏向锁->轻量级锁->重量级锁\n### Lock\nAQS是实现Lock基础，AQS 有一个 state 标记位，值为1时表示有线程占用，其他线程需要进入到同步队列等待。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ANLfHAAA3fj0S8po403.png)\n1. 当获得锁的线程需要等待某个条件时，会进入 condition 的等待队列，等待队列可以有多个。\n2. 当 condition 条件满足时，线程会从等待队列重新进入同步队列进行获取锁的竞争\n\n* ReentrantLock\n基于AQS实现，内部有公平锁和非公平锁两种实现，差别就在于新来的线程是否比已经在同步队列中的等待线程更早获得锁。\n* Semaphore\n基于AQS实现，差别在于 ReentrantLock 是独占锁，Semaphore 是共享锁。\n\n### CAS\n乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS。它认为并发操作并不总会发生。\n操作流程如下：其中比较并写回的操作是通过操作系统原语实现的，保证执行过程中不会被中断。\n1. 线程在读取数据时不进行加锁；\n2. 在准备写回数据时，比较原值是否修改；\n3. 若未被其他线程修改则写回；\n4. 若已被修改，则重新执行读取流程。\n\n缺点：容易出现ABA问题，不一定会影响结果，但还是需要防范，可以通过增加额外的标志位或者时间戳解决。JUC 工具包中提供了这样的类。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6AB5XwAAAWMnENBjk562.png)\n1. 线程 T1 读取值 A 之后，发生两次写入。\n2. 先由线程 T2 写回了 B\n3. 又由 T3 写回了 A\n4. 此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。\n\nsynchronized 和 ReentrantLock 的区别：\n相同点：都是可重入、重量级锁。\n不同点：\n1. synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API。\n2. ReentrantLock 比 synchronized 增加了一些高级功能。例如：等待可中断、可实现公平锁、可绑定多个条件。\n使用场景：\n\n## 线程状态转换\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI2Ab8rJAACvTREK08g324.png)\n1. 当创建一个线程时，线程处在 NEW 状态。\n2. 运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态，但线程此时是 READY 状态，就绪状态等待线程调度，在获取 CPU 后才能进入 RUNNING 运行状态。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。\n3. 线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态，当获取到锁后，会从 BLOCKED 状态恢复到 RUNNABLE 可运行状态。\n4. 调用 Object.wait、Thread.join等，进入 TIMED_WAITING 有超时时间的等待状态。调用 Thread.join 或者 Locksupport.park 等，进入 WAITING 无超时的等待状态。均可以通过 notify 或 unpark 结束等待状态并恢复到RUNNABLE 可运行状态。\n5. 线程运行完成结束，进入 TERMINATED 状态。\n\n## 线程通信\n### wait\nwait 和 sleep 区别：\n* wait 属于 Object 类，sleep 属于 Thread 类；\n* wait 会释放锁对象，而 sleep 不会；\n* 使用的位置不同，wait 需要在同步块中使用，sleep 可以在任意地方；\n* sleep 需要捕获异常，而 wait 不需要。\n\n### notify\n### notifyAll\n\n## 死锁\n产生条件：\n* 互斥\n* 请求并持有\n* 非剥夺\n* 循环等待\n死锁检测与防止\n竞争条件与临界区\n\n## 机制\n### ThreadLocal\n用来解决线程数据隔离的问题，底层使用ThreadLocalMap保存线程变量。\n\n### Fork/Join\n用于大任务的分割与汇总\n\n### Volatile\n对多线程数据可见性的保证\n \n### Interrupt\n线程的中断机制","slug":"20180630","published":1,"date":"2021-07-29T12:12:55.019Z","updated":"2021-07-29T12:12:55.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgsv000ani0mga979nd7","content":"<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>线程池通过复用线程，避免线程频繁地创建和销毁。</p>\n<h3 id=\"线程池任务执行流程\"><a href=\"#线程池任务执行流程\" class=\"headerlink\" title=\"线程池任务执行流程\"></a>线程池任务执行流程</h3><p>提交任务的方法<br>submit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。<br>execute：submit 最终也是通过 execute 执行的。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png\" alt=\"img\"></p>\n<ol>\n<li>向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。</li>\n<li>如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。</li>\n<li>如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。</li>\n<li>如果已经达到了最大线程数，则执行指定的拒绝策略</li>\n</ol>\n<h3 id=\"创建线程池\"><a href=\"#创建线程池\" class=\"headerlink\" title=\"创建线程池\"></a>创建线程池</h3><p>Java 的 Executors 工具类中提供了 5 种类型的线程池。</p>\n<ul>\n<li>FixedThreadPool<br>固定大小线程池，特点是线程数固定，使用无界队列。<br>适用于任务数量不均匀的场景、对内存压力不敏感但系统负载比较敏感的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>CachedThreadPool<br>Cached 线程池，特点是不限制线程数。<br>适用于要求低延迟的短期任务场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</div><div class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>SingleThreadExecutor<br>单线程线程池，就是一个线程的固定线程池。<br>适用于需要异步执行但需要保证任务顺序的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newSingleThreadScheduledExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DelegatedScheduledExecutorService</div><div class=\"line\">        (<span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>ScheduledThreadPool<br>Scheduled 线程池。<br>适用于定期执行任务场景，支持按固定频率定期执行和按固定延时定期执行两种方式。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, NANOSECONDS,</div><div class=\"line\">          <span class=\"keyword\">new</span> DelayedWorkQueue());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>WorkStealingPool<br>工作窃取线程池，使用的是 ForkJoinPool，是固定并行度的多任务队列。<br>适合任务执行时长不均匀的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newWorkStealingPool</span><span class=\"params\">(<span class=\"keyword\">int</span> parallelism)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForkJoinPool</div><div class=\"line\">         (parallelism,</div><div class=\"line\">          ForkJoinPool.defaultForkJoinWorkerThreadFactory,</div><div class=\"line\">          <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>另外还可以根据业务需要自定义线程池，可使用 ThreadPoolExecutor(JUC工具类) 或 ThreadPoolTaskExecutor(Spring封装类) 。</p>\n<h3 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h3><ul>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>线程空闲时间和空闲时间的单位<br>当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。</li>\n<li>缓存队列<br>ArrayBlockingQueue: 有界队列，队列有最大容量限制<br>LinkedBlockingQueue: 无界队列，队列不限制容量<br>SynchronousQueue: 同步队列，内部没有缓冲区。</li>\n<li>线程工厂<br>用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等，一般使用默认工厂类即可。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VehicleThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ThreadGroup group;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger threadNumber = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String prefix;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VehicleThreadFactory</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        SecurityManager s = System.getSecurityManager();</div><div class=\"line\">        group = (s != <span class=\"keyword\">null</span>) ? s.getThreadGroup() :</div><div class=\"line\">                Thread.currentThread().getThreadGroup();</div><div class=\"line\">        prefix = name + <span class=\"string\">\"-thread-\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</div><div class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(group, r,</div><div class=\"line\">                prefix + threadNumber.getAndIncrement(),</div><div class=\"line\">                <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (t.isDaemon()) &#123;</div><div class=\"line\">            t.setDaemon(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (t.getPriority() != Thread.NORM_PRIORITY) &#123;</div><div class=\"line\">            t.setPriority(Thread.NORM_PRIORITY);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> t;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>拒绝策略<br>Abort：默认策略，抛出 RejectedExecutionException 。<br>Discard：直接丢弃任务。<br>CallerRuns：由提交任务的线程直接执行。<br>DiscardOldest: 会丢弃最早提交的任务。<br>也可以自定义策略，例如：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(r, executor) -&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        executor.getQueue().put(r);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">        log.warn(<span class=\"string\">\"retry put task error,message:&#123;&#125;\"</span>, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"同步与互斥\"><a href=\"#同步与互斥\" class=\"headerlink\" title=\"同步与互斥\"></a>同步与互斥</h2><h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><p>synchronized 应用在方法上时，在字节码中是通过方法的 <strong>ACC_SYNCHRONIZED</strong> 标志来实现的；<br>synchronized 应用在同步块上时，在字节码中是通过 <strong>monitorenter</strong> 和 <strong>monitorexit</strong> 实现的。<br>最终都是通过对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，当 Monitor 被某个线程持有后，就会处于锁定状态，此时 Owner 会指向持有 Monitor 对象的线程。Monitor 还有两个队列，用来存放进入及等待获取锁的线程。<br>JVM对其进行了大量优化</p>\n<ul>\n<li>锁消除</li>\n<li>锁粗化</li>\n<li>自旋和自适应自旋</li>\n<li>锁升级<br>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3>AQS是实现Lock基础，AQS 有一个 state 标记位，值为1时表示有线程占用，其他线程需要进入到同步队列等待。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ANLfHAAA3fj0S8po403.png\" alt=\"img\"></li>\n</ul>\n<ol>\n<li>当获得锁的线程需要等待某个条件时，会进入 condition 的等待队列，等待队列可以有多个。</li>\n<li>当 condition 条件满足时，线程会从等待队列重新进入同步队列进行获取锁的竞争</li>\n</ol>\n<ul>\n<li>ReentrantLock<br>基于AQS实现，内部有公平锁和非公平锁两种实现，差别就在于新来的线程是否比已经在同步队列中的等待线程更早获得锁。</li>\n<li>Semaphore<br>基于AQS实现，差别在于 ReentrantLock 是独占锁，Semaphore 是共享锁。</li>\n</ul>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><p>乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS。它认为并发操作并不总会发生。<br>操作流程如下：其中比较并写回的操作是通过操作系统原语实现的，保证执行过程中不会被中断。</p>\n<ol>\n<li>线程在读取数据时不进行加锁；</li>\n<li>在准备写回数据时，比较原值是否修改；</li>\n<li>若未被其他线程修改则写回；</li>\n<li>若已被修改，则重新执行读取流程。</li>\n</ol>\n<p>缺点：容易出现ABA问题，不一定会影响结果，但还是需要防范，可以通过增加额外的标志位或者时间戳解决。JUC 工具包中提供了这样的类。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6AB5XwAAAWMnENBjk562.png\" alt=\"img\"></p>\n<ol>\n<li>线程 T1 读取值 A 之后，发生两次写入。</li>\n<li>先由线程 T2 写回了 B</li>\n<li>又由 T3 写回了 A</li>\n<li>此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。</li>\n</ol>\n<p>synchronized 和 ReentrantLock 的区别：<br>相同点：都是可重入、重量级锁。<br>不同点：</p>\n<ol>\n<li>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API。</li>\n<li>ReentrantLock 比 synchronized 增加了一些高级功能。例如：等待可中断、可实现公平锁、可绑定多个条件。<br>使用场景：</li>\n</ol>\n<h2 id=\"线程状态转换\"><a href=\"#线程状态转换\" class=\"headerlink\" title=\"线程状态转换\"></a>线程状态转换</h2><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI2Ab8rJAACvTREK08g324.png\" alt=\"img\"></p>\n<ol>\n<li>当创建一个线程时，线程处在 NEW 状态。</li>\n<li>运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态，但线程此时是 READY 状态，就绪状态等待线程调度，在获取 CPU 后才能进入 RUNNING 运行状态。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。</li>\n<li>线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态，当获取到锁后，会从 BLOCKED 状态恢复到 RUNNABLE 可运行状态。</li>\n<li>调用 Object.wait、Thread.join等，进入 TIMED_WAITING 有超时时间的等待状态。调用 Thread.join 或者 Locksupport.park 等，进入 WAITING 无超时的等待状态。均可以通过 notify 或 unpark 结束等待状态并恢复到RUNNABLE 可运行状态。</li>\n<li>线程运行完成结束，进入 TERMINATED 状态。</li>\n</ol>\n<h2 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h2><h3 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h3><p>wait 和 sleep 区别：</p>\n<ul>\n<li>wait 属于 Object 类，sleep 属于 Thread 类；</li>\n<li>wait 会释放锁对象，而 sleep 不会；</li>\n<li>使用的位置不同，wait 需要在同步块中使用，sleep 可以在任意地方；</li>\n<li>sleep 需要捕获异常，而 wait 不需要。</li>\n</ul>\n<h3 id=\"notify\"><a href=\"#notify\" class=\"headerlink\" title=\"notify\"></a>notify</h3><h3 id=\"notifyAll\"><a href=\"#notifyAll\" class=\"headerlink\" title=\"notifyAll\"></a>notifyAll</h3><h2 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h2><p>产生条件：</p>\n<ul>\n<li>互斥</li>\n<li>请求并持有</li>\n<li>非剥夺</li>\n<li>循环等待<br>死锁检测与防止<br>竞争条件与临界区</li>\n</ul>\n<h2 id=\"机制\"><a href=\"#机制\" class=\"headerlink\" title=\"机制\"></a>机制</h2><h3 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h3><p>用来解决线程数据隔离的问题，底层使用ThreadLocalMap保存线程变量。</p>\n<h3 id=\"Fork-Join\"><a href=\"#Fork-Join\" class=\"headerlink\" title=\"Fork/Join\"></a>Fork/Join</h3><p>用于大任务的分割与汇总</p>\n<h3 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h3><p>对多线程数据可见性的保证</p>\n<h3 id=\"Interrupt\"><a href=\"#Interrupt\" class=\"headerlink\" title=\"Interrupt\"></a>Interrupt</h3><p>线程的中断机制</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>线程池通过复用线程，避免线程频繁地创建和销毁。</p>\n<h3 id=\"线程池任务执行流程\"><a href=\"#线程池任务执行流程\" class=\"headerlink\" title=\"线程池任务执行流程\"></a>线程池任务执行流程</h3><p>提交任务的方法<br>submit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。<br>execute：submit 最终也是通过 execute 执行的。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png\" alt=\"img\"></p>\n<ol>\n<li>向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。</li>\n<li>如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。</li>\n<li>如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。</li>\n<li>如果已经达到了最大线程数，则执行指定的拒绝策略</li>\n</ol>\n<h3 id=\"创建线程池\"><a href=\"#创建线程池\" class=\"headerlink\" title=\"创建线程池\"></a>创建线程池</h3><p>Java 的 Executors 工具类中提供了 5 种类型的线程池。</p>\n<ul>\n<li>FixedThreadPool<br>固定大小线程池，特点是线程数固定，使用无界队列。<br>适用于任务数量不均匀的场景、对内存压力不敏感但系统负载比较敏感的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>CachedThreadPool<br>Cached 线程池，特点是不限制线程数。<br>适用于要求低延迟的短期任务场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</div><div class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>SingleThreadExecutor<br>单线程线程池，就是一个线程的固定线程池。<br>适用于需要异步执行但需要保证任务顺序的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newSingleThreadScheduledExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DelegatedScheduledExecutorService</div><div class=\"line\">        (<span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>ScheduledThreadPool<br>Scheduled 线程池。<br>适用于定期执行任务场景，支持按固定频率定期执行和按固定延时定期执行两种方式。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, NANOSECONDS,</div><div class=\"line\">          <span class=\"keyword\">new</span> DelayedWorkQueue());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>WorkStealingPool<br>工作窃取线程池，使用的是 ForkJoinPool，是固定并行度的多任务队列。<br>适合任务执行时长不均匀的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newWorkStealingPool</span><span class=\"params\">(<span class=\"keyword\">int</span> parallelism)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForkJoinPool</div><div class=\"line\">         (parallelism,</div><div class=\"line\">          ForkJoinPool.defaultForkJoinWorkerThreadFactory,</div><div class=\"line\">          <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>另外还可以根据业务需要自定义线程池，可使用 ThreadPoolExecutor(JUC工具类) 或 ThreadPoolTaskExecutor(Spring封装类) 。</p>\n<h3 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h3><ul>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>线程空闲时间和空闲时间的单位<br>当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。</li>\n<li>缓存队列<br>ArrayBlockingQueue: 有界队列，队列有最大容量限制<br>LinkedBlockingQueue: 无界队列，队列不限制容量<br>SynchronousQueue: 同步队列，内部没有缓冲区。</li>\n<li>线程工厂<br>用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等，一般使用默认工厂类即可。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VehicleThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ThreadGroup group;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger threadNumber = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String prefix;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VehicleThreadFactory</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        SecurityManager s = System.getSecurityManager();</div><div class=\"line\">        group = (s != <span class=\"keyword\">null</span>) ? s.getThreadGroup() :</div><div class=\"line\">                Thread.currentThread().getThreadGroup();</div><div class=\"line\">        prefix = name + <span class=\"string\">\"-thread-\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</div><div class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(group, r,</div><div class=\"line\">                prefix + threadNumber.getAndIncrement(),</div><div class=\"line\">                <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (t.isDaemon()) &#123;</div><div class=\"line\">            t.setDaemon(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (t.getPriority() != Thread.NORM_PRIORITY) &#123;</div><div class=\"line\">            t.setPriority(Thread.NORM_PRIORITY);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> t;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>拒绝策略<br>Abort：默认策略，抛出 RejectedExecutionException 。<br>Discard：直接丢弃任务。<br>CallerRuns：由提交任务的线程直接执行。<br>DiscardOldest: 会丢弃最早提交的任务。<br>也可以自定义策略，例如：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(r, executor) -&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        executor.getQueue().put(r);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">        log.warn(<span class=\"string\">\"retry put task error,message:&#123;&#125;\"</span>, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"同步与互斥\"><a href=\"#同步与互斥\" class=\"headerlink\" title=\"同步与互斥\"></a>同步与互斥</h2><h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><p>synchronized 应用在方法上时，在字节码中是通过方法的 <strong>ACC_SYNCHRONIZED</strong> 标志来实现的；<br>synchronized 应用在同步块上时，在字节码中是通过 <strong>monitorenter</strong> 和 <strong>monitorexit</strong> 实现的。<br>最终都是通过对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，当 Monitor 被某个线程持有后，就会处于锁定状态，此时 Owner 会指向持有 Monitor 对象的线程。Monitor 还有两个队列，用来存放进入及等待获取锁的线程。<br>JVM对其进行了大量优化</p>\n<ul>\n<li>锁消除</li>\n<li>锁粗化</li>\n<li>自旋和自适应自旋</li>\n<li>锁升级<br>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3>AQS是实现Lock基础，AQS 有一个 state 标记位，值为1时表示有线程占用，其他线程需要进入到同步队列等待。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ANLfHAAA3fj0S8po403.png\" alt=\"img\"></li>\n</ul>\n<ol>\n<li>当获得锁的线程需要等待某个条件时，会进入 condition 的等待队列，等待队列可以有多个。</li>\n<li>当 condition 条件满足时，线程会从等待队列重新进入同步队列进行获取锁的竞争</li>\n</ol>\n<ul>\n<li>ReentrantLock<br>基于AQS实现，内部有公平锁和非公平锁两种实现，差别就在于新来的线程是否比已经在同步队列中的等待线程更早获得锁。</li>\n<li>Semaphore<br>基于AQS实现，差别在于 ReentrantLock 是独占锁，Semaphore 是共享锁。</li>\n</ul>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><p>乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS。它认为并发操作并不总会发生。<br>操作流程如下：其中比较并写回的操作是通过操作系统原语实现的，保证执行过程中不会被中断。</p>\n<ol>\n<li>线程在读取数据时不进行加锁；</li>\n<li>在准备写回数据时，比较原值是否修改；</li>\n<li>若未被其他线程修改则写回；</li>\n<li>若已被修改，则重新执行读取流程。</li>\n</ol>\n<p>缺点：容易出现ABA问题，不一定会影响结果，但还是需要防范，可以通过增加额外的标志位或者时间戳解决。JUC 工具包中提供了这样的类。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6AB5XwAAAWMnENBjk562.png\" alt=\"img\"></p>\n<ol>\n<li>线程 T1 读取值 A 之后，发生两次写入。</li>\n<li>先由线程 T2 写回了 B</li>\n<li>又由 T3 写回了 A</li>\n<li>此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。</li>\n</ol>\n<p>synchronized 和 ReentrantLock 的区别：<br>相同点：都是可重入、重量级锁。<br>不同点：</p>\n<ol>\n<li>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API。</li>\n<li>ReentrantLock 比 synchronized 增加了一些高级功能。例如：等待可中断、可实现公平锁、可绑定多个条件。<br>使用场景：</li>\n</ol>\n<h2 id=\"线程状态转换\"><a href=\"#线程状态转换\" class=\"headerlink\" title=\"线程状态转换\"></a>线程状态转换</h2><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI2Ab8rJAACvTREK08g324.png\" alt=\"img\"></p>\n<ol>\n<li>当创建一个线程时，线程处在 NEW 状态。</li>\n<li>运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态，但线程此时是 READY 状态，就绪状态等待线程调度，在获取 CPU 后才能进入 RUNNING 运行状态。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。</li>\n<li>线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态，当获取到锁后，会从 BLOCKED 状态恢复到 RUNNABLE 可运行状态。</li>\n<li>调用 Object.wait、Thread.join等，进入 TIMED_WAITING 有超时时间的等待状态。调用 Thread.join 或者 Locksupport.park 等，进入 WAITING 无超时的等待状态。均可以通过 notify 或 unpark 结束等待状态并恢复到RUNNABLE 可运行状态。</li>\n<li>线程运行完成结束，进入 TERMINATED 状态。</li>\n</ol>\n<h2 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h2><h3 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h3><p>wait 和 sleep 区别：</p>\n<ul>\n<li>wait 属于 Object 类，sleep 属于 Thread 类；</li>\n<li>wait 会释放锁对象，而 sleep 不会；</li>\n<li>使用的位置不同，wait 需要在同步块中使用，sleep 可以在任意地方；</li>\n<li>sleep 需要捕获异常，而 wait 不需要。</li>\n</ul>\n<h3 id=\"notify\"><a href=\"#notify\" class=\"headerlink\" title=\"notify\"></a>notify</h3><h3 id=\"notifyAll\"><a href=\"#notifyAll\" class=\"headerlink\" title=\"notifyAll\"></a>notifyAll</h3><h2 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h2><p>产生条件：</p>\n<ul>\n<li>互斥</li>\n<li>请求并持有</li>\n<li>非剥夺</li>\n<li>循环等待<br>死锁检测与防止<br>竞争条件与临界区</li>\n</ul>\n<h2 id=\"机制\"><a href=\"#机制\" class=\"headerlink\" title=\"机制\"></a>机制</h2><h3 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h3><p>用来解决线程数据隔离的问题，底层使用ThreadLocalMap保存线程变量。</p>\n<h3 id=\"Fork-Join\"><a href=\"#Fork-Join\" class=\"headerlink\" title=\"Fork/Join\"></a>Fork/Join</h3><p>用于大任务的分割与汇总</p>\n<h3 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h3><p>对多线程数据可见性的保证</p>\n<h3 id=\"Interrupt\"><a href=\"#Interrupt\" class=\"headerlink\" title=\"Interrupt\"></a>Interrupt</h3><p>线程的中断机制</p>\n"},{"title":"数据结构与算法","_content":"\n## 数据结构\n\n### 二叉搜索树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6AIEwmAAAW0UV9vPM694.png)\n\n- 每个节点包含一个值。\n- 每个节点至多有两个子树。\n- 每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。\n\n二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。\n\n### 平衡二叉树\n\n平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，比较适合插入、删除比较少的场景。\n\n### 红黑树\n\n红黑树是一种更加实用的非严格的平衡二叉树，更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AeAxdAAAmJsTBAww115.png)\n\n- 每个节点不是红色就是黑色。\n- 根节点是黑色。\n- 每个叶子节点都是黑色的空节点，如图中的黑色三角。\n- 红色节点的两个子节点都是黑色的。\n- 任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。    \n\n### B树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6APZerAAAkJXd9qEE912.png)\n\nB 树是一种多叉树，也叫多路搜索树，\n\n- B 树中每个节点可以存储多个元素。\n- 关键字分布在整颗树中，一个关键字只出现在一个节点中。\n- 搜索可能在非叶节点停止。\n- 非常适合用在文件索引上，可以有效减少磁盘 IO 次数。\n\nB 树中所有结点的最大子节点数称为 B 树的阶，如上图所示是一棵 3 阶 B 树，也叫 2-3 树。\n\n一个 m 阶 B 树有如下特点：\n\n1. 非叶节点最多有 m 棵子树。\n2. 根节点最少有两个子树，非根、非叶节点最少有 m/2 棵子树。\n3. 非叶子结点中保存的关键字个数，等于该节点子树个数−1。\n4. 非叶子节点中的关键字大小有序。\n5. 节点中每个关键字的左子树中的关键字都小于该关键字，右子树中的关键字都大于该关键字。\n6. 所有叶节点都在同一层。\n7. B 树在查找时，从根结点开始，对结点内的有序的关键字序列进行二分查找，如果找到就结束，没有找到就进入查询关键字所属范围的子树进行查找，直到叶节点。\n\n\n\n\n\n\n\n### B+树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AUR7GAAAe0Dk9-gg936.png)\n\n1. 节点中的关键字与子树数目相同。\n2. 关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身。\n3. 所有关键字都出现在叶子节点中。\n4. 所有叶子节点都有指向下一个叶子节点的指针。\n5. 在搜索时不会在非叶子节点命中，一定会查询到叶子节点。\n6. 叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据。\n\nB+ 树更适合索引系统的原因\n\n1. 由于叶节点之间有指针相连，B+ 树更适合范围检索；\n2. 由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；\n3. B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。\n\n### B*树\n\n## 算法\n\n## 复杂度\n\n## 排序\n\n## 查找\n\n## 字符串匹配\n\n## 常用算法思路\n\n","source":"_posts/20180720.md","raw":"---\ntitle: 数据结构与算法\ncategory: 基础模块\n---\n\n## 数据结构\n\n### 二叉搜索树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6AIEwmAAAW0UV9vPM694.png)\n\n- 每个节点包含一个值。\n- 每个节点至多有两个子树。\n- 每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。\n\n二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。\n\n### 平衡二叉树\n\n平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，比较适合插入、删除比较少的场景。\n\n### 红黑树\n\n红黑树是一种更加实用的非严格的平衡二叉树，更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AeAxdAAAmJsTBAww115.png)\n\n- 每个节点不是红色就是黑色。\n- 根节点是黑色。\n- 每个叶子节点都是黑色的空节点，如图中的黑色三角。\n- 红色节点的两个子节点都是黑色的。\n- 任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。    \n\n### B树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6APZerAAAkJXd9qEE912.png)\n\nB 树是一种多叉树，也叫多路搜索树，\n\n- B 树中每个节点可以存储多个元素。\n- 关键字分布在整颗树中，一个关键字只出现在一个节点中。\n- 搜索可能在非叶节点停止。\n- 非常适合用在文件索引上，可以有效减少磁盘 IO 次数。\n\nB 树中所有结点的最大子节点数称为 B 树的阶，如上图所示是一棵 3 阶 B 树，也叫 2-3 树。\n\n一个 m 阶 B 树有如下特点：\n\n1. 非叶节点最多有 m 棵子树。\n2. 根节点最少有两个子树，非根、非叶节点最少有 m/2 棵子树。\n3. 非叶子结点中保存的关键字个数，等于该节点子树个数−1。\n4. 非叶子节点中的关键字大小有序。\n5. 节点中每个关键字的左子树中的关键字都小于该关键字，右子树中的关键字都大于该关键字。\n6. 所有叶节点都在同一层。\n7. B 树在查找时，从根结点开始，对结点内的有序的关键字序列进行二分查找，如果找到就结束，没有找到就进入查询关键字所属范围的子树进行查找，直到叶节点。\n\n\n\n\n\n\n\n### B+树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AUR7GAAAe0Dk9-gg936.png)\n\n1. 节点中的关键字与子树数目相同。\n2. 关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身。\n3. 所有关键字都出现在叶子节点中。\n4. 所有叶子节点都有指向下一个叶子节点的指针。\n5. 在搜索时不会在非叶子节点命中，一定会查询到叶子节点。\n6. 叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据。\n\nB+ 树更适合索引系统的原因\n\n1. 由于叶节点之间有指针相连，B+ 树更适合范围检索；\n2. 由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；\n3. B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。\n\n### B*树\n\n## 算法\n\n## 复杂度\n\n## 排序\n\n## 查找\n\n## 字符串匹配\n\n## 常用算法思路\n\n","slug":"20180720","published":1,"date":"2021-07-28T12:08:06.941Z","updated":"2021-07-30T14:04:07.707Z","_id":"ckrpxlgsw000cni0mregk789d","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6AIEwmAAAW0UV9vPM694.png\" alt=\"img\"></p>\n<ul>\n<li>每个节点包含一个值。</li>\n<li>每个节点至多有两个子树。</li>\n<li>每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。</li>\n</ul>\n<p>二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。</p>\n<h3 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h3><p>平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，比较适合插入、删除比较少的场景。</p>\n<h3 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h3><p>红黑树是一种更加实用的非严格的平衡二叉树，更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。</p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AeAxdAAAmJsTBAww115.png\" alt=\"img\"></p>\n<ul>\n<li>每个节点不是红色就是黑色。</li>\n<li>根节点是黑色。</li>\n<li>每个叶子节点都是黑色的空节点，如图中的黑色三角。</li>\n<li>红色节点的两个子节点都是黑色的。</li>\n<li>任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。    </li>\n</ul>\n<h3 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6APZerAAAkJXd9qEE912.png\" alt=\"img\"></p>\n<p>B 树是一种多叉树，也叫多路搜索树，</p>\n<ul>\n<li>B 树中每个节点可以存储多个元素。</li>\n<li>关键字分布在整颗树中，一个关键字只出现在一个节点中。</li>\n<li>搜索可能在非叶节点停止。</li>\n<li>非常适合用在文件索引上，可以有效减少磁盘 IO 次数。</li>\n</ul>\n<p>B 树中所有结点的最大子节点数称为 B 树的阶，如上图所示是一棵 3 阶 B 树，也叫 2-3 树。</p>\n<p>一个 m 阶 B 树有如下特点：</p>\n<ol>\n<li>非叶节点最多有 m 棵子树。</li>\n<li>根节点最少有两个子树，非根、非叶节点最少有 m/2 棵子树。</li>\n<li>非叶子结点中保存的关键字个数，等于该节点子树个数−1。</li>\n<li>非叶子节点中的关键字大小有序。</li>\n<li>节点中每个关键字的左子树中的关键字都小于该关键字，右子树中的关键字都大于该关键字。</li>\n<li>所有叶节点都在同一层。</li>\n<li>B 树在查找时，从根结点开始，对结点内的有序的关键字序列进行二分查找，如果找到就结束，没有找到就进入查询关键字所属范围的子树进行查找，直到叶节点。</li>\n</ol>\n<h3 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AUR7GAAAe0Dk9-gg936.png\" alt=\"img\"></p>\n<ol>\n<li>节点中的关键字与子树数目相同。</li>\n<li>关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身。</li>\n<li>所有关键字都出现在叶子节点中。</li>\n<li>所有叶子节点都有指向下一个叶子节点的指针。</li>\n<li>在搜索时不会在非叶子节点命中，一定会查询到叶子节点。</li>\n<li>叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据。</li>\n</ol>\n<p>B+ 树更适合索引系统的原因</p>\n<ol>\n<li>由于叶节点之间有指针相连，B+ 树更适合范围检索；</li>\n<li>由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；</li>\n<li>B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。</li>\n</ol>\n<h3 id=\"B-树-1\"><a href=\"#B-树-1\" class=\"headerlink\" title=\"B*树\"></a>B*树</h3><h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h2 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h2><h2 id=\"常用算法思路\"><a href=\"#常用算法思路\" class=\"headerlink\" title=\"常用算法思路\"></a>常用算法思路</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6AIEwmAAAW0UV9vPM694.png\" alt=\"img\"></p>\n<ul>\n<li>每个节点包含一个值。</li>\n<li>每个节点至多有两个子树。</li>\n<li>每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。</li>\n</ul>\n<p>二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。</p>\n<h3 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h3><p>平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，比较适合插入、删除比较少的场景。</p>\n<h3 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h3><p>红黑树是一种更加实用的非严格的平衡二叉树，更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。</p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AeAxdAAAmJsTBAww115.png\" alt=\"img\"></p>\n<ul>\n<li>每个节点不是红色就是黑色。</li>\n<li>根节点是黑色。</li>\n<li>每个叶子节点都是黑色的空节点，如图中的黑色三角。</li>\n<li>红色节点的两个子节点都是黑色的。</li>\n<li>任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。    </li>\n</ul>\n<h3 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6APZerAAAkJXd9qEE912.png\" alt=\"img\"></p>\n<p>B 树是一种多叉树，也叫多路搜索树，</p>\n<ul>\n<li>B 树中每个节点可以存储多个元素。</li>\n<li>关键字分布在整颗树中，一个关键字只出现在一个节点中。</li>\n<li>搜索可能在非叶节点停止。</li>\n<li>非常适合用在文件索引上，可以有效减少磁盘 IO 次数。</li>\n</ul>\n<p>B 树中所有结点的最大子节点数称为 B 树的阶，如上图所示是一棵 3 阶 B 树，也叫 2-3 树。</p>\n<p>一个 m 阶 B 树有如下特点：</p>\n<ol>\n<li>非叶节点最多有 m 棵子树。</li>\n<li>根节点最少有两个子树，非根、非叶节点最少有 m/2 棵子树。</li>\n<li>非叶子结点中保存的关键字个数，等于该节点子树个数−1。</li>\n<li>非叶子节点中的关键字大小有序。</li>\n<li>节点中每个关键字的左子树中的关键字都小于该关键字，右子树中的关键字都大于该关键字。</li>\n<li>所有叶节点都在同一层。</li>\n<li>B 树在查找时，从根结点开始，对结点内的有序的关键字序列进行二分查找，如果找到就结束，没有找到就进入查询关键字所属范围的子树进行查找，直到叶节点。</li>\n</ol>\n<h3 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AUR7GAAAe0Dk9-gg936.png\" alt=\"img\"></p>\n<ol>\n<li>节点中的关键字与子树数目相同。</li>\n<li>关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身。</li>\n<li>所有关键字都出现在叶子节点中。</li>\n<li>所有叶子节点都有指向下一个叶子节点的指针。</li>\n<li>在搜索时不会在非叶子节点命中，一定会查询到叶子节点。</li>\n<li>叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据。</li>\n</ol>\n<p>B+ 树更适合索引系统的原因</p>\n<ol>\n<li>由于叶节点之间有指针相连，B+ 树更适合范围检索；</li>\n<li>由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；</li>\n<li>B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。</li>\n</ol>\n<h3 id=\"B-树-1\"><a href=\"#B-树-1\" class=\"headerlink\" title=\"B*树\"></a>B*树</h3><h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h2 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h2><h2 id=\"常用算法思路\"><a href=\"#常用算法思路\" class=\"headerlink\" title=\"常用算法思路\"></a>常用算法思路</h2>"},{"title":"常用工具集","_content":"\n## 团队协作\n* Git\n### MAC SSH Key\n1. 生成：ssh-keygen -t rsa -C \"wangqiu8077@163.com\"\n2. 复制：pbcopy < ~/.ssh/id_rsa.pub\n3. 验证：ssh -T git@github.com\n   ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDnEhi5PeHYuK9hENM2Izh5n69vtjkt91JQBVc15WbFAOupJc4hBm8uH9ZOJN+QLzrltJBqIicSQulTM+hb3AcDTDru4TuK4ecGumw0pu23SNNoFw7lpZKzOS5Z0siNb9kN+LFUsUCyZLyvXbB1L376fooiBYgiTHQoXu3FfimTyTDPKIq6woSrgopDRyAMPSQDXFvLLFfLWxu0Y4haJ7oULz88IoBxDGNh5p5Un+oMaKQs1PlYY+Ziz9nq5NrLT0eBwX2PngR0fIRhuZCZa1I5EI5HTOEQu8/FniMvnfuBKWN6V3prDofQoCDjsdOPaUr37xM4zas+S2AV+TSYXh5 wangqiu8077@163.com\n\n\n* SVN\n\n## 质量保证\n\n## 压测\n* JMeter\n\n## 容器与代理\n\n## 文档管理\n* confluence\n\n## 网络","source":"_posts/20180725.md","raw":"---\ntitle: 常用工具集\ncategory: 应用模块\n---\n\n## 团队协作\n* Git\n### MAC SSH Key\n1. 生成：ssh-keygen -t rsa -C \"wangqiu8077@163.com\"\n2. 复制：pbcopy < ~/.ssh/id_rsa.pub\n3. 验证：ssh -T git@github.com\n   ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDnEhi5PeHYuK9hENM2Izh5n69vtjkt91JQBVc15WbFAOupJc4hBm8uH9ZOJN+QLzrltJBqIicSQulTM+hb3AcDTDru4TuK4ecGumw0pu23SNNoFw7lpZKzOS5Z0siNb9kN+LFUsUCyZLyvXbB1L376fooiBYgiTHQoXu3FfimTyTDPKIq6woSrgopDRyAMPSQDXFvLLFfLWxu0Y4haJ7oULz88IoBxDGNh5p5Un+oMaKQs1PlYY+Ziz9nq5NrLT0eBwX2PngR0fIRhuZCZa1I5EI5HTOEQu8/FniMvnfuBKWN6V3prDofQoCDjsdOPaUr37xM4zas+S2AV+TSYXh5 wangqiu8077@163.com\n\n\n* SVN\n\n## 质量保证\n\n## 压测\n* JMeter\n\n## 容器与代理\n\n## 文档管理\n* confluence\n\n## 网络","slug":"20180725","published":1,"date":"2021-07-29T12:12:55.019Z","updated":"2021-07-30T05:38:26.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgsy000eni0m1puy1oky","content":"<h2 id=\"团队协作\"><a href=\"#团队协作\" class=\"headerlink\" title=\"团队协作\"></a>团队协作</h2><ul>\n<li>Git<h3 id=\"MAC-SSH-Key\"><a href=\"#MAC-SSH-Key\" class=\"headerlink\" title=\"MAC SSH Key\"></a>MAC SSH Key</h3></li>\n</ul>\n<ol>\n<li>生成：ssh-keygen -t rsa -C “wangqiu8077@163.com”</li>\n<li>复制：pbcopy &lt; ~/.ssh/id_rsa.pub</li>\n<li>验证：ssh -T git@github.com<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDnEhi5PeHYuK9hENM2Izh5n69vtjkt91JQBVc15WbFAOupJc4hBm8uH9ZOJN+QLzrltJBqIicSQulTM+hb3AcDTDru4TuK4ecGumw0pu23SNNoFw7lpZKzOS5Z0siNb9kN+LFUsUCyZLyvXbB1L376fooiBYgiTHQoXu3FfimTyTDPKIq6woSrgopDRyAMPSQDXFvLLFfLWxu0Y4haJ7oULz88IoBxDGNh5p5Un+oMaKQs1PlYY+Ziz9nq5NrLT0eBwX2PngR0fIRhuZCZa1I5EI5HTOEQu8/FniMvnfuBKWN6V3prDofQoCDjsdOPaUr37xM4zas+S2AV+TSYXh5 wangqiu8077@163.com</li>\n</ol>\n<ul>\n<li>SVN</li>\n</ul>\n<h2 id=\"质量保证\"><a href=\"#质量保证\" class=\"headerlink\" title=\"质量保证\"></a>质量保证</h2><h2 id=\"压测\"><a href=\"#压测\" class=\"headerlink\" title=\"压测\"></a>压测</h2><ul>\n<li>JMeter</li>\n</ul>\n<h2 id=\"容器与代理\"><a href=\"#容器与代理\" class=\"headerlink\" title=\"容器与代理\"></a>容器与代理</h2><h2 id=\"文档管理\"><a href=\"#文档管理\" class=\"headerlink\" title=\"文档管理\"></a>文档管理</h2><ul>\n<li>confluence</li>\n</ul>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"团队协作\"><a href=\"#团队协作\" class=\"headerlink\" title=\"团队协作\"></a>团队协作</h2><ul>\n<li>Git<h3 id=\"MAC-SSH-Key\"><a href=\"#MAC-SSH-Key\" class=\"headerlink\" title=\"MAC SSH Key\"></a>MAC SSH Key</h3></li>\n</ul>\n<ol>\n<li>生成：ssh-keygen -t rsa -C “wangqiu8077@163.com”</li>\n<li>复制：pbcopy &lt; ~/.ssh/id_rsa.pub</li>\n<li>验证：ssh -T git@github.com<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDnEhi5PeHYuK9hENM2Izh5n69vtjkt91JQBVc15WbFAOupJc4hBm8uH9ZOJN+QLzrltJBqIicSQulTM+hb3AcDTDru4TuK4ecGumw0pu23SNNoFw7lpZKzOS5Z0siNb9kN+LFUsUCyZLyvXbB1L376fooiBYgiTHQoXu3FfimTyTDPKIq6woSrgopDRyAMPSQDXFvLLFfLWxu0Y4haJ7oULz88IoBxDGNh5p5Un+oMaKQs1PlYY+Ziz9nq5NrLT0eBwX2PngR0fIRhuZCZa1I5EI5HTOEQu8/FniMvnfuBKWN6V3prDofQoCDjsdOPaUr37xM4zas+S2AV+TSYXh5 wangqiu8077@163.com</li>\n</ol>\n<ul>\n<li>SVN</li>\n</ul>\n<h2 id=\"质量保证\"><a href=\"#质量保证\" class=\"headerlink\" title=\"质量保证\"></a>质量保证</h2><h2 id=\"压测\"><a href=\"#压测\" class=\"headerlink\" title=\"压测\"></a>压测</h2><ul>\n<li>JMeter</li>\n</ul>\n<h2 id=\"容器与代理\"><a href=\"#容器与代理\" class=\"headerlink\" title=\"容器与代理\"></a>容器与代理</h2><h2 id=\"文档管理\"><a href=\"#文档管理\" class=\"headerlink\" title=\"文档管理\"></a>文档管理</h2><ul>\n<li>confluence</li>\n</ul>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2>"},{"title":"Spring","_content":"\n## Spring Framework\n\n### Bean生命周期\n\n```java\n// AbstractAutowireCapableBeanFactory\nprotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)\n    throws BeanCreationException {\n  // 1. 实例化\n  BeanWrapper instanceWrapper = null;\n  if (instanceWrapper == null) {\n      instanceWrapper = createBeanInstance(beanName, mbd, args);\n  }\n\n  Object exposedObject = bean;\n  try {\n      // 2. 属性赋值\n      populateBean(beanName, mbd, instanceWrapper);\n      // 3. 初始化\n      exposedObject = initializeBean(beanName, exposedObject, mbd);\n  }\n\n  // 4. 销毁-注册回调接口\n  try {\n      registerDisposableBeanIfNecessary(beanName, bean, mbd);\n  }\n\n  return exposedObject;\n}\n```\n创建 Bean 的时候默认是按照自然排序来进行创建的，其过程主要分为4 个阶段\n\n1. 实例化（Instantiation），调用构造方法创建一个对象。\n2. 属性注入（Populate），通过反射为这个对象填充属性。\n3. 初始化（Initialization），进行初始化，并实现 Spring AOP 代理。\n   1. 检查 Aware 的相关接口（BeanNameAware、BeanFactoryAware、ApplicationContextAware）并设置相关依赖。\n   2. BeanPostProcessor 前置处理。\n   3. 若实现了 InitializingBean 接口，执行 afterPropertiesSet 方法；\n   4. 执行自定义的 init 方法；\n   5. BeanPostProcessor 后置处理。\n   6. 注册 Destruction 相关回调接口。\n4. 销毁（Destruction），若实现 DisposableBean 接口，执行 destroy 方法，然后执行自定义的 destroy 方法。\n\n### 循环依赖\n\n```java\n// 初始化后的 Bean\nprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);\n\n// 完成实例化后的，但是还未进行属性注入及初始化的对象\nprivate final Map<String, Object> earlySingletonObjects = new HashMap<String, Object>(16);\n\n// 提前暴露的一个单例工厂，二级缓存中存储的就是从这个工厂中获取到的对象\nprivate final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>(16);\n```\n\n```java\n// DefaultSingletonBeanRegistry.getSingleton\nprotected Object getSingleton(String beanName, boolean allowEarlyReference) {\n  // 首先从一级缓存 singletonObjects 中获取。\n  Object singletonObject = this.singletonObjects.get(beanName);\n  if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n    // 走到这说明出现循环依赖了\n    synchronized (this.singletonObjects) {\n      // 如果获取不到，并且对象正在创建中，就从二级缓存 earlySingletonObjects 中获取。\n      singletonObject = this.earlySingletonObjects.get(beanName);\n      if (singletonObject == null && allowEarlyReference) {\n        // 如果还是获取不到且允许通过 singletonFactories 获取，就从三级缓存 singletonFactory 获取\n        ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n        if (singletonFactory != null) {\n          singletonObject = singletonFactory.getObject();\n          this.earlySingletonObjects.put(beanName, singletonObject);\n          this.singletonFactories.remove(beanName);\n        }\n      }\n    }\n  }\n  return singletonObject;\n}\n```\n\n循环依赖解决的核心是通过 **提前曝光** 机制，使用 三级缓存 。\n\n二级缓存其实就可以解决循环依赖，但是为了完成 **Spring AOP 中的后置处理** Spring使用了三级缓存。\n\n参考文章：[Spring 循环依赖的“常见”面试问题](https://blog.csdn.net/BigBug_500/article/details/109050337)\n\n### 事务\n\n使用注解：@Transactional\n\n1. 注解只有作用到 public 方法上事务才生效，不推荐在接口上使用；\n2. 避免同一个类中调用注解的方法，这样会导致事务失效；\n\n#### 传播类型\n\n- REQUIRED：如果当前存在事务，就加入该事务；**如果当前不存在事务，就创建一个新事务**。默认类型。\n- SUPPORTS：如果当前存在事务，就加入该事务；**如果当前不存在事务，就以非事务执行**。\n- MANDATORY：如果当前存在事务，就加入该事务；**如果当前不存在事务，就抛出异常**。\n- REQUIRES_NEW：无论当前存不存在事务，都**创建一个新事务**。\n- NOT_SUPPORTED：以非事务执行，**如果当前存在事务，就把当前事务挂起**。\n- NEVER：以非事务执行，**如果当前存在事务，则抛出异常**。\n- NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 REQUIRED 类似的操作。\n\n### Context初始化流程\n\n~~~java\npublic void refresh() throws BeansException, IllegalStateException {\n    synchronized (this.startupShutdownMonitor) {\n        // 1. 刷新前的预处理，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符等。\n        prepareRefresh();\n        // 2. 获取 beanFactory，即前面创建的【DefaultListableBeanFactory】\n        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n        // 3. 预处理 beanFactory，向容器中添加一些组件\n        prepareBeanFactory(beanFactory);\n        try {\n            postProcessBeanFactory(beanFactory);\n            // 初始化Bean\n            invokeBeanFactoryPostProcessors(beanFactory);\n            // 后置处理\n            registerBeanPostProcessors(beanFactory);\n            // 7. 初始化 MessageSource 组件（做国际化功能；消息绑定，消息解析）\n            initMessageSource();\n            // 8. 初始化事件派发器，在注册监听器时会用到\n            initApplicationEventMulticaster();\n            // 9. 留给子容器（子类），子类重写这个方法，在容器刷新的时候可以自定义逻辑，web 场景下会使用\n            onRefresh();\n            // 10. 注册监听器，派发之前步骤产生的一些事件（可能没有）\n            registerListeners();\n            // 11. 初始化所有的非单实例 bean\n            finishBeanFactoryInitialization(beanFactory);\n            // 12. 发布容器刷新完成事件\n            finishRefresh();\n        }\n    }\n}\n~~~\n\n## Spring Boot\n\n目标是简化 Spring 应用和服务的创建、开发与部署。\n\n- 简化了配置文件。\n- 使用嵌入式 Web 服务器。\n- 含有诸多开箱即用的微服务功能，\n- 可以和 Spring Cloud 联合部署。\n\nSpring Boot 的核心思想是约定大于配置，应用只需要很少的配置即可，简化了应用开发模式。\n\n### 自动装配\n\nSpring Boot 通过`@EnableAutoConfiguration`开启自动装配，通过 SpringFactoriesLoader 最终加载`META-INF/spring.factories`中的自动配置类实现自动装配，自动配置类其实就是通过`@Conditional`按需加载的配置类，想要其生效必须引入`spring-boot-starter-xxx`包实现起步依赖。\n\n参考文章：[[淘宝一面：“说一下 Spring Boot 自动装配原理呗？”](https://www.cnblogs.com/javaguide/p/springboot-auto-config.html)](https://www.cnblogs.com/javaguide/p/springboot-auto-config.html)\n\n### 启动流程\n~~~java\npublic ConfigurableApplicationContext run(String... args) {\n    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConfigurableApplicationContext context = null;\n    Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n    configureHeadlessProperty();\n    SpringApplicationRunListeners listeners = getRunListeners(args);\n    listeners.starting();\n    try {\n        ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n                args);\n        ConfigurableEnvironment environment = prepareEnvironment(listeners,\n                applicationArguments);\n        configureIgnoreBeanInfo(environment);\n        Banner printedBanner = printBanner(environment);\n        context = createApplicationContext();\n        exceptionReporters = getSpringFactoriesInstances(\n                SpringBootExceptionReporter.class,\n                new Class[] { ConfigurableApplicationContext.class }, context);\n        prepareContext(context, environment, listeners, applicationArguments,\n                printedBanner);\n        refreshContext(context);\n        afterRefresh(context, applicationArguments);\n        stopWatch.stop();\n    }\n    return context;\n}\n~~~\n1. 配置Environment。\n2. 准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。\n3. 执行 refreshContext。\n\n## Spring Cloud\n\nSpring Cloud 是一套完整的微服务解决方案，是一系列不同功能的微服务框架的集合。基于 Spring Boot，简化了分布式系统的开发。集成了服务发现、配置管理、消息总线、负载均衡、断路器、数据监控等各种服务治理能力。\n\nsleuth：提供了全链路追踪能力\n\nNetflix套件：提供了hystrix熔断器，zuul网关等众多的治理组件\n\nconfig 组件提供了动态配置能力\n\nbus组件：支持使用 RabbitMQ、Kafka、ActiveMQ 等消息队列，实现分布式服务之间的事件通信\n\n## Spring Data\n\n## Spring Security","source":"_posts/20180727.md","raw":"---\ntitle: Spring\ncategory: 应用模块\ntag: 框架\n---\n\n## Spring Framework\n\n### Bean生命周期\n\n```java\n// AbstractAutowireCapableBeanFactory\nprotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)\n    throws BeanCreationException {\n  // 1. 实例化\n  BeanWrapper instanceWrapper = null;\n  if (instanceWrapper == null) {\n      instanceWrapper = createBeanInstance(beanName, mbd, args);\n  }\n\n  Object exposedObject = bean;\n  try {\n      // 2. 属性赋值\n      populateBean(beanName, mbd, instanceWrapper);\n      // 3. 初始化\n      exposedObject = initializeBean(beanName, exposedObject, mbd);\n  }\n\n  // 4. 销毁-注册回调接口\n  try {\n      registerDisposableBeanIfNecessary(beanName, bean, mbd);\n  }\n\n  return exposedObject;\n}\n```\n创建 Bean 的时候默认是按照自然排序来进行创建的，其过程主要分为4 个阶段\n\n1. 实例化（Instantiation），调用构造方法创建一个对象。\n2. 属性注入（Populate），通过反射为这个对象填充属性。\n3. 初始化（Initialization），进行初始化，并实现 Spring AOP 代理。\n   1. 检查 Aware 的相关接口（BeanNameAware、BeanFactoryAware、ApplicationContextAware）并设置相关依赖。\n   2. BeanPostProcessor 前置处理。\n   3. 若实现了 InitializingBean 接口，执行 afterPropertiesSet 方法；\n   4. 执行自定义的 init 方法；\n   5. BeanPostProcessor 后置处理。\n   6. 注册 Destruction 相关回调接口。\n4. 销毁（Destruction），若实现 DisposableBean 接口，执行 destroy 方法，然后执行自定义的 destroy 方法。\n\n### 循环依赖\n\n```java\n// 初始化后的 Bean\nprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);\n\n// 完成实例化后的，但是还未进行属性注入及初始化的对象\nprivate final Map<String, Object> earlySingletonObjects = new HashMap<String, Object>(16);\n\n// 提前暴露的一个单例工厂，二级缓存中存储的就是从这个工厂中获取到的对象\nprivate final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>(16);\n```\n\n```java\n// DefaultSingletonBeanRegistry.getSingleton\nprotected Object getSingleton(String beanName, boolean allowEarlyReference) {\n  // 首先从一级缓存 singletonObjects 中获取。\n  Object singletonObject = this.singletonObjects.get(beanName);\n  if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n    // 走到这说明出现循环依赖了\n    synchronized (this.singletonObjects) {\n      // 如果获取不到，并且对象正在创建中，就从二级缓存 earlySingletonObjects 中获取。\n      singletonObject = this.earlySingletonObjects.get(beanName);\n      if (singletonObject == null && allowEarlyReference) {\n        // 如果还是获取不到且允许通过 singletonFactories 获取，就从三级缓存 singletonFactory 获取\n        ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n        if (singletonFactory != null) {\n          singletonObject = singletonFactory.getObject();\n          this.earlySingletonObjects.put(beanName, singletonObject);\n          this.singletonFactories.remove(beanName);\n        }\n      }\n    }\n  }\n  return singletonObject;\n}\n```\n\n循环依赖解决的核心是通过 **提前曝光** 机制，使用 三级缓存 。\n\n二级缓存其实就可以解决循环依赖，但是为了完成 **Spring AOP 中的后置处理** Spring使用了三级缓存。\n\n参考文章：[Spring 循环依赖的“常见”面试问题](https://blog.csdn.net/BigBug_500/article/details/109050337)\n\n### 事务\n\n使用注解：@Transactional\n\n1. 注解只有作用到 public 方法上事务才生效，不推荐在接口上使用；\n2. 避免同一个类中调用注解的方法，这样会导致事务失效；\n\n#### 传播类型\n\n- REQUIRED：如果当前存在事务，就加入该事务；**如果当前不存在事务，就创建一个新事务**。默认类型。\n- SUPPORTS：如果当前存在事务，就加入该事务；**如果当前不存在事务，就以非事务执行**。\n- MANDATORY：如果当前存在事务，就加入该事务；**如果当前不存在事务，就抛出异常**。\n- REQUIRES_NEW：无论当前存不存在事务，都**创建一个新事务**。\n- NOT_SUPPORTED：以非事务执行，**如果当前存在事务，就把当前事务挂起**。\n- NEVER：以非事务执行，**如果当前存在事务，则抛出异常**。\n- NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 REQUIRED 类似的操作。\n\n### Context初始化流程\n\n~~~java\npublic void refresh() throws BeansException, IllegalStateException {\n    synchronized (this.startupShutdownMonitor) {\n        // 1. 刷新前的预处理，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符等。\n        prepareRefresh();\n        // 2. 获取 beanFactory，即前面创建的【DefaultListableBeanFactory】\n        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n        // 3. 预处理 beanFactory，向容器中添加一些组件\n        prepareBeanFactory(beanFactory);\n        try {\n            postProcessBeanFactory(beanFactory);\n            // 初始化Bean\n            invokeBeanFactoryPostProcessors(beanFactory);\n            // 后置处理\n            registerBeanPostProcessors(beanFactory);\n            // 7. 初始化 MessageSource 组件（做国际化功能；消息绑定，消息解析）\n            initMessageSource();\n            // 8. 初始化事件派发器，在注册监听器时会用到\n            initApplicationEventMulticaster();\n            // 9. 留给子容器（子类），子类重写这个方法，在容器刷新的时候可以自定义逻辑，web 场景下会使用\n            onRefresh();\n            // 10. 注册监听器，派发之前步骤产生的一些事件（可能没有）\n            registerListeners();\n            // 11. 初始化所有的非单实例 bean\n            finishBeanFactoryInitialization(beanFactory);\n            // 12. 发布容器刷新完成事件\n            finishRefresh();\n        }\n    }\n}\n~~~\n\n## Spring Boot\n\n目标是简化 Spring 应用和服务的创建、开发与部署。\n\n- 简化了配置文件。\n- 使用嵌入式 Web 服务器。\n- 含有诸多开箱即用的微服务功能，\n- 可以和 Spring Cloud 联合部署。\n\nSpring Boot 的核心思想是约定大于配置，应用只需要很少的配置即可，简化了应用开发模式。\n\n### 自动装配\n\nSpring Boot 通过`@EnableAutoConfiguration`开启自动装配，通过 SpringFactoriesLoader 最终加载`META-INF/spring.factories`中的自动配置类实现自动装配，自动配置类其实就是通过`@Conditional`按需加载的配置类，想要其生效必须引入`spring-boot-starter-xxx`包实现起步依赖。\n\n参考文章：[[淘宝一面：“说一下 Spring Boot 自动装配原理呗？”](https://www.cnblogs.com/javaguide/p/springboot-auto-config.html)](https://www.cnblogs.com/javaguide/p/springboot-auto-config.html)\n\n### 启动流程\n~~~java\npublic ConfigurableApplicationContext run(String... args) {\n    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConfigurableApplicationContext context = null;\n    Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n    configureHeadlessProperty();\n    SpringApplicationRunListeners listeners = getRunListeners(args);\n    listeners.starting();\n    try {\n        ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n                args);\n        ConfigurableEnvironment environment = prepareEnvironment(listeners,\n                applicationArguments);\n        configureIgnoreBeanInfo(environment);\n        Banner printedBanner = printBanner(environment);\n        context = createApplicationContext();\n        exceptionReporters = getSpringFactoriesInstances(\n                SpringBootExceptionReporter.class,\n                new Class[] { ConfigurableApplicationContext.class }, context);\n        prepareContext(context, environment, listeners, applicationArguments,\n                printedBanner);\n        refreshContext(context);\n        afterRefresh(context, applicationArguments);\n        stopWatch.stop();\n    }\n    return context;\n}\n~~~\n1. 配置Environment。\n2. 准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。\n3. 执行 refreshContext。\n\n## Spring Cloud\n\nSpring Cloud 是一套完整的微服务解决方案，是一系列不同功能的微服务框架的集合。基于 Spring Boot，简化了分布式系统的开发。集成了服务发现、配置管理、消息总线、负载均衡、断路器、数据监控等各种服务治理能力。\n\nsleuth：提供了全链路追踪能力\n\nNetflix套件：提供了hystrix熔断器，zuul网关等众多的治理组件\n\nconfig 组件提供了动态配置能力\n\nbus组件：支持使用 RabbitMQ、Kafka、ActiveMQ 等消息队列，实现分布式服务之间的事件通信\n\n## Spring Data\n\n## Spring Security","slug":"20180727","published":1,"date":"2021-07-28T12:08:06.941Z","updated":"2021-08-01T04:20:35.990Z","_id":"ckrpxlgsz000gni0maz2ra73g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h2><h3 id=\"Bean生命周期\"><a href=\"#Bean生命周期\" class=\"headerlink\" title=\"Bean生命周期\"></a>Bean生命周期</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractAutowireCapableBeanFactory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> RootBeanDefinition mbd, <span class=\"keyword\">final</span> @Nullable Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> BeanCreationException </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 实例化</span></span><br><span class=\"line\">  BeanWrapper instanceWrapper = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (instanceWrapper == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Object exposedObject = bean;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 2. 属性赋值</span></span><br><span class=\"line\">      populateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">      <span class=\"comment\">// 3. 初始化</span></span><br><span class=\"line\">      exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4. 销毁-注册回调接口</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> exposedObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建 Bean 的时候默认是按照自然排序来进行创建的，其过程主要分为4 个阶段</p>\n<ol>\n<li>实例化（Instantiation），调用构造方法创建一个对象。</li>\n<li>属性注入（Populate），通过反射为这个对象填充属性。</li>\n<li>初始化（Initialization），进行初始化，并实现 Spring AOP 代理。<ol>\n<li>检查 Aware 的相关接口（BeanNameAware、BeanFactoryAware、ApplicationContextAware）并设置相关依赖。</li>\n<li>BeanPostProcessor 前置处理。</li>\n<li>若实现了 InitializingBean 接口，执行 afterPropertiesSet 方法；</li>\n<li>执行自定义的 init 方法；</li>\n<li>BeanPostProcessor 后置处理。</li>\n<li>注册 Destruction 相关回调接口。</li>\n</ol>\n</li>\n<li>销毁（Destruction），若实现 DisposableBean 接口，执行 destroy 方法，然后执行自定义的 destroy 方法。</li>\n</ol>\n<h3 id=\"循环依赖\"><a href=\"#循环依赖\" class=\"headerlink\" title=\"循环依赖\"></a>循环依赖</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化后的 Bean</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; singletonObjects = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, Object&gt;(<span class=\"number\">256</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 完成实例化后的，但是还未进行属性注入及初始化的对象</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提前暴露的一个单例工厂，二级缓存中存储的就是从这个工厂中获取到的对象</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class=\"keyword\">new</span> HashMap&lt;String, ObjectFactory&lt;?&gt;&gt;(<span class=\"number\">16</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DefaultSingletonBeanRegistry.getSingleton</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">getSingleton</span><span class=\"params\">(String beanName, <span class=\"keyword\">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先从一级缓存 singletonObjects 中获取。</span></span><br><span class=\"line\">  Object singletonObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 走到这说明出现循环依赖了</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果获取不到，并且对象正在创建中，就从二级缓存 earlySingletonObjects 中获取。</span></span><br><span class=\"line\">      singletonObject = <span class=\"keyword\">this</span>.earlySingletonObjects.get(beanName);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果还是获取不到且允许通过 singletonFactories 获取，就从三级缓存 singletonFactory 获取</span></span><br><span class=\"line\">        ObjectFactory&lt;?&gt; singletonFactory = <span class=\"keyword\">this</span>.singletonFactories.get(beanName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singletonFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          singletonObject = singletonFactory.getObject();</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.singletonFactories.remove(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> singletonObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>循环依赖解决的核心是通过 <strong>提前曝光</strong> 机制，使用 三级缓存 。</p>\n<p>二级缓存其实就可以解决循环依赖，但是为了完成 <strong>Spring AOP 中的后置处理</strong> Spring使用了三级缓存。</p>\n<p>参考文章：<a href=\"https://blog.csdn.net/BigBug_500/article/details/109050337\" target=\"_blank\" rel=\"noopener\">Spring 循环依赖的“常见”面试问题</a></p>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>使用注解：@Transactional</p>\n<ol>\n<li>注解只有作用到 public 方法上事务才生效，不推荐在接口上使用；</li>\n<li>避免同一个类中调用注解的方法，这样会导致事务失效；</li>\n</ol>\n<h4 id=\"传播类型\"><a href=\"#传播类型\" class=\"headerlink\" title=\"传播类型\"></a>传播类型</h4><ul>\n<li>REQUIRED：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就创建一个新事务</strong>。默认类型。</li>\n<li>SUPPORTS：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就以非事务执行</strong>。</li>\n<li>MANDATORY：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就抛出异常</strong>。</li>\n<li>REQUIRES_NEW：无论当前存不存在事务，都<strong>创建一个新事务</strong>。</li>\n<li>NOT_SUPPORTED：以非事务执行，<strong>如果当前存在事务，就把当前事务挂起</strong>。</li>\n<li>NEVER：以非事务执行，<strong>如果当前存在事务，则抛出异常</strong>。</li>\n<li>NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 REQUIRED 类似的操作。</li>\n</ul>\n<h3 id=\"Context初始化流程\"><a href=\"#Context初始化流程\" class=\"headerlink\" title=\"Context初始化流程\"></a>Context初始化流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 刷新前的预处理，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符等。</span></span><br><span class=\"line\">        prepareRefresh();</span><br><span class=\"line\">        <span class=\"comment\">// 2. 获取 beanFactory，即前面创建的【DefaultListableBeanFactory】</span></span><br><span class=\"line\">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class=\"line\">        <span class=\"comment\">// 3. 预处理 beanFactory，向容器中添加一些组件</span></span><br><span class=\"line\">        prepareBeanFactory(beanFactory);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            postProcessBeanFactory(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 初始化Bean</span></span><br><span class=\"line\">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 后置处理</span></span><br><span class=\"line\">            registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 7. 初始化 MessageSource 组件（做国际化功能；消息绑定，消息解析）</span></span><br><span class=\"line\">            initMessageSource();</span><br><span class=\"line\">            <span class=\"comment\">// 8. 初始化事件派发器，在注册监听器时会用到</span></span><br><span class=\"line\">            initApplicationEventMulticaster();</span><br><span class=\"line\">            <span class=\"comment\">// 9. 留给子容器（子类），子类重写这个方法，在容器刷新的时候可以自定义逻辑，web 场景下会使用</span></span><br><span class=\"line\">            onRefresh();</span><br><span class=\"line\">            <span class=\"comment\">// 10. 注册监听器，派发之前步骤产生的一些事件（可能没有）</span></span><br><span class=\"line\">            registerListeners();</span><br><span class=\"line\">            <span class=\"comment\">// 11. 初始化所有的非单实例 bean</span></span><br><span class=\"line\">            finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 12. 发布容器刷新完成事件</span></span><br><span class=\"line\">            finishRefresh();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h2><p>目标是简化 Spring 应用和服务的创建、开发与部署。</p>\n<ul>\n<li>简化了配置文件。</li>\n<li>使用嵌入式 Web 服务器。</li>\n<li>含有诸多开箱即用的微服务功能，</li>\n<li>可以和 Spring Cloud 联合部署。</li>\n</ul>\n<p>Spring Boot 的核心思想是约定大于配置，应用只需要很少的配置即可，简化了应用开发模式。</p>\n<h3 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h3><p>Spring Boot 通过<code>@EnableAutoConfiguration</code>开启自动装配，通过 SpringFactoriesLoader 最终加载<code>META-INF/spring.factories</code>中的自动配置类实现自动装配，自动配置类其实就是通过<code>@Conditional</code>按需加载的配置类，想要其生效必须引入<code>spring-boot-starter-xxx</code>包实现起步依赖。</p>\n<p>参考文章：<a href=\"https://www.cnblogs.com/javaguide/p/springboot-auto-config.html\" target=\"_blank\" rel=\"noopener\"><a href=\"https://www.cnblogs.com/javaguide/p/springboot-auto-config.html\" target=\"_blank\" rel=\"noopener\">淘宝一面：“说一下 Spring Boot 自动装配原理呗？”</a></a></p>\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">    StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">    stopWatch.start();</span><br><span class=\"line\">    ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    configureHeadlessProperty();</span><br><span class=\"line\">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">    listeners.starting();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">                args);</span><br><span class=\"line\">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">                applicationArguments);</span><br><span class=\"line\">        configureIgnoreBeanInfo(environment);</span><br><span class=\"line\">        Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">        context = createApplicationContext();</span><br><span class=\"line\">        exceptionReporters = getSpringFactoriesInstances(</span><br><span class=\"line\">                SpringBootExceptionReporter.class,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class=\"line\">        prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">                printedBanner);</span><br><span class=\"line\">        refreshContext(context);</span><br><span class=\"line\">        afterRefresh(context, applicationArguments);</span><br><span class=\"line\">        stopWatch.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>配置Environment。</li>\n<li>准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。</li>\n<li>执行 refreshContext。</li>\n</ol>\n<h2 id=\"Spring-Cloud\"><a href=\"#Spring-Cloud\" class=\"headerlink\" title=\"Spring Cloud\"></a>Spring Cloud</h2><p>Spring Cloud 是一套完整的微服务解决方案，是一系列不同功能的微服务框架的集合。基于 Spring Boot，简化了分布式系统的开发。集成了服务发现、配置管理、消息总线、负载均衡、断路器、数据监控等各种服务治理能力。</p>\n<p>sleuth：提供了全链路追踪能力</p>\n<p>Netflix套件：提供了hystrix熔断器，zuul网关等众多的治理组件</p>\n<p>config 组件提供了动态配置能力</p>\n<p>bus组件：支持使用 RabbitMQ、Kafka、ActiveMQ 等消息队列，实现分布式服务之间的事件通信</p>\n<h2 id=\"Spring-Data\"><a href=\"#Spring-Data\" class=\"headerlink\" title=\"Spring Data\"></a>Spring Data</h2><h2 id=\"Spring-Security\"><a href=\"#Spring-Security\" class=\"headerlink\" title=\"Spring Security\"></a>Spring Security</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h2><h3 id=\"Bean生命周期\"><a href=\"#Bean生命周期\" class=\"headerlink\" title=\"Bean生命周期\"></a>Bean生命周期</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractAutowireCapableBeanFactory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> RootBeanDefinition mbd, <span class=\"keyword\">final</span> @Nullable Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> BeanCreationException </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 实例化</span></span><br><span class=\"line\">  BeanWrapper instanceWrapper = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (instanceWrapper == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Object exposedObject = bean;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 2. 属性赋值</span></span><br><span class=\"line\">      populateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">      <span class=\"comment\">// 3. 初始化</span></span><br><span class=\"line\">      exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4. 销毁-注册回调接口</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> exposedObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建 Bean 的时候默认是按照自然排序来进行创建的，其过程主要分为4 个阶段</p>\n<ol>\n<li>实例化（Instantiation），调用构造方法创建一个对象。</li>\n<li>属性注入（Populate），通过反射为这个对象填充属性。</li>\n<li>初始化（Initialization），进行初始化，并实现 Spring AOP 代理。<ol>\n<li>检查 Aware 的相关接口（BeanNameAware、BeanFactoryAware、ApplicationContextAware）并设置相关依赖。</li>\n<li>BeanPostProcessor 前置处理。</li>\n<li>若实现了 InitializingBean 接口，执行 afterPropertiesSet 方法；</li>\n<li>执行自定义的 init 方法；</li>\n<li>BeanPostProcessor 后置处理。</li>\n<li>注册 Destruction 相关回调接口。</li>\n</ol>\n</li>\n<li>销毁（Destruction），若实现 DisposableBean 接口，执行 destroy 方法，然后执行自定义的 destroy 方法。</li>\n</ol>\n<h3 id=\"循环依赖\"><a href=\"#循环依赖\" class=\"headerlink\" title=\"循环依赖\"></a>循环依赖</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化后的 Bean</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; singletonObjects = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, Object&gt;(<span class=\"number\">256</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 完成实例化后的，但是还未进行属性注入及初始化的对象</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提前暴露的一个单例工厂，二级缓存中存储的就是从这个工厂中获取到的对象</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class=\"keyword\">new</span> HashMap&lt;String, ObjectFactory&lt;?&gt;&gt;(<span class=\"number\">16</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DefaultSingletonBeanRegistry.getSingleton</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">getSingleton</span><span class=\"params\">(String beanName, <span class=\"keyword\">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先从一级缓存 singletonObjects 中获取。</span></span><br><span class=\"line\">  Object singletonObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 走到这说明出现循环依赖了</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果获取不到，并且对象正在创建中，就从二级缓存 earlySingletonObjects 中获取。</span></span><br><span class=\"line\">      singletonObject = <span class=\"keyword\">this</span>.earlySingletonObjects.get(beanName);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果还是获取不到且允许通过 singletonFactories 获取，就从三级缓存 singletonFactory 获取</span></span><br><span class=\"line\">        ObjectFactory&lt;?&gt; singletonFactory = <span class=\"keyword\">this</span>.singletonFactories.get(beanName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singletonFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          singletonObject = singletonFactory.getObject();</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.singletonFactories.remove(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> singletonObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>循环依赖解决的核心是通过 <strong>提前曝光</strong> 机制，使用 三级缓存 。</p>\n<p>二级缓存其实就可以解决循环依赖，但是为了完成 <strong>Spring AOP 中的后置处理</strong> Spring使用了三级缓存。</p>\n<p>参考文章：<a href=\"https://blog.csdn.net/BigBug_500/article/details/109050337\" target=\"_blank\" rel=\"noopener\">Spring 循环依赖的“常见”面试问题</a></p>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>使用注解：@Transactional</p>\n<ol>\n<li>注解只有作用到 public 方法上事务才生效，不推荐在接口上使用；</li>\n<li>避免同一个类中调用注解的方法，这样会导致事务失效；</li>\n</ol>\n<h4 id=\"传播类型\"><a href=\"#传播类型\" class=\"headerlink\" title=\"传播类型\"></a>传播类型</h4><ul>\n<li>REQUIRED：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就创建一个新事务</strong>。默认类型。</li>\n<li>SUPPORTS：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就以非事务执行</strong>。</li>\n<li>MANDATORY：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就抛出异常</strong>。</li>\n<li>REQUIRES_NEW：无论当前存不存在事务，都<strong>创建一个新事务</strong>。</li>\n<li>NOT_SUPPORTED：以非事务执行，<strong>如果当前存在事务，就把当前事务挂起</strong>。</li>\n<li>NEVER：以非事务执行，<strong>如果当前存在事务，则抛出异常</strong>。</li>\n<li>NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 REQUIRED 类似的操作。</li>\n</ul>\n<h3 id=\"Context初始化流程\"><a href=\"#Context初始化流程\" class=\"headerlink\" title=\"Context初始化流程\"></a>Context初始化流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 刷新前的预处理，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符等。</span></span><br><span class=\"line\">        prepareRefresh();</span><br><span class=\"line\">        <span class=\"comment\">// 2. 获取 beanFactory，即前面创建的【DefaultListableBeanFactory】</span></span><br><span class=\"line\">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class=\"line\">        <span class=\"comment\">// 3. 预处理 beanFactory，向容器中添加一些组件</span></span><br><span class=\"line\">        prepareBeanFactory(beanFactory);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            postProcessBeanFactory(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 初始化Bean</span></span><br><span class=\"line\">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 后置处理</span></span><br><span class=\"line\">            registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 7. 初始化 MessageSource 组件（做国际化功能；消息绑定，消息解析）</span></span><br><span class=\"line\">            initMessageSource();</span><br><span class=\"line\">            <span class=\"comment\">// 8. 初始化事件派发器，在注册监听器时会用到</span></span><br><span class=\"line\">            initApplicationEventMulticaster();</span><br><span class=\"line\">            <span class=\"comment\">// 9. 留给子容器（子类），子类重写这个方法，在容器刷新的时候可以自定义逻辑，web 场景下会使用</span></span><br><span class=\"line\">            onRefresh();</span><br><span class=\"line\">            <span class=\"comment\">// 10. 注册监听器，派发之前步骤产生的一些事件（可能没有）</span></span><br><span class=\"line\">            registerListeners();</span><br><span class=\"line\">            <span class=\"comment\">// 11. 初始化所有的非单实例 bean</span></span><br><span class=\"line\">            finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 12. 发布容器刷新完成事件</span></span><br><span class=\"line\">            finishRefresh();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h2><p>目标是简化 Spring 应用和服务的创建、开发与部署。</p>\n<ul>\n<li>简化了配置文件。</li>\n<li>使用嵌入式 Web 服务器。</li>\n<li>含有诸多开箱即用的微服务功能，</li>\n<li>可以和 Spring Cloud 联合部署。</li>\n</ul>\n<p>Spring Boot 的核心思想是约定大于配置，应用只需要很少的配置即可，简化了应用开发模式。</p>\n<h3 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h3><p>Spring Boot 通过<code>@EnableAutoConfiguration</code>开启自动装配，通过 SpringFactoriesLoader 最终加载<code>META-INF/spring.factories</code>中的自动配置类实现自动装配，自动配置类其实就是通过<code>@Conditional</code>按需加载的配置类，想要其生效必须引入<code>spring-boot-starter-xxx</code>包实现起步依赖。</p>\n<p>参考文章：<a href=\"https://www.cnblogs.com/javaguide/p/springboot-auto-config.html\" target=\"_blank\" rel=\"noopener\"><a href=\"https://www.cnblogs.com/javaguide/p/springboot-auto-config.html\" target=\"_blank\" rel=\"noopener\">淘宝一面：“说一下 Spring Boot 自动装配原理呗？”</a></a></p>\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">    StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">    stopWatch.start();</span><br><span class=\"line\">    ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    configureHeadlessProperty();</span><br><span class=\"line\">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">    listeners.starting();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">                args);</span><br><span class=\"line\">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">                applicationArguments);</span><br><span class=\"line\">        configureIgnoreBeanInfo(environment);</span><br><span class=\"line\">        Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">        context = createApplicationContext();</span><br><span class=\"line\">        exceptionReporters = getSpringFactoriesInstances(</span><br><span class=\"line\">                SpringBootExceptionReporter.class,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class=\"line\">        prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">                printedBanner);</span><br><span class=\"line\">        refreshContext(context);</span><br><span class=\"line\">        afterRefresh(context, applicationArguments);</span><br><span class=\"line\">        stopWatch.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>配置Environment。</li>\n<li>准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。</li>\n<li>执行 refreshContext。</li>\n</ol>\n<h2 id=\"Spring-Cloud\"><a href=\"#Spring-Cloud\" class=\"headerlink\" title=\"Spring Cloud\"></a>Spring Cloud</h2><p>Spring Cloud 是一套完整的微服务解决方案，是一系列不同功能的微服务框架的集合。基于 Spring Boot，简化了分布式系统的开发。集成了服务发现、配置管理、消息总线、负载均衡、断路器、数据监控等各种服务治理能力。</p>\n<p>sleuth：提供了全链路追踪能力</p>\n<p>Netflix套件：提供了hystrix熔断器，zuul网关等众多的治理组件</p>\n<p>config 组件提供了动态配置能力</p>\n<p>bus组件：支持使用 RabbitMQ、Kafka、ActiveMQ 等消息队列，实现分布式服务之间的事件通信</p>\n<h2 id=\"Spring-Data\"><a href=\"#Spring-Data\" class=\"headerlink\" title=\"Spring Data\"></a>Spring Data</h2><h2 id=\"Spring-Security\"><a href=\"#Spring-Security\" class=\"headerlink\" title=\"Spring Security\"></a>Spring Security</h2>"},{"title":"MyBatis","_content":"\nMyBatis 的优点：\n\n1. MyBatis 是原生SQL，不像 Hibernate 的 HQL 需要额外的学习成本。\n2. MyBatis 的 SQL 语句与代码进行了解耦合。\n3. MyBatis 功能简单，学习成本比较低，使用的门槛也非常低，可以快速上手。\n4. MyBatis SQL调优比较灵活，而 Hibernate，SQL 语句是自动生成的，当有复杂语句需要进行优化时就比较难处理。 \n\nMyBatis 的缺点：\n\n1. 相比 Hibernate 这样的全自动 ORM 框架，不能自动生成 SQL 语句，编写 SQL 的工作量比较大，尤其是字段多、关联表多的情况下；\n2. SQL 语句依赖于具体数据库，导致数据库迁移性差，而 Hibernate 则拥有良好的数据库可移植性。\n\n官方文档：[MyBatis3](https://mybatis.org/mybatis-3/zh/index.html)\n\n<!-- more -->\n\n## 处理流程\n\n![MyBatis处理流程](/img/posts/MyBatis.png)\n\n1. 在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。\n2. SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。\n3. StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。\n4. 最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。\n\n\n\n## 缓存\n\n\n\n\n\n## 经验\n\n","source":"_posts/20180802.md","raw":"---\ntitle: MyBatis\ncategory: 应用模块\ntag: 框架\n---\n\nMyBatis 的优点：\n\n1. MyBatis 是原生SQL，不像 Hibernate 的 HQL 需要额外的学习成本。\n2. MyBatis 的 SQL 语句与代码进行了解耦合。\n3. MyBatis 功能简单，学习成本比较低，使用的门槛也非常低，可以快速上手。\n4. MyBatis SQL调优比较灵活，而 Hibernate，SQL 语句是自动生成的，当有复杂语句需要进行优化时就比较难处理。 \n\nMyBatis 的缺点：\n\n1. 相比 Hibernate 这样的全自动 ORM 框架，不能自动生成 SQL 语句，编写 SQL 的工作量比较大，尤其是字段多、关联表多的情况下；\n2. SQL 语句依赖于具体数据库，导致数据库迁移性差，而 Hibernate 则拥有良好的数据库可移植性。\n\n官方文档：[MyBatis3](https://mybatis.org/mybatis-3/zh/index.html)\n\n<!-- more -->\n\n## 处理流程\n\n![MyBatis处理流程](/img/posts/MyBatis.png)\n\n1. 在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。\n2. SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。\n3. StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。\n4. 最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。\n\n\n\n## 缓存\n\n\n\n\n\n## 经验\n\n","slug":"20180802","published":1,"date":"2021-07-28T12:08:06.941Z","updated":"2021-08-01T05:21:25.231Z","_id":"ckrpxlgt0000jni0mnbmcxnui","comments":1,"layout":"post","photos":[],"link":"","content":"<p>MyBatis 的优点：</p>\n<ol>\n<li>MyBatis 是原生SQL，不像 Hibernate 的 HQL 需要额外的学习成本。</li>\n<li>MyBatis 的 SQL 语句与代码进行了解耦合。</li>\n<li>MyBatis 功能简单，学习成本比较低，使用的门槛也非常低，可以快速上手。</li>\n<li>MyBatis SQL调优比较灵活，而 Hibernate，SQL 语句是自动生成的，当有复杂语句需要进行优化时就比较难处理。 </li>\n</ol>\n<p>MyBatis 的缺点：</p>\n<ol>\n<li>相比 Hibernate 这样的全自动 ORM 框架，不能自动生成 SQL 语句，编写 SQL 的工作量比较大，尤其是字段多、关联表多的情况下；</li>\n<li>SQL 语句依赖于具体数据库，导致数据库迁移性差，而 Hibernate 则拥有良好的数据库可移植性。</li>\n</ol>\n<p>官方文档：<a href=\"https://mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"noopener\">MyBatis3</a></p>\n<a id=\"more\"></a>\n<h2 id=\"处理流程\"><a href=\"#处理流程\" class=\"headerlink\" title=\"处理流程\"></a>处理流程</h2><p><img src=\"/img/posts/MyBatis.png\" alt=\"MyBatis处理流程\"></p>\n<ol>\n<li>在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。</li>\n<li>SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。</li>\n<li>StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。</li>\n<li>最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。</li>\n</ol>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2>","site":{"data":{}},"excerpt":"<p>MyBatis 的优点：</p>\n<ol>\n<li>MyBatis 是原生SQL，不像 Hibernate 的 HQL 需要额外的学习成本。</li>\n<li>MyBatis 的 SQL 语句与代码进行了解耦合。</li>\n<li>MyBatis 功能简单，学习成本比较低，使用的门槛也非常低，可以快速上手。</li>\n<li>MyBatis SQL调优比较灵活，而 Hibernate，SQL 语句是自动生成的，当有复杂语句需要进行优化时就比较难处理。 </li>\n</ol>\n<p>MyBatis 的缺点：</p>\n<ol>\n<li>相比 Hibernate 这样的全自动 ORM 框架，不能自动生成 SQL 语句，编写 SQL 的工作量比较大，尤其是字段多、关联表多的情况下；</li>\n<li>SQL 语句依赖于具体数据库，导致数据库迁移性差，而 Hibernate 则拥有良好的数据库可移植性。</li>\n</ol>\n<p>官方文档：<a href=\"https://mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"noopener\">MyBatis3</a></p>","more":"<h2 id=\"处理流程\"><a href=\"#处理流程\" class=\"headerlink\" title=\"处理流程\"></a>处理流程</h2><p><img src=\"/img/posts/MyBatis.png\" alt=\"MyBatis处理流程\"></p>\n<ol>\n<li>在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。</li>\n<li>SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。</li>\n<li>StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。</li>\n<li>最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。</li>\n</ol>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2>"},{"title":"RPC","_content":"\nRPC 是远程过程调用的简写，RPC 与 HTTP 一样都可以实现远程服务的调用，但是使用方式上有很大的区别。它能够像使用本地方法一样调用远程的方法。\n<!--more-->\n\n## 交互流程\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRCAD22_AAAwyeZIb9A096.png)\n\n- Client端：请求的发起方，也称 Consumer 或者 Referer。\n- Server 端：服务实现提供方，也称 Provider。\n\n为了保持较高的性能，Client 端一般都是直接请求远端的 Server 节点。因此，RPC 框架需要自动的服务注册与发现的能力，上方的绿色的注册中心就是用来动态维护可用服务节点信息的模块。\n\n**当 Server 提供服务时**，向注册中心注册服务信息，告诉注册中心可以提供哪些服务。同时与注册中心保持心跳或者维持长链接，来维持 Server 可用状态，具体方式与注册中心的实现有关。例如 ZK 使用长链接推送方式而 Consul 使用心跳方式。\n\n**当 Client 需要使用服务时**，会先向注册中心订阅服务，获得可用的 Server 节点，并保存在 Client 本地。当 Server 节点发生变更时会通知 Client 更新本地 Server 节点信息。Client 按某种负载均衡策略直接请求 Server 使用服务。\n\n注意：注册中心只参与服务节点的注册与变更通知，并不会参与具体请求的处理。另外一般的 RPC 框架都提供了完整的服务治理能力，因此会有额外的管理模块和信息采集模块来监控、管理服务。\n\n\n\n## 开源框架\n\n### Dubbo\n\n- 阿里开源的 RPC 框架，提供完善的服务治理能力。\n- 可以快速为 Java 服务提供 RPC 能力。\n- 提供了随机、轮询、最少调用优先等多种负载均衡策略。\n- 提供对 ZK 等多种注册中心等支持，能够自动完成服务的注册与发现。\n- 提供可视化的管理后台，方便对服务状态进行监控和管理。\n\n### Motan\n\n- 微博开源的轻量级服务治理框架，提供强大灵活的扩展能力。\n- 提供了多语言支持，目前支持 Java、PHP、Lua、Golang 等多语言交互，目前 Python 和 C++ 的客户端也在研发中。\n- 通过 Agent 代理方式，实现了的跨语言 ServiceMesh 的支持。\n- Java 版本的通信层也是通过 Netty 来实现的，基于 TCP 的私有协议进行通信。\n\n### gPRC\n\n- Google 开源的框架，本身支持的服务治理能力并不强，但拥有非常灵活的插件扩展能力，可以方便的实现自定义的服务治理能力。\n- 默认使用 Protobuf 进行消息序列化，非常适合多语言服务之间进行交互。\n- 基于 HTTP2 协议，能够支持链接复用。\n- 提供了流式调用能力。\n- 支持从服务端进行推送消息的能力。\n\n","source":"_posts/20180815.md","raw":"---\ntitle: RPC \ncategory: 应用模块\n---\n\nRPC 是远程过程调用的简写，RPC 与 HTTP 一样都可以实现远程服务的调用，但是使用方式上有很大的区别。它能够像使用本地方法一样调用远程的方法。\n<!--more-->\n\n## 交互流程\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRCAD22_AAAwyeZIb9A096.png)\n\n- Client端：请求的发起方，也称 Consumer 或者 Referer。\n- Server 端：服务实现提供方，也称 Provider。\n\n为了保持较高的性能，Client 端一般都是直接请求远端的 Server 节点。因此，RPC 框架需要自动的服务注册与发现的能力，上方的绿色的注册中心就是用来动态维护可用服务节点信息的模块。\n\n**当 Server 提供服务时**，向注册中心注册服务信息，告诉注册中心可以提供哪些服务。同时与注册中心保持心跳或者维持长链接，来维持 Server 可用状态，具体方式与注册中心的实现有关。例如 ZK 使用长链接推送方式而 Consul 使用心跳方式。\n\n**当 Client 需要使用服务时**，会先向注册中心订阅服务，获得可用的 Server 节点，并保存在 Client 本地。当 Server 节点发生变更时会通知 Client 更新本地 Server 节点信息。Client 按某种负载均衡策略直接请求 Server 使用服务。\n\n注意：注册中心只参与服务节点的注册与变更通知，并不会参与具体请求的处理。另外一般的 RPC 框架都提供了完整的服务治理能力，因此会有额外的管理模块和信息采集模块来监控、管理服务。\n\n\n\n## 开源框架\n\n### Dubbo\n\n- 阿里开源的 RPC 框架，提供完善的服务治理能力。\n- 可以快速为 Java 服务提供 RPC 能力。\n- 提供了随机、轮询、最少调用优先等多种负载均衡策略。\n- 提供对 ZK 等多种注册中心等支持，能够自动完成服务的注册与发现。\n- 提供可视化的管理后台，方便对服务状态进行监控和管理。\n\n### Motan\n\n- 微博开源的轻量级服务治理框架，提供强大灵活的扩展能力。\n- 提供了多语言支持，目前支持 Java、PHP、Lua、Golang 等多语言交互，目前 Python 和 C++ 的客户端也在研发中。\n- 通过 Agent 代理方式，实现了的跨语言 ServiceMesh 的支持。\n- Java 版本的通信层也是通过 Netty 来实现的，基于 TCP 的私有协议进行通信。\n\n### gPRC\n\n- Google 开源的框架，本身支持的服务治理能力并不强，但拥有非常灵活的插件扩展能力，可以方便的实现自定义的服务治理能力。\n- 默认使用 Protobuf 进行消息序列化，非常适合多语言服务之间进行交互。\n- 基于 HTTP2 协议，能够支持链接复用。\n- 提供了流式调用能力。\n- 支持从服务端进行推送消息的能力。\n\n","slug":"20180815","published":1,"date":"2021-07-28T12:08:06.942Z","updated":"2021-07-29T14:16:24.581Z","_id":"ckrpxlgt1000mni0m509t1h1e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>RPC 是远程过程调用的简写，RPC 与 HTTP 一样都可以实现远程服务的调用，但是使用方式上有很大的区别。它能够像使用本地方法一样调用远程的方法。<br><a id=\"more\"></a></p>\n<h2 id=\"交互流程\"><a href=\"#交互流程\" class=\"headerlink\" title=\"交互流程\"></a>交互流程</h2><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRCAD22_AAAwyeZIb9A096.png\" alt=\"img\"></p>\n<ul>\n<li>Client端：请求的发起方，也称 Consumer 或者 Referer。</li>\n<li>Server 端：服务实现提供方，也称 Provider。</li>\n</ul>\n<p>为了保持较高的性能，Client 端一般都是直接请求远端的 Server 节点。因此，RPC 框架需要自动的服务注册与发现的能力，上方的绿色的注册中心就是用来动态维护可用服务节点信息的模块。</p>\n<p><strong>当 Server 提供服务时</strong>，向注册中心注册服务信息，告诉注册中心可以提供哪些服务。同时与注册中心保持心跳或者维持长链接，来维持 Server 可用状态，具体方式与注册中心的实现有关。例如 ZK 使用长链接推送方式而 Consul 使用心跳方式。</p>\n<p><strong>当 Client 需要使用服务时</strong>，会先向注册中心订阅服务，获得可用的 Server 节点，并保存在 Client 本地。当 Server 节点发生变更时会通知 Client 更新本地 Server 节点信息。Client 按某种负载均衡策略直接请求 Server 使用服务。</p>\n<p>注意：注册中心只参与服务节点的注册与变更通知，并不会参与具体请求的处理。另外一般的 RPC 框架都提供了完整的服务治理能力，因此会有额外的管理模块和信息采集模块来监控、管理服务。</p>\n<h2 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h2><h3 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h3><ul>\n<li>阿里开源的 RPC 框架，提供完善的服务治理能力。</li>\n<li>可以快速为 Java 服务提供 RPC 能力。</li>\n<li>提供了随机、轮询、最少调用优先等多种负载均衡策略。</li>\n<li>提供对 ZK 等多种注册中心等支持，能够自动完成服务的注册与发现。</li>\n<li>提供可视化的管理后台，方便对服务状态进行监控和管理。</li>\n</ul>\n<h3 id=\"Motan\"><a href=\"#Motan\" class=\"headerlink\" title=\"Motan\"></a>Motan</h3><ul>\n<li>微博开源的轻量级服务治理框架，提供强大灵活的扩展能力。</li>\n<li>提供了多语言支持，目前支持 Java、PHP、Lua、Golang 等多语言交互，目前 Python 和 C++ 的客户端也在研发中。</li>\n<li>通过 Agent 代理方式，实现了的跨语言 ServiceMesh 的支持。</li>\n<li>Java 版本的通信层也是通过 Netty 来实现的，基于 TCP 的私有协议进行通信。</li>\n</ul>\n<h3 id=\"gPRC\"><a href=\"#gPRC\" class=\"headerlink\" title=\"gPRC\"></a>gPRC</h3><ul>\n<li>Google 开源的框架，本身支持的服务治理能力并不强，但拥有非常灵活的插件扩展能力，可以方便的实现自定义的服务治理能力。</li>\n<li>默认使用 Protobuf 进行消息序列化，非常适合多语言服务之间进行交互。</li>\n<li>基于 HTTP2 协议，能够支持链接复用。</li>\n<li>提供了流式调用能力。</li>\n<li>支持从服务端进行推送消息的能力。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>RPC 是远程过程调用的简写，RPC 与 HTTP 一样都可以实现远程服务的调用，但是使用方式上有很大的区别。它能够像使用本地方法一样调用远程的方法。<br>","more":"</p>\n<h2 id=\"交互流程\"><a href=\"#交互流程\" class=\"headerlink\" title=\"交互流程\"></a>交互流程</h2><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRCAD22_AAAwyeZIb9A096.png\" alt=\"img\"></p>\n<ul>\n<li>Client端：请求的发起方，也称 Consumer 或者 Referer。</li>\n<li>Server 端：服务实现提供方，也称 Provider。</li>\n</ul>\n<p>为了保持较高的性能，Client 端一般都是直接请求远端的 Server 节点。因此，RPC 框架需要自动的服务注册与发现的能力，上方的绿色的注册中心就是用来动态维护可用服务节点信息的模块。</p>\n<p><strong>当 Server 提供服务时</strong>，向注册中心注册服务信息，告诉注册中心可以提供哪些服务。同时与注册中心保持心跳或者维持长链接，来维持 Server 可用状态，具体方式与注册中心的实现有关。例如 ZK 使用长链接推送方式而 Consul 使用心跳方式。</p>\n<p><strong>当 Client 需要使用服务时</strong>，会先向注册中心订阅服务，获得可用的 Server 节点，并保存在 Client 本地。当 Server 节点发生变更时会通知 Client 更新本地 Server 节点信息。Client 按某种负载均衡策略直接请求 Server 使用服务。</p>\n<p>注意：注册中心只参与服务节点的注册与变更通知，并不会参与具体请求的处理。另外一般的 RPC 框架都提供了完整的服务治理能力，因此会有额外的管理模块和信息采集模块来监控、管理服务。</p>\n<h2 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h2><h3 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h3><ul>\n<li>阿里开源的 RPC 框架，提供完善的服务治理能力。</li>\n<li>可以快速为 Java 服务提供 RPC 能力。</li>\n<li>提供了随机、轮询、最少调用优先等多种负载均衡策略。</li>\n<li>提供对 ZK 等多种注册中心等支持，能够自动完成服务的注册与发现。</li>\n<li>提供可视化的管理后台，方便对服务状态进行监控和管理。</li>\n</ul>\n<h3 id=\"Motan\"><a href=\"#Motan\" class=\"headerlink\" title=\"Motan\"></a>Motan</h3><ul>\n<li>微博开源的轻量级服务治理框架，提供强大灵活的扩展能力。</li>\n<li>提供了多语言支持，目前支持 Java、PHP、Lua、Golang 等多语言交互，目前 Python 和 C++ 的客户端也在研发中。</li>\n<li>通过 Agent 代理方式，实现了的跨语言 ServiceMesh 的支持。</li>\n<li>Java 版本的通信层也是通过 Netty 来实现的，基于 TCP 的私有协议进行通信。</li>\n</ul>\n<h3 id=\"gPRC\"><a href=\"#gPRC\" class=\"headerlink\" title=\"gPRC\"></a>gPRC</h3><ul>\n<li>Google 开源的框架，本身支持的服务治理能力并不强，但拥有非常灵活的插件扩展能力，可以方便的实现自定义的服务治理能力。</li>\n<li>默认使用 Protobuf 进行消息序列化，非常适合多语言服务之间进行交互。</li>\n<li>基于 HTTP2 协议，能够支持链接复用。</li>\n<li>提供了流式调用能力。</li>\n<li>支持从服务端进行推送消息的能力。</li>\n</ul>"},{"title":"缓存","_content":"\n缓存是高并发场景下提高热点数据访问性能的一个有效手段，使用内存来保存数据。\n<!--more-->\n\n## 类型\n* 本地缓存\n    * Caffeine\n* 分布式缓存\n    * [Redis](/2021/07/29/20181111/)\n    * Memcache\n* 多级缓存：本地缓存 + 分布式缓存\n实际业务中一般采用多级缓存，本地缓存只保存访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。\n\n## 淘汰策略\n由于成本和内存限制，当存储的数据超过缓存容量时，需要对缓存的数据进行剔除。\n* FIFO：淘汰最早数据。\n* LRU：剔除最近最少使用。\n* LFU：剔除最近使用频率最低。\n\n## 缓存常见问题\n### 缓存更新方式\n在数据源（可能是 DB，也可能是远程服务）发生变更时需要对缓存进行更新。\n**DB：**\n\n在更新完 DB 后就直接更新缓存\n\n**远程服务**\n\n- 对缓存数据设置失效期（数据不一致的最大容忍时间），key 不存在或失效时先请求数据源获取最新数据，然后再次缓存，并更新失效期。\n- 定时对数据进行分批更新\n\n### 缓存不一致\n主动更新失败，例如更新 DB 后，更新 Redis 因为网络原因请求超时；或者是异步更新失败导致。\n\n- 服务对耗时不是特别敏感：可以增加重试。\n- 服务对耗时不是特别敏感：可以通过异步补偿任务来处理失败的更新。\n- 短期的数据不一致不会影响业务：那么只要下次更新时可以成功，能保证最终一致性就可以。\n\n### 缓存穿透\n外部的恶意攻击，用户不断发起不存在数据的请求。\n* 对不存在的数据，在缓存中保存一个空对象进行标记，防止相同 ID 再次访问 DB。不过有时这个方法并不能很好解决问题，可能导致缓存中存储大量无用数据。\n* 使用 BloomFilter 过滤器，BloomFilter 的特点是存在性检测，如果 BloomFilter 中不存在，那么数据一定不存在；如果 BloomFilter 中存在，实际数据也有可能会不存在。非常适合解决这类的问题。\n\n### 缓存击穿\n某个热点数据失效时，大量针对这个数据的请求会穿透到数据源。\n* 可以使用互斥锁更新，保证同一个进程中针对同一个数据不会并发请求到 DB，减小 DB 压力。\n* 使用随机退避方式，失效时随机 sleep 一个很短的时间，再次查询，如果失败再执行更新。\n\n多个热点 key 同时失效，大量请求会穿透到数据源。\n\n- 可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。\n\n### 缓存雪崩：缓存挂掉\n缓存挂掉，这时所有的请求都会穿透到 DB。\n* 使用快速失败的熔断策略，减少 DB 瞬间压力。\n* 使用主从模式和集群模式来尽量保证缓存服务的高可用。","source":"_posts/20180916.md","raw":"---\ntitle: 缓存\ncategory: 应用模块\ntag: [缓存,中间件]\n---\n\n缓存是高并发场景下提高热点数据访问性能的一个有效手段，使用内存来保存数据。\n<!--more-->\n\n## 类型\n* 本地缓存\n    * Caffeine\n* 分布式缓存\n    * [Redis](/2021/07/29/20181111/)\n    * Memcache\n* 多级缓存：本地缓存 + 分布式缓存\n实际业务中一般采用多级缓存，本地缓存只保存访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。\n\n## 淘汰策略\n由于成本和内存限制，当存储的数据超过缓存容量时，需要对缓存的数据进行剔除。\n* FIFO：淘汰最早数据。\n* LRU：剔除最近最少使用。\n* LFU：剔除最近使用频率最低。\n\n## 缓存常见问题\n### 缓存更新方式\n在数据源（可能是 DB，也可能是远程服务）发生变更时需要对缓存进行更新。\n**DB：**\n\n在更新完 DB 后就直接更新缓存\n\n**远程服务**\n\n- 对缓存数据设置失效期（数据不一致的最大容忍时间），key 不存在或失效时先请求数据源获取最新数据，然后再次缓存，并更新失效期。\n- 定时对数据进行分批更新\n\n### 缓存不一致\n主动更新失败，例如更新 DB 后，更新 Redis 因为网络原因请求超时；或者是异步更新失败导致。\n\n- 服务对耗时不是特别敏感：可以增加重试。\n- 服务对耗时不是特别敏感：可以通过异步补偿任务来处理失败的更新。\n- 短期的数据不一致不会影响业务：那么只要下次更新时可以成功，能保证最终一致性就可以。\n\n### 缓存穿透\n外部的恶意攻击，用户不断发起不存在数据的请求。\n* 对不存在的数据，在缓存中保存一个空对象进行标记，防止相同 ID 再次访问 DB。不过有时这个方法并不能很好解决问题，可能导致缓存中存储大量无用数据。\n* 使用 BloomFilter 过滤器，BloomFilter 的特点是存在性检测，如果 BloomFilter 中不存在，那么数据一定不存在；如果 BloomFilter 中存在，实际数据也有可能会不存在。非常适合解决这类的问题。\n\n### 缓存击穿\n某个热点数据失效时，大量针对这个数据的请求会穿透到数据源。\n* 可以使用互斥锁更新，保证同一个进程中针对同一个数据不会并发请求到 DB，减小 DB 压力。\n* 使用随机退避方式，失效时随机 sleep 一个很短的时间，再次查询，如果失败再执行更新。\n\n多个热点 key 同时失效，大量请求会穿透到数据源。\n\n- 可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。\n\n### 缓存雪崩：缓存挂掉\n缓存挂掉，这时所有的请求都会穿透到 DB。\n* 使用快速失败的熔断策略，减少 DB 瞬间压力。\n* 使用主从模式和集群模式来尽量保证缓存服务的高可用。","slug":"20180916","published":1,"date":"2021-07-29T12:12:55.020Z","updated":"2021-07-31T05:00:22.396Z","_id":"ckrpxlgt3000pni0mwr1lg1g5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>缓存是高并发场景下提高热点数据访问性能的一个有效手段，使用内存来保存数据。<br><a id=\"more\"></a></p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>本地缓存<ul>\n<li>Caffeine</li>\n</ul>\n</li>\n<li>分布式缓存<ul>\n<li><a href=\"/2021/07/29/20181111/\">Redis</a></li>\n<li>Memcache</li>\n</ul>\n</li>\n<li>多级缓存：本地缓存 + 分布式缓存<br>实际业务中一般采用多级缓存，本地缓存只保存访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。</li>\n</ul>\n<h2 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h2><p>由于成本和内存限制，当存储的数据超过缓存容量时，需要对缓存的数据进行剔除。</p>\n<ul>\n<li>FIFO：淘汰最早数据。</li>\n<li>LRU：剔除最近最少使用。</li>\n<li>LFU：剔除最近使用频率最低。</li>\n</ul>\n<h2 id=\"缓存常见问题\"><a href=\"#缓存常见问题\" class=\"headerlink\" title=\"缓存常见问题\"></a>缓存常见问题</h2><h3 id=\"缓存更新方式\"><a href=\"#缓存更新方式\" class=\"headerlink\" title=\"缓存更新方式\"></a>缓存更新方式</h3><p>在数据源（可能是 DB，也可能是远程服务）发生变更时需要对缓存进行更新。<br><strong>DB：</strong></p>\n<p>在更新完 DB 后就直接更新缓存</p>\n<p><strong>远程服务</strong></p>\n<ul>\n<li>对缓存数据设置失效期（数据不一致的最大容忍时间），key 不存在或失效时先请求数据源获取最新数据，然后再次缓存，并更新失效期。</li>\n<li>定时对数据进行分批更新</li>\n</ul>\n<h3 id=\"缓存不一致\"><a href=\"#缓存不一致\" class=\"headerlink\" title=\"缓存不一致\"></a>缓存不一致</h3><p>主动更新失败，例如更新 DB 后，更新 Redis 因为网络原因请求超时；或者是异步更新失败导致。</p>\n<ul>\n<li>服务对耗时不是特别敏感：可以增加重试。</li>\n<li>服务对耗时不是特别敏感：可以通过异步补偿任务来处理失败的更新。</li>\n<li>短期的数据不一致不会影响业务：那么只要下次更新时可以成功，能保证最终一致性就可以。</li>\n</ul>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>外部的恶意攻击，用户不断发起不存在数据的请求。</p>\n<ul>\n<li>对不存在的数据，在缓存中保存一个空对象进行标记，防止相同 ID 再次访问 DB。不过有时这个方法并不能很好解决问题，可能导致缓存中存储大量无用数据。</li>\n<li>使用 BloomFilter 过滤器，BloomFilter 的特点是存在性检测，如果 BloomFilter 中不存在，那么数据一定不存在；如果 BloomFilter 中存在，实际数据也有可能会不存在。非常适合解决这类的问题。</li>\n</ul>\n<h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h3><p>某个热点数据失效时，大量针对这个数据的请求会穿透到数据源。</p>\n<ul>\n<li>可以使用互斥锁更新，保证同一个进程中针对同一个数据不会并发请求到 DB，减小 DB 压力。</li>\n<li>使用随机退避方式，失效时随机 sleep 一个很短的时间，再次查询，如果失败再执行更新。</li>\n</ul>\n<p>多个热点 key 同时失效，大量请求会穿透到数据源。</p>\n<ul>\n<li>可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。</li>\n</ul>\n<h3 id=\"缓存雪崩：缓存挂掉\"><a href=\"#缓存雪崩：缓存挂掉\" class=\"headerlink\" title=\"缓存雪崩：缓存挂掉\"></a>缓存雪崩：缓存挂掉</h3><p>缓存挂掉，这时所有的请求都会穿透到 DB。</p>\n<ul>\n<li>使用快速失败的熔断策略，减少 DB 瞬间压力。</li>\n<li>使用主从模式和集群模式来尽量保证缓存服务的高可用。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>缓存是高并发场景下提高热点数据访问性能的一个有效手段，使用内存来保存数据。<br>","more":"</p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>本地缓存<ul>\n<li>Caffeine</li>\n</ul>\n</li>\n<li>分布式缓存<ul>\n<li><a href=\"/2021/07/29/20181111/\">Redis</a></li>\n<li>Memcache</li>\n</ul>\n</li>\n<li>多级缓存：本地缓存 + 分布式缓存<br>实际业务中一般采用多级缓存，本地缓存只保存访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。</li>\n</ul>\n<h2 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h2><p>由于成本和内存限制，当存储的数据超过缓存容量时，需要对缓存的数据进行剔除。</p>\n<ul>\n<li>FIFO：淘汰最早数据。</li>\n<li>LRU：剔除最近最少使用。</li>\n<li>LFU：剔除最近使用频率最低。</li>\n</ul>\n<h2 id=\"缓存常见问题\"><a href=\"#缓存常见问题\" class=\"headerlink\" title=\"缓存常见问题\"></a>缓存常见问题</h2><h3 id=\"缓存更新方式\"><a href=\"#缓存更新方式\" class=\"headerlink\" title=\"缓存更新方式\"></a>缓存更新方式</h3><p>在数据源（可能是 DB，也可能是远程服务）发生变更时需要对缓存进行更新。<br><strong>DB：</strong></p>\n<p>在更新完 DB 后就直接更新缓存</p>\n<p><strong>远程服务</strong></p>\n<ul>\n<li>对缓存数据设置失效期（数据不一致的最大容忍时间），key 不存在或失效时先请求数据源获取最新数据，然后再次缓存，并更新失效期。</li>\n<li>定时对数据进行分批更新</li>\n</ul>\n<h3 id=\"缓存不一致\"><a href=\"#缓存不一致\" class=\"headerlink\" title=\"缓存不一致\"></a>缓存不一致</h3><p>主动更新失败，例如更新 DB 后，更新 Redis 因为网络原因请求超时；或者是异步更新失败导致。</p>\n<ul>\n<li>服务对耗时不是特别敏感：可以增加重试。</li>\n<li>服务对耗时不是特别敏感：可以通过异步补偿任务来处理失败的更新。</li>\n<li>短期的数据不一致不会影响业务：那么只要下次更新时可以成功，能保证最终一致性就可以。</li>\n</ul>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>外部的恶意攻击，用户不断发起不存在数据的请求。</p>\n<ul>\n<li>对不存在的数据，在缓存中保存一个空对象进行标记，防止相同 ID 再次访问 DB。不过有时这个方法并不能很好解决问题，可能导致缓存中存储大量无用数据。</li>\n<li>使用 BloomFilter 过滤器，BloomFilter 的特点是存在性检测，如果 BloomFilter 中不存在，那么数据一定不存在；如果 BloomFilter 中存在，实际数据也有可能会不存在。非常适合解决这类的问题。</li>\n</ul>\n<h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h3><p>某个热点数据失效时，大量针对这个数据的请求会穿透到数据源。</p>\n<ul>\n<li>可以使用互斥锁更新，保证同一个进程中针对同一个数据不会并发请求到 DB，减小 DB 压力。</li>\n<li>使用随机退避方式，失效时随机 sleep 一个很短的时间，再次查询，如果失败再执行更新。</li>\n</ul>\n<p>多个热点 key 同时失效，大量请求会穿透到数据源。</p>\n<ul>\n<li>可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。</li>\n</ul>\n<h3 id=\"缓存雪崩：缓存挂掉\"><a href=\"#缓存雪崩：缓存挂掉\" class=\"headerlink\" title=\"缓存雪崩：缓存挂掉\"></a>缓存雪崩：缓存挂掉</h3><p>缓存挂掉，这时所有的请求都会穿透到 DB。</p>\n<ul>\n<li>使用快速失败的熔断策略，减少 DB 瞬间压力。</li>\n<li>使用主从模式和集群模式来尽量保证缓存服务的高可用。</li>\n</ul>"},{"title":"消息队列","_content":"\n## 应用场景\n解耦合、削峰填谷、异步\n\n## 消息协议\nAMQP\nJMS\n\n## 常用队列\n* ActiveMQ: 单机吞吐量万级，有较低概率丢失消息\n* RabbitMQ: Erlang开发，单机吞吐万级\n* RocketMQ: 阿里开源，单机吞吐量10W级\n* Kafka: Scala开发, 单机吞吐量10W级，发布订阅模式","source":"_posts/20181010.md","raw":"---\ntitle: 消息队列\ncategory: 应用模块\ntag: [消息队列,中间件]\n---\n\n## 应用场景\n解耦合、削峰填谷、异步\n\n## 消息协议\nAMQP\nJMS\n\n## 常用队列\n* ActiveMQ: 单机吞吐量万级，有较低概率丢失消息\n* RabbitMQ: Erlang开发，单机吞吐万级\n* RocketMQ: 阿里开源，单机吞吐量10W级\n* Kafka: Scala开发, 单机吞吐量10W级，发布订阅模式","slug":"20181010","published":1,"date":"2021-07-28T12:08:06.942Z","updated":"2021-07-29T13:17:55.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgt3000qni0m7irrvs5m","content":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>解耦合、削峰填谷、异步</p>\n<h2 id=\"消息协议\"><a href=\"#消息协议\" class=\"headerlink\" title=\"消息协议\"></a>消息协议</h2><p>AMQP<br>JMS</p>\n<h2 id=\"常用队列\"><a href=\"#常用队列\" class=\"headerlink\" title=\"常用队列\"></a>常用队列</h2><ul>\n<li>ActiveMQ: 单机吞吐量万级，有较低概率丢失消息</li>\n<li>RabbitMQ: Erlang开发，单机吞吐万级</li>\n<li>RocketMQ: 阿里开源，单机吞吐量10W级</li>\n<li>Kafka: Scala开发, 单机吞吐量10W级，发布订阅模式</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>解耦合、削峰填谷、异步</p>\n<h2 id=\"消息协议\"><a href=\"#消息协议\" class=\"headerlink\" title=\"消息协议\"></a>消息协议</h2><p>AMQP<br>JMS</p>\n<h2 id=\"常用队列\"><a href=\"#常用队列\" class=\"headerlink\" title=\"常用队列\"></a>常用队列</h2><ul>\n<li>ActiveMQ: 单机吞吐量万级，有较低概率丢失消息</li>\n<li>RabbitMQ: Erlang开发，单机吞吐万级</li>\n<li>RocketMQ: 阿里开源，单机吞吐量10W级</li>\n<li>Kafka: Scala开发, 单机吞吐量10W级，发布订阅模式</li>\n</ul>\n"},{"title":"数据库","_content":"\n## 常用数据库\n\n* 关系型数据库\n    * MySQL\n    * Oracle\n    * PostgreSQL(PGSQL)\n    * MariaDB\n* NoSQL\n    * MongoDB\n    * HBase\n    * Cassandra\n    * Pika\n* NewSQL\n    * TiDB\n    * OceanBase\n    \n## 事务\n### 事务特性\nA(Atomicity)C(Consistency)I(Isolation)D(Durability)\n\n- 原子性：指事务由原子的操作序列组成，所有操作要么全部成功，要么全部失败回滚。\n- 一致性：指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处以一致性状态。比如在做多表操作时，多个表要么都是事务后新的值，要么都是事务前的旧值。\n- 隔离性：指多个用户并发访问数据库时，数据库为每个用户执行的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n- 持久性：指一个事务一旦提交并执行成功，那么对数据库中数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n### 并发问题\n\n脏读：指在一个事务处理过程里读取了另一个未提交的事务中的数据。\n\n不可重复读：指对于数据库中某个数据，一个事务范围内多次查询返回了不同的数据值，这是由于在多次查询之间，有其他事务修改了数据并进行了提交。\n\n幻读：指一个事务中执行两次完全相同的查询时，第二次查询所返回的结果集跟第一个查询不相同。与不可重复读的区别在于，不可重复读是对同一条记录，两次读取的值不同。而幻读是记录的增加或删除，导致两次相同条件获取的结果记录数不同。\n\n### 隔离级别\n* 读未提交：最低的隔离级别，可以读取到其他事务未提交的内容。所有并发问题都有可能发生。\n* 读已提交：就是只能读取到其他事务已经提交的数据。可以解决脏读问题。\n* 可重复读：MySQL默认隔离级别，可以保证整个事务过程中，对同数据的多次读取结果是相同的。这个级别可以解决脏读和不可重复读的问题。\n* 串行化：最高的隔离级别，所有事务操作都依次顺序执行。这个级别会导致并发度下降，性能最差。不过这个级别可以解决前面提到的所有并发问题。\n\n### 事务分类\n* 扁平化事务：使用最多，所有的操作都在同一层次，不能提交或者回滚事务的某一部分，要么都成功，要么都回滚。\n* 带保存点的扁平化事务：允许事务在执行过程中回滚到较早的状态，而不是全部回滚。通过在事务中插入保存点，当操作失败后，可以选择回滚到最近的保存点处。\n* 链事务：在事务提交时，会将必要的上下文隐式传递给下一个事务，当事务失败时就可以回滚到最近的事务。不过，链事务只能回滚到最近的保存点，而带保存点的扁平化事务是可以回滚到任意的保存点。\n* 嵌套事务：由顶层事务和子事务构成，类似于树的结构。一般顶层事务负责逻辑管理，子事务负责具体的工作，子事务可以提交，但真正提交要等到父事务提交，如果上层事务回滚，那么所有的子事务都会回滚。\n\n### 分布式事务解决方案\n\n* XA协议：是保证强一致性的刚性事务。实现方式有两段式提交和三段式提交。两段式提交需要有一个事务协调者来保证所有的事务参与者都完成了第一阶段的准备工作。如果协调者收到所有参与者都准备好的消息，就会通知所有的事务执行第二阶段提交。一般场景下两段式提交已经能够很好得解决分布式事务了，然而两阶段在即使只有一个进程发生故障时，也会导致整个系统存在较长时间的阻塞。三段式提交通过增加 pre-commit 阶段来减少前面提到的系统阻塞的时间。三段式提交很少在实际中使用，简单了解就可以了。\n* TCC：是满足最终一致性的柔性事务方案。TCC 采用补偿机制，核心思想是对每个操作，都要注册对应的确认和补偿操作。它分为三个阶段：Try 阶段主要对业务系统进行检测及资源预留；Confirm 阶段对业务系统做确认提交；Cancel 阶段是在业务执行错误，执行回滚，释放预留的资源。\n* 消息一致性：是将本地操作和发送消息放在一个事务中，保证本地操作和消息发送要么都成功要么都失败。下游应用订阅消息，收到消息后执行对应操作。\n* GTS：阿里云中的全局事务服务 GTS，对应的开源版本是 Fescar。Fescar 基于两段式提交进行改良，剥离了分布式事务方案对数据库在协议支持上的要求。使用 Fescar 的前提是分支事务中涉及的资源，必须是支持 ACID 事务的关系型数据库。分支的提交和回滚机制，都依赖于本地事务来保障。 Fescar 的实现目前还存在一些局限，比如事务隔离级别最高支持到读已提交级别。","source":"_posts/20181023.md","raw":"---\ntitle: 数据库\ncategory: 应用模块\ntag: 数据库\n---\n\n## 常用数据库\n\n* 关系型数据库\n    * MySQL\n    * Oracle\n    * PostgreSQL(PGSQL)\n    * MariaDB\n* NoSQL\n    * MongoDB\n    * HBase\n    * Cassandra\n    * Pika\n* NewSQL\n    * TiDB\n    * OceanBase\n    \n## 事务\n### 事务特性\nA(Atomicity)C(Consistency)I(Isolation)D(Durability)\n\n- 原子性：指事务由原子的操作序列组成，所有操作要么全部成功，要么全部失败回滚。\n- 一致性：指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处以一致性状态。比如在做多表操作时，多个表要么都是事务后新的值，要么都是事务前的旧值。\n- 隔离性：指多个用户并发访问数据库时，数据库为每个用户执行的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n- 持久性：指一个事务一旦提交并执行成功，那么对数据库中数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n### 并发问题\n\n脏读：指在一个事务处理过程里读取了另一个未提交的事务中的数据。\n\n不可重复读：指对于数据库中某个数据，一个事务范围内多次查询返回了不同的数据值，这是由于在多次查询之间，有其他事务修改了数据并进行了提交。\n\n幻读：指一个事务中执行两次完全相同的查询时，第二次查询所返回的结果集跟第一个查询不相同。与不可重复读的区别在于，不可重复读是对同一条记录，两次读取的值不同。而幻读是记录的增加或删除，导致两次相同条件获取的结果记录数不同。\n\n### 隔离级别\n* 读未提交：最低的隔离级别，可以读取到其他事务未提交的内容。所有并发问题都有可能发生。\n* 读已提交：就是只能读取到其他事务已经提交的数据。可以解决脏读问题。\n* 可重复读：MySQL默认隔离级别，可以保证整个事务过程中，对同数据的多次读取结果是相同的。这个级别可以解决脏读和不可重复读的问题。\n* 串行化：最高的隔离级别，所有事务操作都依次顺序执行。这个级别会导致并发度下降，性能最差。不过这个级别可以解决前面提到的所有并发问题。\n\n### 事务分类\n* 扁平化事务：使用最多，所有的操作都在同一层次，不能提交或者回滚事务的某一部分，要么都成功，要么都回滚。\n* 带保存点的扁平化事务：允许事务在执行过程中回滚到较早的状态，而不是全部回滚。通过在事务中插入保存点，当操作失败后，可以选择回滚到最近的保存点处。\n* 链事务：在事务提交时，会将必要的上下文隐式传递给下一个事务，当事务失败时就可以回滚到最近的事务。不过，链事务只能回滚到最近的保存点，而带保存点的扁平化事务是可以回滚到任意的保存点。\n* 嵌套事务：由顶层事务和子事务构成，类似于树的结构。一般顶层事务负责逻辑管理，子事务负责具体的工作，子事务可以提交，但真正提交要等到父事务提交，如果上层事务回滚，那么所有的子事务都会回滚。\n\n### 分布式事务解决方案\n\n* XA协议：是保证强一致性的刚性事务。实现方式有两段式提交和三段式提交。两段式提交需要有一个事务协调者来保证所有的事务参与者都完成了第一阶段的准备工作。如果协调者收到所有参与者都准备好的消息，就会通知所有的事务执行第二阶段提交。一般场景下两段式提交已经能够很好得解决分布式事务了，然而两阶段在即使只有一个进程发生故障时，也会导致整个系统存在较长时间的阻塞。三段式提交通过增加 pre-commit 阶段来减少前面提到的系统阻塞的时间。三段式提交很少在实际中使用，简单了解就可以了。\n* TCC：是满足最终一致性的柔性事务方案。TCC 采用补偿机制，核心思想是对每个操作，都要注册对应的确认和补偿操作。它分为三个阶段：Try 阶段主要对业务系统进行检测及资源预留；Confirm 阶段对业务系统做确认提交；Cancel 阶段是在业务执行错误，执行回滚，释放预留的资源。\n* 消息一致性：是将本地操作和发送消息放在一个事务中，保证本地操作和消息发送要么都成功要么都失败。下游应用订阅消息，收到消息后执行对应操作。\n* GTS：阿里云中的全局事务服务 GTS，对应的开源版本是 Fescar。Fescar 基于两段式提交进行改良，剥离了分布式事务方案对数据库在协议支持上的要求。使用 Fescar 的前提是分支事务中涉及的资源，必须是支持 ACID 事务的关系型数据库。分支的提交和回滚机制，都依赖于本地事务来保障。 Fescar 的实现目前还存在一些局限，比如事务隔离级别最高支持到读已提交级别。","slug":"20181023","published":1,"date":"2021-07-28T12:08:06.942Z","updated":"2021-07-29T22:51:08.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgt5000vni0mvdk699op","content":"<h2 id=\"常用数据库\"><a href=\"#常用数据库\" class=\"headerlink\" title=\"常用数据库\"></a>常用数据库</h2><ul>\n<li>关系型数据库<ul>\n<li>MySQL</li>\n<li>Oracle</li>\n<li>PostgreSQL(PGSQL)</li>\n<li>MariaDB</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB</li>\n<li>HBase</li>\n<li>Cassandra</li>\n<li>Pika</li>\n</ul>\n</li>\n<li>NewSQL<ul>\n<li>TiDB</li>\n<li>OceanBase</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h3 id=\"事务特性\"><a href=\"#事务特性\" class=\"headerlink\" title=\"事务特性\"></a>事务特性</h3><p>A(Atomicity)C(Consistency)I(Isolation)D(Durability)</p>\n<ul>\n<li>原子性：指事务由原子的操作序列组成，所有操作要么全部成功，要么全部失败回滚。</li>\n<li>一致性：指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处以一致性状态。比如在做多表操作时，多个表要么都是事务后新的值，要么都是事务前的旧值。</li>\n<li>隔离性：指多个用户并发访问数据库时，数据库为每个用户执行的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li>\n<li>持久性：指一个事务一旦提交并执行成功，那么对数据库中数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li>\n</ul>\n<h3 id=\"并发问题\"><a href=\"#并发问题\" class=\"headerlink\" title=\"并发问题\"></a>并发问题</h3><p>脏读：指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p>\n<p>不可重复读：指对于数据库中某个数据，一个事务范围内多次查询返回了不同的数据值，这是由于在多次查询之间，有其他事务修改了数据并进行了提交。</p>\n<p>幻读：指一个事务中执行两次完全相同的查询时，第二次查询所返回的结果集跟第一个查询不相同。与不可重复读的区别在于，不可重复读是对同一条记录，两次读取的值不同。而幻读是记录的增加或删除，导致两次相同条件获取的结果记录数不同。</p>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><ul>\n<li>读未提交：最低的隔离级别，可以读取到其他事务未提交的内容。所有并发问题都有可能发生。</li>\n<li>读已提交：就是只能读取到其他事务已经提交的数据。可以解决脏读问题。</li>\n<li>可重复读：MySQL默认隔离级别，可以保证整个事务过程中，对同数据的多次读取结果是相同的。这个级别可以解决脏读和不可重复读的问题。</li>\n<li>串行化：最高的隔离级别，所有事务操作都依次顺序执行。这个级别会导致并发度下降，性能最差。不过这个级别可以解决前面提到的所有并发问题。</li>\n</ul>\n<h3 id=\"事务分类\"><a href=\"#事务分类\" class=\"headerlink\" title=\"事务分类\"></a>事务分类</h3><ul>\n<li>扁平化事务：使用最多，所有的操作都在同一层次，不能提交或者回滚事务的某一部分，要么都成功，要么都回滚。</li>\n<li>带保存点的扁平化事务：允许事务在执行过程中回滚到较早的状态，而不是全部回滚。通过在事务中插入保存点，当操作失败后，可以选择回滚到最近的保存点处。</li>\n<li>链事务：在事务提交时，会将必要的上下文隐式传递给下一个事务，当事务失败时就可以回滚到最近的事务。不过，链事务只能回滚到最近的保存点，而带保存点的扁平化事务是可以回滚到任意的保存点。</li>\n<li>嵌套事务：由顶层事务和子事务构成，类似于树的结构。一般顶层事务负责逻辑管理，子事务负责具体的工作，子事务可以提交，但真正提交要等到父事务提交，如果上层事务回滚，那么所有的子事务都会回滚。</li>\n</ul>\n<h3 id=\"分布式事务解决方案\"><a href=\"#分布式事务解决方案\" class=\"headerlink\" title=\"分布式事务解决方案\"></a>分布式事务解决方案</h3><ul>\n<li>XA协议：是保证强一致性的刚性事务。实现方式有两段式提交和三段式提交。两段式提交需要有一个事务协调者来保证所有的事务参与者都完成了第一阶段的准备工作。如果协调者收到所有参与者都准备好的消息，就会通知所有的事务执行第二阶段提交。一般场景下两段式提交已经能够很好得解决分布式事务了，然而两阶段在即使只有一个进程发生故障时，也会导致整个系统存在较长时间的阻塞。三段式提交通过增加 pre-commit 阶段来减少前面提到的系统阻塞的时间。三段式提交很少在实际中使用，简单了解就可以了。</li>\n<li>TCC：是满足最终一致性的柔性事务方案。TCC 采用补偿机制，核心思想是对每个操作，都要注册对应的确认和补偿操作。它分为三个阶段：Try 阶段主要对业务系统进行检测及资源预留；Confirm 阶段对业务系统做确认提交；Cancel 阶段是在业务执行错误，执行回滚，释放预留的资源。</li>\n<li>消息一致性：是将本地操作和发送消息放在一个事务中，保证本地操作和消息发送要么都成功要么都失败。下游应用订阅消息，收到消息后执行对应操作。</li>\n<li>GTS：阿里云中的全局事务服务 GTS，对应的开源版本是 Fescar。Fescar 基于两段式提交进行改良，剥离了分布式事务方案对数据库在协议支持上的要求。使用 Fescar 的前提是分支事务中涉及的资源，必须是支持 ACID 事务的关系型数据库。分支的提交和回滚机制，都依赖于本地事务来保障。 Fescar 的实现目前还存在一些局限，比如事务隔离级别最高支持到读已提交级别。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用数据库\"><a href=\"#常用数据库\" class=\"headerlink\" title=\"常用数据库\"></a>常用数据库</h2><ul>\n<li>关系型数据库<ul>\n<li>MySQL</li>\n<li>Oracle</li>\n<li>PostgreSQL(PGSQL)</li>\n<li>MariaDB</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB</li>\n<li>HBase</li>\n<li>Cassandra</li>\n<li>Pika</li>\n</ul>\n</li>\n<li>NewSQL<ul>\n<li>TiDB</li>\n<li>OceanBase</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h3 id=\"事务特性\"><a href=\"#事务特性\" class=\"headerlink\" title=\"事务特性\"></a>事务特性</h3><p>A(Atomicity)C(Consistency)I(Isolation)D(Durability)</p>\n<ul>\n<li>原子性：指事务由原子的操作序列组成，所有操作要么全部成功，要么全部失败回滚。</li>\n<li>一致性：指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处以一致性状态。比如在做多表操作时，多个表要么都是事务后新的值，要么都是事务前的旧值。</li>\n<li>隔离性：指多个用户并发访问数据库时，数据库为每个用户执行的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li>\n<li>持久性：指一个事务一旦提交并执行成功，那么对数据库中数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li>\n</ul>\n<h3 id=\"并发问题\"><a href=\"#并发问题\" class=\"headerlink\" title=\"并发问题\"></a>并发问题</h3><p>脏读：指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p>\n<p>不可重复读：指对于数据库中某个数据，一个事务范围内多次查询返回了不同的数据值，这是由于在多次查询之间，有其他事务修改了数据并进行了提交。</p>\n<p>幻读：指一个事务中执行两次完全相同的查询时，第二次查询所返回的结果集跟第一个查询不相同。与不可重复读的区别在于，不可重复读是对同一条记录，两次读取的值不同。而幻读是记录的增加或删除，导致两次相同条件获取的结果记录数不同。</p>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><ul>\n<li>读未提交：最低的隔离级别，可以读取到其他事务未提交的内容。所有并发问题都有可能发生。</li>\n<li>读已提交：就是只能读取到其他事务已经提交的数据。可以解决脏读问题。</li>\n<li>可重复读：MySQL默认隔离级别，可以保证整个事务过程中，对同数据的多次读取结果是相同的。这个级别可以解决脏读和不可重复读的问题。</li>\n<li>串行化：最高的隔离级别，所有事务操作都依次顺序执行。这个级别会导致并发度下降，性能最差。不过这个级别可以解决前面提到的所有并发问题。</li>\n</ul>\n<h3 id=\"事务分类\"><a href=\"#事务分类\" class=\"headerlink\" title=\"事务分类\"></a>事务分类</h3><ul>\n<li>扁平化事务：使用最多，所有的操作都在同一层次，不能提交或者回滚事务的某一部分，要么都成功，要么都回滚。</li>\n<li>带保存点的扁平化事务：允许事务在执行过程中回滚到较早的状态，而不是全部回滚。通过在事务中插入保存点，当操作失败后，可以选择回滚到最近的保存点处。</li>\n<li>链事务：在事务提交时，会将必要的上下文隐式传递给下一个事务，当事务失败时就可以回滚到最近的事务。不过，链事务只能回滚到最近的保存点，而带保存点的扁平化事务是可以回滚到任意的保存点。</li>\n<li>嵌套事务：由顶层事务和子事务构成，类似于树的结构。一般顶层事务负责逻辑管理，子事务负责具体的工作，子事务可以提交，但真正提交要等到父事务提交，如果上层事务回滚，那么所有的子事务都会回滚。</li>\n</ul>\n<h3 id=\"分布式事务解决方案\"><a href=\"#分布式事务解决方案\" class=\"headerlink\" title=\"分布式事务解决方案\"></a>分布式事务解决方案</h3><ul>\n<li>XA协议：是保证强一致性的刚性事务。实现方式有两段式提交和三段式提交。两段式提交需要有一个事务协调者来保证所有的事务参与者都完成了第一阶段的准备工作。如果协调者收到所有参与者都准备好的消息，就会通知所有的事务执行第二阶段提交。一般场景下两段式提交已经能够很好得解决分布式事务了，然而两阶段在即使只有一个进程发生故障时，也会导致整个系统存在较长时间的阻塞。三段式提交通过增加 pre-commit 阶段来减少前面提到的系统阻塞的时间。三段式提交很少在实际中使用，简单了解就可以了。</li>\n<li>TCC：是满足最终一致性的柔性事务方案。TCC 采用补偿机制，核心思想是对每个操作，都要注册对应的确认和补偿操作。它分为三个阶段：Try 阶段主要对业务系统进行检测及资源预留；Confirm 阶段对业务系统做确认提交；Cancel 阶段是在业务执行错误，执行回滚，释放预留的资源。</li>\n<li>消息一致性：是将本地操作和发送消息放在一个事务中，保证本地操作和消息发送要么都成功要么都失败。下游应用订阅消息，收到消息后执行对应操作。</li>\n<li>GTS：阿里云中的全局事务服务 GTS，对应的开源版本是 Fescar。Fescar 基于两段式提交进行改良，剥离了分布式事务方案对数据库在协议支持上的要求。使用 Fescar 的前提是分支事务中涉及的资源，必须是支持 ACID 事务的关系型数据库。分支的提交和回滚机制，都依赖于本地事务来保障。 Fescar 的实现目前还存在一些局限，比如事务隔离级别最高支持到读已提交级别。</li>\n</ul>\n"},{"title":"Redis","_content":"\n采用单线程模式处理请求，支持持久化，支持多种数据格式，能够提供高可用服务。\n<!--more-->\n\n## 数据结构实现\n![Redis数据结构](/img/posts/Redis数据结构.png)\n在 Redis 中，所有的对象都被封装成了 redisObject，如图中浅绿的模块。redisObject 包括了对象的类型，就是 Redis 支持的 string、hash、list、set 和 sorted set 5种类型。另外 redisObject 还包括了具体对象的存储方式。\n\n### string\n最常使用的类型，底层使用 **SDS** 存储。\n\n### list\n\n3.2 版本前，当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用 **ZipList**，否则使用 **LinkedList**。\n\n3.2 版本后，基于 **QuickList** 实现。\n\n### hash\n当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用**ZipList**，否则使用 **HashTable**。\n\n### set\n当集合中元素小于 512 且所有的数据都是数值类型时使用 **IntSet**，否则会使用 **HashTable**。\n\n### sorted set\n当有序集合中元素数量小于 128 个并且所有元素长度都小于 64 字节时使用 **ZipList**，否则使用 **SkipList**。\n\n**注意**：Redis 的内存分配是使用 **jemalloc** 进行分配。jemalloc 将内存空间划分为小、大、巨大三个范围，并在范围中划分了小的内存块，当存储数据时，选择大小最合适的内存块进行分配，有利于减小内存碎片。\n\n## 底层数据结构详解\n\n### SDS\n\n动态字符串，类似于 Java 中的 ArrayList，可以通过预分配冗余空间的方式来减少内存的频繁分配。\n\n### ZipList\n\n结构为：数据长度+数据，存储在一段连续的内存上，存储效率高，但是它不利于修改操作，适用于数据较少的情况。\n\n### LinkedList\n\n结构为：双向链表，在插入节点上复杂度很低，但它的内存开销很大，每个节点的地址不连续，容易产生内存碎片。\n\n### QuickList\n\n结构为 LinkedList + ZipList。主体为 LinkedList，它的每一个节点都是一个 ZipList。\n\n### HashTable\n\n哈希表\n\n### IntSet\n\n整数集合\n\n### SkipList\n\n结构为：单链表+多级索引\n\n## 高可用\n\n### 主从同步\n读写分离\n\n### Cluster 集群\n横向扩展\nRedis Cluster 使用分片机制，在内部分为 16384 个 slot 插槽，分布在所有 master 节点上，每个 master 节点负责一部分 slot。数据操作时按 key 做 CRC16 来计算在哪个 slot，由哪个 master 进行处理。数据的冗余是通过 slave 节点来保障。\n\n### Sentinel 哨兵\n通过 Sentinel 哨兵来监控 Redis 主服务器的状态。当主挂掉时，在从节点中根据一定策略选出新主，并调整其他从 SlaveOf 到新主。\n选主策略：\n* slave 的 priority 设置的越低，优先级越高；\n* 同等情况下，slave 复制的数据越多优先级越高；\n* 相同的条件下 RunId 越小越容易被选中。\nsentinel 也会进行多实例部署，sentinel 之间通过 Raft 协议来保证自身的高可用。\n\n## 持久化\nRDB：把内存中的数据集以快照形式写入磁盘，实际操作是通过 fork 子进程执行，采用二进制压缩存储。适合用来做灾备。\nAOF：以文本日志的形式记录 Redis 处理的每一个写入或删除操作。AOF 要大于 RDB，AOF 在运行效率上往往会慢于 RDB。\n\n## 功能\n### Bitmap\n位图是支持按 bit 位来存储信息，可以用来实现 BloomFilter。\n\n### HyperLogLog\n提供不精确的去重计数功能，比较适合用来做大规模数据的去重统计，例如统计 UV。\n\n### Geospatial\n可以用来保存地理位置，并作位置距离计算或者根据半径计算位置等。这三个其实也可以算作一种数据结构。\n\n### pub/sub\n订阅发布功能，可以用作简单的消息队列。\n\n### Pipeline\n以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。\n\n### Lua脚本\n支持提交 Lua 脚本来执行一系列的功能。\n\n### 事务\nRedis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去。","source":"_posts/20181111.md","raw":"---\ntitle: Redis\ncategory: 应用模块\ntag: [缓存,中间件]\n---\n\n采用单线程模式处理请求，支持持久化，支持多种数据格式，能够提供高可用服务。\n<!--more-->\n\n## 数据结构实现\n![Redis数据结构](/img/posts/Redis数据结构.png)\n在 Redis 中，所有的对象都被封装成了 redisObject，如图中浅绿的模块。redisObject 包括了对象的类型，就是 Redis 支持的 string、hash、list、set 和 sorted set 5种类型。另外 redisObject 还包括了具体对象的存储方式。\n\n### string\n最常使用的类型，底层使用 **SDS** 存储。\n\n### list\n\n3.2 版本前，当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用 **ZipList**，否则使用 **LinkedList**。\n\n3.2 版本后，基于 **QuickList** 实现。\n\n### hash\n当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用**ZipList**，否则使用 **HashTable**。\n\n### set\n当集合中元素小于 512 且所有的数据都是数值类型时使用 **IntSet**，否则会使用 **HashTable**。\n\n### sorted set\n当有序集合中元素数量小于 128 个并且所有元素长度都小于 64 字节时使用 **ZipList**，否则使用 **SkipList**。\n\n**注意**：Redis 的内存分配是使用 **jemalloc** 进行分配。jemalloc 将内存空间划分为小、大、巨大三个范围，并在范围中划分了小的内存块，当存储数据时，选择大小最合适的内存块进行分配，有利于减小内存碎片。\n\n## 底层数据结构详解\n\n### SDS\n\n动态字符串，类似于 Java 中的 ArrayList，可以通过预分配冗余空间的方式来减少内存的频繁分配。\n\n### ZipList\n\n结构为：数据长度+数据，存储在一段连续的内存上，存储效率高，但是它不利于修改操作，适用于数据较少的情况。\n\n### LinkedList\n\n结构为：双向链表，在插入节点上复杂度很低，但它的内存开销很大，每个节点的地址不连续，容易产生内存碎片。\n\n### QuickList\n\n结构为 LinkedList + ZipList。主体为 LinkedList，它的每一个节点都是一个 ZipList。\n\n### HashTable\n\n哈希表\n\n### IntSet\n\n整数集合\n\n### SkipList\n\n结构为：单链表+多级索引\n\n## 高可用\n\n### 主从同步\n读写分离\n\n### Cluster 集群\n横向扩展\nRedis Cluster 使用分片机制，在内部分为 16384 个 slot 插槽，分布在所有 master 节点上，每个 master 节点负责一部分 slot。数据操作时按 key 做 CRC16 来计算在哪个 slot，由哪个 master 进行处理。数据的冗余是通过 slave 节点来保障。\n\n### Sentinel 哨兵\n通过 Sentinel 哨兵来监控 Redis 主服务器的状态。当主挂掉时，在从节点中根据一定策略选出新主，并调整其他从 SlaveOf 到新主。\n选主策略：\n* slave 的 priority 设置的越低，优先级越高；\n* 同等情况下，slave 复制的数据越多优先级越高；\n* 相同的条件下 RunId 越小越容易被选中。\nsentinel 也会进行多实例部署，sentinel 之间通过 Raft 协议来保证自身的高可用。\n\n## 持久化\nRDB：把内存中的数据集以快照形式写入磁盘，实际操作是通过 fork 子进程执行，采用二进制压缩存储。适合用来做灾备。\nAOF：以文本日志的形式记录 Redis 处理的每一个写入或删除操作。AOF 要大于 RDB，AOF 在运行效率上往往会慢于 RDB。\n\n## 功能\n### Bitmap\n位图是支持按 bit 位来存储信息，可以用来实现 BloomFilter。\n\n### HyperLogLog\n提供不精确的去重计数功能，比较适合用来做大规模数据的去重统计，例如统计 UV。\n\n### Geospatial\n可以用来保存地理位置，并作位置距离计算或者根据半径计算位置等。这三个其实也可以算作一种数据结构。\n\n### pub/sub\n订阅发布功能，可以用作简单的消息队列。\n\n### Pipeline\n以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。\n\n### Lua脚本\n支持提交 Lua 脚本来执行一系列的功能。\n\n### 事务\nRedis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去。","slug":"20181111","published":1,"date":"2021-07-29T12:12:55.020Z","updated":"2021-07-31T06:01:12.182Z","_id":"ckrpxlgt6000wni0m6co0xalq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>采用单线程模式处理请求，支持持久化，支持多种数据格式，能够提供高可用服务。<br><a id=\"more\"></a></p>\n<h2 id=\"数据结构实现\"><a href=\"#数据结构实现\" class=\"headerlink\" title=\"数据结构实现\"></a>数据结构实现</h2><p><img src=\"/img/posts/Redis数据结构.png\" alt=\"Redis数据结构\"><br>在 Redis 中，所有的对象都被封装成了 redisObject，如图中浅绿的模块。redisObject 包括了对象的类型，就是 Redis 支持的 string、hash、list、set 和 sorted set 5种类型。另外 redisObject 还包括了具体对象的存储方式。</p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>最常使用的类型，底层使用 <strong>SDS</strong> 存储。</p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>3.2 版本前，当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用 <strong>ZipList</strong>，否则使用 <strong>LinkedList</strong>。</p>\n<p>3.2 版本后，基于 <strong>QuickList</strong> 实现。</p>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用<strong>ZipList</strong>，否则使用 <strong>HashTable</strong>。</p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>当集合中元素小于 512 且所有的数据都是数值类型时使用 <strong>IntSet</strong>，否则会使用 <strong>HashTable</strong>。</p>\n<h3 id=\"sorted-set\"><a href=\"#sorted-set\" class=\"headerlink\" title=\"sorted set\"></a>sorted set</h3><p>当有序集合中元素数量小于 128 个并且所有元素长度都小于 64 字节时使用 <strong>ZipList</strong>，否则使用 <strong>SkipList</strong>。</p>\n<p><strong>注意</strong>：Redis 的内存分配是使用 <strong>jemalloc</strong> 进行分配。jemalloc 将内存空间划分为小、大、巨大三个范围，并在范围中划分了小的内存块，当存储数据时，选择大小最合适的内存块进行分配，有利于减小内存碎片。</p>\n<h2 id=\"底层数据结构详解\"><a href=\"#底层数据结构详解\" class=\"headerlink\" title=\"底层数据结构详解\"></a>底层数据结构详解</h2><h3 id=\"SDS\"><a href=\"#SDS\" class=\"headerlink\" title=\"SDS\"></a>SDS</h3><p>动态字符串，类似于 Java 中的 ArrayList，可以通过预分配冗余空间的方式来减少内存的频繁分配。</p>\n<h3 id=\"ZipList\"><a href=\"#ZipList\" class=\"headerlink\" title=\"ZipList\"></a>ZipList</h3><p>结构为：数据长度+数据，存储在一段连续的内存上，存储效率高，但是它不利于修改操作，适用于数据较少的情况。</p>\n<h3 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h3><p>结构为：双向链表，在插入节点上复杂度很低，但它的内存开销很大，每个节点的地址不连续，容易产生内存碎片。</p>\n<h3 id=\"QuickList\"><a href=\"#QuickList\" class=\"headerlink\" title=\"QuickList\"></a>QuickList</h3><p>结构为 LinkedList + ZipList。主体为 LinkedList，它的每一个节点都是一个 ZipList。</p>\n<h3 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h3><p>哈希表</p>\n<h3 id=\"IntSet\"><a href=\"#IntSet\" class=\"headerlink\" title=\"IntSet\"></a>IntSet</h3><p>整数集合</p>\n<h3 id=\"SkipList\"><a href=\"#SkipList\" class=\"headerlink\" title=\"SkipList\"></a>SkipList</h3><p>结构为：单链表+多级索引</p>\n<h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><h3 id=\"主从同步\"><a href=\"#主从同步\" class=\"headerlink\" title=\"主从同步\"></a>主从同步</h3><p>读写分离</p>\n<h3 id=\"Cluster-集群\"><a href=\"#Cluster-集群\" class=\"headerlink\" title=\"Cluster 集群\"></a>Cluster 集群</h3><p>横向扩展<br>Redis Cluster 使用分片机制，在内部分为 16384 个 slot 插槽，分布在所有 master 节点上，每个 master 节点负责一部分 slot。数据操作时按 key 做 CRC16 来计算在哪个 slot，由哪个 master 进行处理。数据的冗余是通过 slave 节点来保障。</p>\n<h3 id=\"Sentinel-哨兵\"><a href=\"#Sentinel-哨兵\" class=\"headerlink\" title=\"Sentinel 哨兵\"></a>Sentinel 哨兵</h3><p>通过 Sentinel 哨兵来监控 Redis 主服务器的状态。当主挂掉时，在从节点中根据一定策略选出新主，并调整其他从 SlaveOf 到新主。<br>选主策略：</p>\n<ul>\n<li>slave 的 priority 设置的越低，优先级越高；</li>\n<li>同等情况下，slave 复制的数据越多优先级越高；</li>\n<li>相同的条件下 RunId 越小越容易被选中。<br>sentinel 也会进行多实例部署，sentinel 之间通过 Raft 协议来保证自身的高可用。</li>\n</ul>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p>RDB：把内存中的数据集以快照形式写入磁盘，实际操作是通过 fork 子进程执行，采用二进制压缩存储。适合用来做灾备。<br>AOF：以文本日志的形式记录 Redis 处理的每一个写入或删除操作。AOF 要大于 RDB，AOF 在运行效率上往往会慢于 RDB。</p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><h3 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h3><p>位图是支持按 bit 位来存储信息，可以用来实现 BloomFilter。</p>\n<h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><p>提供不精确的去重计数功能，比较适合用来做大规模数据的去重统计，例如统计 UV。</p>\n<h3 id=\"Geospatial\"><a href=\"#Geospatial\" class=\"headerlink\" title=\"Geospatial\"></a>Geospatial</h3><p>可以用来保存地理位置，并作位置距离计算或者根据半径计算位置等。这三个其实也可以算作一种数据结构。</p>\n<h3 id=\"pub-sub\"><a href=\"#pub-sub\" class=\"headerlink\" title=\"pub/sub\"></a>pub/sub</h3><p>订阅发布功能，可以用作简单的消息队列。</p>\n<h3 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h3><p>以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。</p>\n<h3 id=\"Lua脚本\"><a href=\"#Lua脚本\" class=\"headerlink\" title=\"Lua脚本\"></a>Lua脚本</h3><p>支持提交 Lua 脚本来执行一系列的功能。</p>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>Redis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去。</p>\n","site":{"data":{}},"excerpt":"<p>采用单线程模式处理请求，支持持久化，支持多种数据格式，能够提供高可用服务。<br>","more":"</p>\n<h2 id=\"数据结构实现\"><a href=\"#数据结构实现\" class=\"headerlink\" title=\"数据结构实现\"></a>数据结构实现</h2><p><img src=\"/img/posts/Redis数据结构.png\" alt=\"Redis数据结构\"><br>在 Redis 中，所有的对象都被封装成了 redisObject，如图中浅绿的模块。redisObject 包括了对象的类型，就是 Redis 支持的 string、hash、list、set 和 sorted set 5种类型。另外 redisObject 还包括了具体对象的存储方式。</p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>最常使用的类型，底层使用 <strong>SDS</strong> 存储。</p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>3.2 版本前，当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用 <strong>ZipList</strong>，否则使用 <strong>LinkedList</strong>。</p>\n<p>3.2 版本后，基于 <strong>QuickList</strong> 实现。</p>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用<strong>ZipList</strong>，否则使用 <strong>HashTable</strong>。</p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>当集合中元素小于 512 且所有的数据都是数值类型时使用 <strong>IntSet</strong>，否则会使用 <strong>HashTable</strong>。</p>\n<h3 id=\"sorted-set\"><a href=\"#sorted-set\" class=\"headerlink\" title=\"sorted set\"></a>sorted set</h3><p>当有序集合中元素数量小于 128 个并且所有元素长度都小于 64 字节时使用 <strong>ZipList</strong>，否则使用 <strong>SkipList</strong>。</p>\n<p><strong>注意</strong>：Redis 的内存分配是使用 <strong>jemalloc</strong> 进行分配。jemalloc 将内存空间划分为小、大、巨大三个范围，并在范围中划分了小的内存块，当存储数据时，选择大小最合适的内存块进行分配，有利于减小内存碎片。</p>\n<h2 id=\"底层数据结构详解\"><a href=\"#底层数据结构详解\" class=\"headerlink\" title=\"底层数据结构详解\"></a>底层数据结构详解</h2><h3 id=\"SDS\"><a href=\"#SDS\" class=\"headerlink\" title=\"SDS\"></a>SDS</h3><p>动态字符串，类似于 Java 中的 ArrayList，可以通过预分配冗余空间的方式来减少内存的频繁分配。</p>\n<h3 id=\"ZipList\"><a href=\"#ZipList\" class=\"headerlink\" title=\"ZipList\"></a>ZipList</h3><p>结构为：数据长度+数据，存储在一段连续的内存上，存储效率高，但是它不利于修改操作，适用于数据较少的情况。</p>\n<h3 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h3><p>结构为：双向链表，在插入节点上复杂度很低，但它的内存开销很大，每个节点的地址不连续，容易产生内存碎片。</p>\n<h3 id=\"QuickList\"><a href=\"#QuickList\" class=\"headerlink\" title=\"QuickList\"></a>QuickList</h3><p>结构为 LinkedList + ZipList。主体为 LinkedList，它的每一个节点都是一个 ZipList。</p>\n<h3 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h3><p>哈希表</p>\n<h3 id=\"IntSet\"><a href=\"#IntSet\" class=\"headerlink\" title=\"IntSet\"></a>IntSet</h3><p>整数集合</p>\n<h3 id=\"SkipList\"><a href=\"#SkipList\" class=\"headerlink\" title=\"SkipList\"></a>SkipList</h3><p>结构为：单链表+多级索引</p>\n<h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><h3 id=\"主从同步\"><a href=\"#主从同步\" class=\"headerlink\" title=\"主从同步\"></a>主从同步</h3><p>读写分离</p>\n<h3 id=\"Cluster-集群\"><a href=\"#Cluster-集群\" class=\"headerlink\" title=\"Cluster 集群\"></a>Cluster 集群</h3><p>横向扩展<br>Redis Cluster 使用分片机制，在内部分为 16384 个 slot 插槽，分布在所有 master 节点上，每个 master 节点负责一部分 slot。数据操作时按 key 做 CRC16 来计算在哪个 slot，由哪个 master 进行处理。数据的冗余是通过 slave 节点来保障。</p>\n<h3 id=\"Sentinel-哨兵\"><a href=\"#Sentinel-哨兵\" class=\"headerlink\" title=\"Sentinel 哨兵\"></a>Sentinel 哨兵</h3><p>通过 Sentinel 哨兵来监控 Redis 主服务器的状态。当主挂掉时，在从节点中根据一定策略选出新主，并调整其他从 SlaveOf 到新主。<br>选主策略：</p>\n<ul>\n<li>slave 的 priority 设置的越低，优先级越高；</li>\n<li>同等情况下，slave 复制的数据越多优先级越高；</li>\n<li>相同的条件下 RunId 越小越容易被选中。<br>sentinel 也会进行多实例部署，sentinel 之间通过 Raft 协议来保证自身的高可用。</li>\n</ul>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p>RDB：把内存中的数据集以快照形式写入磁盘，实际操作是通过 fork 子进程执行，采用二进制压缩存储。适合用来做灾备。<br>AOF：以文本日志的形式记录 Redis 处理的每一个写入或删除操作。AOF 要大于 RDB，AOF 在运行效率上往往会慢于 RDB。</p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><h3 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h3><p>位图是支持按 bit 位来存储信息，可以用来实现 BloomFilter。</p>\n<h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><p>提供不精确的去重计数功能，比较适合用来做大规模数据的去重统计，例如统计 UV。</p>\n<h3 id=\"Geospatial\"><a href=\"#Geospatial\" class=\"headerlink\" title=\"Geospatial\"></a>Geospatial</h3><p>可以用来保存地理位置，并作位置距离计算或者根据半径计算位置等。这三个其实也可以算作一种数据结构。</p>\n<h3 id=\"pub-sub\"><a href=\"#pub-sub\" class=\"headerlink\" title=\"pub/sub\"></a>pub/sub</h3><p>订阅发布功能，可以用作简单的消息队列。</p>\n<h3 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h3><p>以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。</p>\n<h3 id=\"Lua脚本\"><a href=\"#Lua脚本\" class=\"headerlink\" title=\"Lua脚本\"></a>Lua脚本</h3><p>支持提交 Lua 脚本来执行一系列的功能。</p>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>Redis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去。</p>"},{"title":"Kafka","_content":"\n## 生产消息\n生产者根据规则选择一个Partition写入\n* 轮询策略（默认规则）\n* 指定Partition\n* 指定key来根据Hash值选择Partition\n\n消息发送方式\n* 同步：默认方式\n* 异步：允许批量\n* oneway：不需要返回结果\n\n## 消费消息\n* Consumer按照Group来消费消息，topic中的每一条消息可以被多个Consumer Group消费；\n* 每个Partition在一个Group中只能由一个Consumer消费，通过Group Coordinator来管理Consumer实际负责消费哪个Partiton，默认支持轮询和Range分配。\n* Kafka在zk中保存了每个Topic中每个Partition在不同Group的消费偏移量offset。\n**注意**：分区数量一般要大于或等于消费者（同一Group）数量。否则，有的消费者会消费不到数据\n  \n## 经验\n### 集成Spring Kafka\n~~~\n<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n</dependency>\n~~~\n生产：使用 KafkaTemplte 生产消息，多个Kafka实例需生产消息时配置不同的KafkaTemplate\n消费：单条消费时直接使用 @KafkaListener 注解即可，批量消费需先配置containerFactory\n\n### 生产者\nack\n* -1或all\n* 0\n* 1\n\n### 消费者\n提高消费速度\n* 增加Consumer个数\n* 增加处理线程：定义一个线程池，Poll数据，将数据提交到线程池中，再次Poll数据。\n\n### 可视化\n[可视化工具下载地址](https://www.kafkatool.com/download.html)\n\n## 参考文章\n[CKafka常用参数配置指南](https://cloud.tencent.com/document/product/597/30203)\n[发布者最佳实践](https://help.aliyun.com/document_detail/68165.html?spm=a2c4g.11186623.6.761.1615358bafQjos)\n[订阅者最佳实践](https://help.aliyun.com/document_detail/68166.html?spm=a2c4g.11186623.6.762.4297203abkfLec)\n","source":"_posts/20181112.md","raw":"---\ntitle: Kafka\ncategory: 应用模块\ntag: [消息队列,中间件]\n---\n\n## 生产消息\n生产者根据规则选择一个Partition写入\n* 轮询策略（默认规则）\n* 指定Partition\n* 指定key来根据Hash值选择Partition\n\n消息发送方式\n* 同步：默认方式\n* 异步：允许批量\n* oneway：不需要返回结果\n\n## 消费消息\n* Consumer按照Group来消费消息，topic中的每一条消息可以被多个Consumer Group消费；\n* 每个Partition在一个Group中只能由一个Consumer消费，通过Group Coordinator来管理Consumer实际负责消费哪个Partiton，默认支持轮询和Range分配。\n* Kafka在zk中保存了每个Topic中每个Partition在不同Group的消费偏移量offset。\n**注意**：分区数量一般要大于或等于消费者（同一Group）数量。否则，有的消费者会消费不到数据\n  \n## 经验\n### 集成Spring Kafka\n~~~\n<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n</dependency>\n~~~\n生产：使用 KafkaTemplte 生产消息，多个Kafka实例需生产消息时配置不同的KafkaTemplate\n消费：单条消费时直接使用 @KafkaListener 注解即可，批量消费需先配置containerFactory\n\n### 生产者\nack\n* -1或all\n* 0\n* 1\n\n### 消费者\n提高消费速度\n* 增加Consumer个数\n* 增加处理线程：定义一个线程池，Poll数据，将数据提交到线程池中，再次Poll数据。\n\n### 可视化\n[可视化工具下载地址](https://www.kafkatool.com/download.html)\n\n## 参考文章\n[CKafka常用参数配置指南](https://cloud.tencent.com/document/product/597/30203)\n[发布者最佳实践](https://help.aliyun.com/document_detail/68165.html?spm=a2c4g.11186623.6.761.1615358bafQjos)\n[订阅者最佳实践](https://help.aliyun.com/document_detail/68166.html?spm=a2c4g.11186623.6.762.4297203abkfLec)\n","slug":"20181112","published":1,"date":"2021-07-28T12:08:06.942Z","updated":"2021-07-29T13:07:16.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgt80011ni0mq256up25","content":"<h2 id=\"生产消息\"><a href=\"#生产消息\" class=\"headerlink\" title=\"生产消息\"></a>生产消息</h2><p>生产者根据规则选择一个Partition写入</p>\n<ul>\n<li>轮询策略（默认规则）</li>\n<li>指定Partition</li>\n<li>指定key来根据Hash值选择Partition</li>\n</ul>\n<p>消息发送方式</p>\n<ul>\n<li>同步：默认方式</li>\n<li>异步：允许批量</li>\n<li>oneway：不需要返回结果</li>\n</ul>\n<h2 id=\"消费消息\"><a href=\"#消费消息\" class=\"headerlink\" title=\"消费消息\"></a>消费消息</h2><ul>\n<li>Consumer按照Group来消费消息，topic中的每一条消息可以被多个Consumer Group消费；</li>\n<li>每个Partition在一个Group中只能由一个Consumer消费，通过Group Coordinator来管理Consumer实际负责消费哪个Partiton，默认支持轮询和Range分配。</li>\n<li>Kafka在zk中保存了每个Topic中每个Partition在不同Group的消费偏移量offset。<br><strong>注意</strong>：分区数量一般要大于或等于消费者（同一Group）数量。否则，有的消费者会消费不到数据</li>\n</ul>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><h3 id=\"集成Spring-Kafka\"><a href=\"#集成Spring-Kafka\" class=\"headerlink\" title=\"集成Spring Kafka\"></a>集成Spring Kafka</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p>生产：使用 KafkaTemplte 生产消息，多个Kafka实例需生产消息时配置不同的KafkaTemplate<br>消费：单条消费时直接使用 @KafkaListener 注解即可，批量消费需先配置containerFactory</p>\n<h3 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><p>ack</p>\n<ul>\n<li>-1或all</li>\n<li>0</li>\n<li>1</li>\n</ul>\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p>提高消费速度</p>\n<ul>\n<li>增加Consumer个数</li>\n<li>增加处理线程：定义一个线程池，Poll数据，将数据提交到线程池中，再次Poll数据。</li>\n</ul>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p><a href=\"https://www.kafkatool.com/download.html\" target=\"_blank\" rel=\"external\">可视化工具下载地址</a></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://cloud.tencent.com/document/product/597/30203\" target=\"_blank\" rel=\"external\">CKafka常用参数配置指南</a><br><a href=\"https://help.aliyun.com/document_detail/68165.html?spm=a2c4g.11186623.6.761.1615358bafQjos\" target=\"_blank\" rel=\"external\">发布者最佳实践</a><br><a href=\"https://help.aliyun.com/document_detail/68166.html?spm=a2c4g.11186623.6.762.4297203abkfLec\" target=\"_blank\" rel=\"external\">订阅者最佳实践</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"生产消息\"><a href=\"#生产消息\" class=\"headerlink\" title=\"生产消息\"></a>生产消息</h2><p>生产者根据规则选择一个Partition写入</p>\n<ul>\n<li>轮询策略（默认规则）</li>\n<li>指定Partition</li>\n<li>指定key来根据Hash值选择Partition</li>\n</ul>\n<p>消息发送方式</p>\n<ul>\n<li>同步：默认方式</li>\n<li>异步：允许批量</li>\n<li>oneway：不需要返回结果</li>\n</ul>\n<h2 id=\"消费消息\"><a href=\"#消费消息\" class=\"headerlink\" title=\"消费消息\"></a>消费消息</h2><ul>\n<li>Consumer按照Group来消费消息，topic中的每一条消息可以被多个Consumer Group消费；</li>\n<li>每个Partition在一个Group中只能由一个Consumer消费，通过Group Coordinator来管理Consumer实际负责消费哪个Partiton，默认支持轮询和Range分配。</li>\n<li>Kafka在zk中保存了每个Topic中每个Partition在不同Group的消费偏移量offset。<br><strong>注意</strong>：分区数量一般要大于或等于消费者（同一Group）数量。否则，有的消费者会消费不到数据</li>\n</ul>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><h3 id=\"集成Spring-Kafka\"><a href=\"#集成Spring-Kafka\" class=\"headerlink\" title=\"集成Spring Kafka\"></a>集成Spring Kafka</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p>生产：使用 KafkaTemplte 生产消息，多个Kafka实例需生产消息时配置不同的KafkaTemplate<br>消费：单条消费时直接使用 @KafkaListener 注解即可，批量消费需先配置containerFactory</p>\n<h3 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><p>ack</p>\n<ul>\n<li>-1或all</li>\n<li>0</li>\n<li>1</li>\n</ul>\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p>提高消费速度</p>\n<ul>\n<li>增加Consumer个数</li>\n<li>增加处理线程：定义一个线程池，Poll数据，将数据提交到线程池中，再次Poll数据。</li>\n</ul>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p><a href=\"https://www.kafkatool.com/download.html\" target=\"_blank\" rel=\"external\">可视化工具下载地址</a></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://cloud.tencent.com/document/product/597/30203\" target=\"_blank\" rel=\"external\">CKafka常用参数配置指南</a><br><a href=\"https://help.aliyun.com/document_detail/68165.html?spm=a2c4g.11186623.6.761.1615358bafQjos\" target=\"_blank\" rel=\"external\">发布者最佳实践</a><br><a href=\"https://help.aliyun.com/document_detail/68166.html?spm=a2c4g.11186623.6.762.4297203abkfLec\" target=\"_blank\" rel=\"external\">订阅者最佳实践</a></p>\n"},{"title":"MySQL","_content":"\n## 调优\n![img](/img/posts/索引优化.png)\n这四个纬度从优化的成本角度来讲，从左到右优化成本逐渐升高；从优化效果角度来看，从右到左优化的效果更高。\n\n### 表结构及索引优化\n* 在设计表结构时，考虑数据库的水平与垂直扩展能力，提前规划好未来1年的数据量、读写量的增长，规划好分库分表方案。比如设计用户信息表，预计 1 年后用户数据 10亿 条，写 QPS 约 5000，读 QPS 30000，可以设计按 UID 纬度进行散列，分为 4 个库每个库 32 张表，单表数据量控制在 KW 级别。\n* 为字段选择合适的数据类型，在保留扩展能力的前提下，优先选用较小的数据结构。例如保存年龄的字段，要使用 TINYINT 而不要使用 INT。\n* 控制表的列数。\n* 如果查询时需要对多张表进行关联查询，可以设计一些冗余字段提高效率。\n* 要擅用索引，比如为经常作为查询条件的字段创建索引、创建联合索引时要根据最左原则考虑索引的复用能力，不要重复创建索引；要为保证数据不能重复的字段创建唯一索引等等。不过要注意索引对插入、更新等写操作是有代价的，不要滥用索引，比如像性别这样唯一很差的字段就不适合建立索引。\n* 列字段尽量设置为 not null。MySQL 难以对使用 null 的列进行查询优化，允许 null 会使索引、索引统计和值更加复杂，允许 null 值的列需要更多的存储空间，还需要 MySQL 内部进行特殊处理。\n\n### SQL语句优化\n* 要找到最需要优化的 SQL 语句。要么是使用最频繁的语句，要么是优化后提高最明显的语句，可以通过查询 MySQL 的慢查询日志来发现需要进行优化的 SQL 语句。\n* 利用 MySQL 提供的分析工具。例如使用 Explain 来分析语句的执行计划，看看是否使用了索引，使用了哪个索引，扫描了多少记录，是否使用文件排序等等。或者利用 Profile 命令来分析某个语句执行过程中各个分步的耗时。\n* 要注意使用查询语句是要避免使用 SELECT *，而是应该指定具体需要获取的字段。原因一是可以避免查询出不需要使用的字段，二是可以避免查询列字段的元信息。\n* 尽量使用 prepared statements，一个是它性能更好，另一个是可以防止 SQL 注入。\n* 尽量使用索引扫描来进行排序，也就是尽量在有索引的字段上进行排序操作。\n\n## 索引\n索引可以大幅增加数据库的查询的性能，但是索引也是有代价的，首先需要额外的磁盘空间来保存索引；其次，对于插入、更新、删除等操作由于更新索引会增加额外的开销，因此索引比较适合用在读多写少的场景。\n### 分类\n\n* 唯一索引：索引列中的值必须是唯一的，但是允许出现空值。\n* 主键索引：一种特殊的唯一索引，但是它不允许出现空值。\n* 普通索引：唯一索引不同，它允许索引列中存在相同的值。\n* 联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。\n* 全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。\n\n### 实现\nB+树：适合用作 > 或 < 这样的范围查询，是 MySQL 中最常使用的一种索引实现。\nR-Tree：用于处理多维数据的数据结构，可以对地理数据进行空间索引。不过实际业务场景中使用的比较少。\nHash：散列表索引，效率高于 B+树，但是不支持范围查找或排序等功能。实际使用的也比较少。\nFullText：全文索引，是一种记录关键字与对应文档关系的倒排索引。\n\n## 存储引擎\n\n![img](/img/posts/聚簇索引.png)\n\n**聚簇索引**\n\nB+树叶子节点上的data是行数据。\n\n**非聚簇索引**\n\nB+树的叶子节点上的data不是行数据。而是数据存放的地址或者主键值。\n\n### MyISAM\n\n5.5版本前默认引擎，支持全文索引，查询效率比较高，但不支持事务、使用**表级锁**。\n\n主键和辅助键均使用非聚簇索引。\n\n### InnoDB\n\n5.5版本后默认引擎。支持 ACID 事务、支持外键、支持**行级锁**。\n\n主键使用聚簇索引，辅助键使用非聚簇索引。\n\n### TokuDB\n\n第三方开发的开源存储引擎，有非常快的写速度，支持数据的压缩存储、可以在线添加索引而不影响读写操作。但是因为压缩的原因，TokuDB 非常适合访问频率不高的数据或历史数据归档，不适合大量读取的场景。\n\n## 锁\n* 表锁：开销小，加锁快，不会出现死锁；但是锁的粒度大，发生锁冲突的概率高，并发访问效率比较低。\n* 行级锁：开销大，加锁慢，有可能会出现死锁，不过因为锁定粒度最小，发生锁冲突的概率低，并发访问效率比较高\n* 共享锁：读锁，其他事务可以读，但不能写。MySQL 可以通过 lock in share mode 语句显示使用共享锁。\n* 排他锁：写锁，其他事务不能读取，也不能写。对于 UPDATE、DELETE 和 INSERT 语句，InnoDB 会自动给涉及的数据集加排他锁，或者使用 select for update 显示使用排他锁。\n\n## 经验","source":"_posts/20181113.md","raw":"---\ntitle: MySQL\ncategory: 应用模块\ntag: 数据库\n---\n\n## 调优\n![img](/img/posts/索引优化.png)\n这四个纬度从优化的成本角度来讲，从左到右优化成本逐渐升高；从优化效果角度来看，从右到左优化的效果更高。\n\n### 表结构及索引优化\n* 在设计表结构时，考虑数据库的水平与垂直扩展能力，提前规划好未来1年的数据量、读写量的增长，规划好分库分表方案。比如设计用户信息表，预计 1 年后用户数据 10亿 条，写 QPS 约 5000，读 QPS 30000，可以设计按 UID 纬度进行散列，分为 4 个库每个库 32 张表，单表数据量控制在 KW 级别。\n* 为字段选择合适的数据类型，在保留扩展能力的前提下，优先选用较小的数据结构。例如保存年龄的字段，要使用 TINYINT 而不要使用 INT。\n* 控制表的列数。\n* 如果查询时需要对多张表进行关联查询，可以设计一些冗余字段提高效率。\n* 要擅用索引，比如为经常作为查询条件的字段创建索引、创建联合索引时要根据最左原则考虑索引的复用能力，不要重复创建索引；要为保证数据不能重复的字段创建唯一索引等等。不过要注意索引对插入、更新等写操作是有代价的，不要滥用索引，比如像性别这样唯一很差的字段就不适合建立索引。\n* 列字段尽量设置为 not null。MySQL 难以对使用 null 的列进行查询优化，允许 null 会使索引、索引统计和值更加复杂，允许 null 值的列需要更多的存储空间，还需要 MySQL 内部进行特殊处理。\n\n### SQL语句优化\n* 要找到最需要优化的 SQL 语句。要么是使用最频繁的语句，要么是优化后提高最明显的语句，可以通过查询 MySQL 的慢查询日志来发现需要进行优化的 SQL 语句。\n* 利用 MySQL 提供的分析工具。例如使用 Explain 来分析语句的执行计划，看看是否使用了索引，使用了哪个索引，扫描了多少记录，是否使用文件排序等等。或者利用 Profile 命令来分析某个语句执行过程中各个分步的耗时。\n* 要注意使用查询语句是要避免使用 SELECT *，而是应该指定具体需要获取的字段。原因一是可以避免查询出不需要使用的字段，二是可以避免查询列字段的元信息。\n* 尽量使用 prepared statements，一个是它性能更好，另一个是可以防止 SQL 注入。\n* 尽量使用索引扫描来进行排序，也就是尽量在有索引的字段上进行排序操作。\n\n## 索引\n索引可以大幅增加数据库的查询的性能，但是索引也是有代价的，首先需要额外的磁盘空间来保存索引；其次，对于插入、更新、删除等操作由于更新索引会增加额外的开销，因此索引比较适合用在读多写少的场景。\n### 分类\n\n* 唯一索引：索引列中的值必须是唯一的，但是允许出现空值。\n* 主键索引：一种特殊的唯一索引，但是它不允许出现空值。\n* 普通索引：唯一索引不同，它允许索引列中存在相同的值。\n* 联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。\n* 全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。\n\n### 实现\nB+树：适合用作 > 或 < 这样的范围查询，是 MySQL 中最常使用的一种索引实现。\nR-Tree：用于处理多维数据的数据结构，可以对地理数据进行空间索引。不过实际业务场景中使用的比较少。\nHash：散列表索引，效率高于 B+树，但是不支持范围查找或排序等功能。实际使用的也比较少。\nFullText：全文索引，是一种记录关键字与对应文档关系的倒排索引。\n\n## 存储引擎\n\n![img](/img/posts/聚簇索引.png)\n\n**聚簇索引**\n\nB+树叶子节点上的data是行数据。\n\n**非聚簇索引**\n\nB+树的叶子节点上的data不是行数据。而是数据存放的地址或者主键值。\n\n### MyISAM\n\n5.5版本前默认引擎，支持全文索引，查询效率比较高，但不支持事务、使用**表级锁**。\n\n主键和辅助键均使用非聚簇索引。\n\n### InnoDB\n\n5.5版本后默认引擎。支持 ACID 事务、支持外键、支持**行级锁**。\n\n主键使用聚簇索引，辅助键使用非聚簇索引。\n\n### TokuDB\n\n第三方开发的开源存储引擎，有非常快的写速度，支持数据的压缩存储、可以在线添加索引而不影响读写操作。但是因为压缩的原因，TokuDB 非常适合访问频率不高的数据或历史数据归档，不适合大量读取的场景。\n\n## 锁\n* 表锁：开销小，加锁快，不会出现死锁；但是锁的粒度大，发生锁冲突的概率高，并发访问效率比较低。\n* 行级锁：开销大，加锁慢，有可能会出现死锁，不过因为锁定粒度最小，发生锁冲突的概率低，并发访问效率比较高\n* 共享锁：读锁，其他事务可以读，但不能写。MySQL 可以通过 lock in share mode 语句显示使用共享锁。\n* 排他锁：写锁，其他事务不能读取，也不能写。对于 UPDATE、DELETE 和 INSERT 语句，InnoDB 会自动给涉及的数据集加排他锁，或者使用 select for update 显示使用排他锁。\n\n## 经验","slug":"20181113","published":1,"date":"2021-07-29T12:12:55.020Z","updated":"2021-07-31T01:48:05.791Z","_id":"ckrpxlgt90013ni0mzcgqk8x9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"调优\"><a href=\"#调优\" class=\"headerlink\" title=\"调优\"></a>调优</h2><p><img src=\"/img/posts/索引优化.png\" alt=\"img\"><br>这四个纬度从优化的成本角度来讲，从左到右优化成本逐渐升高；从优化效果角度来看，从右到左优化的效果更高。</p>\n<h3 id=\"表结构及索引优化\"><a href=\"#表结构及索引优化\" class=\"headerlink\" title=\"表结构及索引优化\"></a>表结构及索引优化</h3><ul>\n<li>在设计表结构时，考虑数据库的水平与垂直扩展能力，提前规划好未来1年的数据量、读写量的增长，规划好分库分表方案。比如设计用户信息表，预计 1 年后用户数据 10亿 条，写 QPS 约 5000，读 QPS 30000，可以设计按 UID 纬度进行散列，分为 4 个库每个库 32 张表，单表数据量控制在 KW 级别。</li>\n<li>为字段选择合适的数据类型，在保留扩展能力的前提下，优先选用较小的数据结构。例如保存年龄的字段，要使用 TINYINT 而不要使用 INT。</li>\n<li>控制表的列数。</li>\n<li>如果查询时需要对多张表进行关联查询，可以设计一些冗余字段提高效率。</li>\n<li>要擅用索引，比如为经常作为查询条件的字段创建索引、创建联合索引时要根据最左原则考虑索引的复用能力，不要重复创建索引；要为保证数据不能重复的字段创建唯一索引等等。不过要注意索引对插入、更新等写操作是有代价的，不要滥用索引，比如像性别这样唯一很差的字段就不适合建立索引。</li>\n<li>列字段尽量设置为 not null。MySQL 难以对使用 null 的列进行查询优化，允许 null 会使索引、索引统计和值更加复杂，允许 null 值的列需要更多的存储空间，还需要 MySQL 内部进行特殊处理。</li>\n</ul>\n<h3 id=\"SQL语句优化\"><a href=\"#SQL语句优化\" class=\"headerlink\" title=\"SQL语句优化\"></a>SQL语句优化</h3><ul>\n<li>要找到最需要优化的 SQL 语句。要么是使用最频繁的语句，要么是优化后提高最明显的语句，可以通过查询 MySQL 的慢查询日志来发现需要进行优化的 SQL 语句。</li>\n<li>利用 MySQL 提供的分析工具。例如使用 Explain 来分析语句的执行计划，看看是否使用了索引，使用了哪个索引，扫描了多少记录，是否使用文件排序等等。或者利用 Profile 命令来分析某个语句执行过程中各个分步的耗时。</li>\n<li>要注意使用查询语句是要避免使用 SELECT *，而是应该指定具体需要获取的字段。原因一是可以避免查询出不需要使用的字段，二是可以避免查询列字段的元信息。</li>\n<li>尽量使用 prepared statements，一个是它性能更好，另一个是可以防止 SQL 注入。</li>\n<li>尽量使用索引扫描来进行排序，也就是尽量在有索引的字段上进行排序操作。</li>\n</ul>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引可以大幅增加数据库的查询的性能，但是索引也是有代价的，首先需要额外的磁盘空间来保存索引；其次，对于插入、更新、删除等操作由于更新索引会增加额外的开销，因此索引比较适合用在读多写少的场景。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>唯一索引：索引列中的值必须是唯一的，但是允许出现空值。</li>\n<li>主键索引：一种特殊的唯一索引，但是它不允许出现空值。</li>\n<li>普通索引：唯一索引不同，它允许索引列中存在相同的值。</li>\n<li>联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。</li>\n<li>全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>B+树：适合用作 &gt; 或 &lt; 这样的范围查询，是 MySQL 中最常使用的一种索引实现。<br>R-Tree：用于处理多维数据的数据结构，可以对地理数据进行空间索引。不过实际业务场景中使用的比较少。<br>Hash：散列表索引，效率高于 B+树，但是不支持范围查找或排序等功能。实际使用的也比较少。<br>FullText：全文索引，是一种记录关键字与对应文档关系的倒排索引。</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p><img src=\"/img/posts/聚簇索引.png\" alt=\"img\"></p>\n<p><strong>聚簇索引</strong></p>\n<p>B+树叶子节点上的data是行数据。</p>\n<p><strong>非聚簇索引</strong></p>\n<p>B+树的叶子节点上的data不是行数据。而是数据存放的地址或者主键值。</p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>5.5版本前默认引擎，支持全文索引，查询效率比较高，但不支持事务、使用<strong>表级锁</strong>。</p>\n<p>主键和辅助键均使用非聚簇索引。</p>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>5.5版本后默认引擎。支持 ACID 事务、支持外键、支持<strong>行级锁</strong>。</p>\n<p>主键使用聚簇索引，辅助键使用非聚簇索引。</p>\n<h3 id=\"TokuDB\"><a href=\"#TokuDB\" class=\"headerlink\" title=\"TokuDB\"></a>TokuDB</h3><p>第三方开发的开源存储引擎，有非常快的写速度，支持数据的压缩存储、可以在线添加索引而不影响读写操作。但是因为压缩的原因，TokuDB 非常适合访问频率不高的数据或历史数据归档，不适合大量读取的场景。</p>\n<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><ul>\n<li>表锁：开销小，加锁快，不会出现死锁；但是锁的粒度大，发生锁冲突的概率高，并发访问效率比较低。</li>\n<li>行级锁：开销大，加锁慢，有可能会出现死锁，不过因为锁定粒度最小，发生锁冲突的概率低，并发访问效率比较高</li>\n<li>共享锁：读锁，其他事务可以读，但不能写。MySQL 可以通过 lock in share mode 语句显示使用共享锁。</li>\n<li>排他锁：写锁，其他事务不能读取，也不能写。对于 UPDATE、DELETE 和 INSERT 语句，InnoDB 会自动给涉及的数据集加排他锁，或者使用 select for update 显示使用排他锁。</li>\n</ul>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"调优\"><a href=\"#调优\" class=\"headerlink\" title=\"调优\"></a>调优</h2><p><img src=\"/img/posts/索引优化.png\" alt=\"img\"><br>这四个纬度从优化的成本角度来讲，从左到右优化成本逐渐升高；从优化效果角度来看，从右到左优化的效果更高。</p>\n<h3 id=\"表结构及索引优化\"><a href=\"#表结构及索引优化\" class=\"headerlink\" title=\"表结构及索引优化\"></a>表结构及索引优化</h3><ul>\n<li>在设计表结构时，考虑数据库的水平与垂直扩展能力，提前规划好未来1年的数据量、读写量的增长，规划好分库分表方案。比如设计用户信息表，预计 1 年后用户数据 10亿 条，写 QPS 约 5000，读 QPS 30000，可以设计按 UID 纬度进行散列，分为 4 个库每个库 32 张表，单表数据量控制在 KW 级别。</li>\n<li>为字段选择合适的数据类型，在保留扩展能力的前提下，优先选用较小的数据结构。例如保存年龄的字段，要使用 TINYINT 而不要使用 INT。</li>\n<li>控制表的列数。</li>\n<li>如果查询时需要对多张表进行关联查询，可以设计一些冗余字段提高效率。</li>\n<li>要擅用索引，比如为经常作为查询条件的字段创建索引、创建联合索引时要根据最左原则考虑索引的复用能力，不要重复创建索引；要为保证数据不能重复的字段创建唯一索引等等。不过要注意索引对插入、更新等写操作是有代价的，不要滥用索引，比如像性别这样唯一很差的字段就不适合建立索引。</li>\n<li>列字段尽量设置为 not null。MySQL 难以对使用 null 的列进行查询优化，允许 null 会使索引、索引统计和值更加复杂，允许 null 值的列需要更多的存储空间，还需要 MySQL 内部进行特殊处理。</li>\n</ul>\n<h3 id=\"SQL语句优化\"><a href=\"#SQL语句优化\" class=\"headerlink\" title=\"SQL语句优化\"></a>SQL语句优化</h3><ul>\n<li>要找到最需要优化的 SQL 语句。要么是使用最频繁的语句，要么是优化后提高最明显的语句，可以通过查询 MySQL 的慢查询日志来发现需要进行优化的 SQL 语句。</li>\n<li>利用 MySQL 提供的分析工具。例如使用 Explain 来分析语句的执行计划，看看是否使用了索引，使用了哪个索引，扫描了多少记录，是否使用文件排序等等。或者利用 Profile 命令来分析某个语句执行过程中各个分步的耗时。</li>\n<li>要注意使用查询语句是要避免使用 SELECT *，而是应该指定具体需要获取的字段。原因一是可以避免查询出不需要使用的字段，二是可以避免查询列字段的元信息。</li>\n<li>尽量使用 prepared statements，一个是它性能更好，另一个是可以防止 SQL 注入。</li>\n<li>尽量使用索引扫描来进行排序，也就是尽量在有索引的字段上进行排序操作。</li>\n</ul>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引可以大幅增加数据库的查询的性能，但是索引也是有代价的，首先需要额外的磁盘空间来保存索引；其次，对于插入、更新、删除等操作由于更新索引会增加额外的开销，因此索引比较适合用在读多写少的场景。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>唯一索引：索引列中的值必须是唯一的，但是允许出现空值。</li>\n<li>主键索引：一种特殊的唯一索引，但是它不允许出现空值。</li>\n<li>普通索引：唯一索引不同，它允许索引列中存在相同的值。</li>\n<li>联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。</li>\n<li>全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>B+树：适合用作 &gt; 或 &lt; 这样的范围查询，是 MySQL 中最常使用的一种索引实现。<br>R-Tree：用于处理多维数据的数据结构，可以对地理数据进行空间索引。不过实际业务场景中使用的比较少。<br>Hash：散列表索引，效率高于 B+树，但是不支持范围查找或排序等功能。实际使用的也比较少。<br>FullText：全文索引，是一种记录关键字与对应文档关系的倒排索引。</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p><img src=\"/img/posts/聚簇索引.png\" alt=\"img\"></p>\n<p><strong>聚簇索引</strong></p>\n<p>B+树叶子节点上的data是行数据。</p>\n<p><strong>非聚簇索引</strong></p>\n<p>B+树的叶子节点上的data不是行数据。而是数据存放的地址或者主键值。</p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>5.5版本前默认引擎，支持全文索引，查询效率比较高，但不支持事务、使用<strong>表级锁</strong>。</p>\n<p>主键和辅助键均使用非聚簇索引。</p>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>5.5版本后默认引擎。支持 ACID 事务、支持外键、支持<strong>行级锁</strong>。</p>\n<p>主键使用聚簇索引，辅助键使用非聚簇索引。</p>\n<h3 id=\"TokuDB\"><a href=\"#TokuDB\" class=\"headerlink\" title=\"TokuDB\"></a>TokuDB</h3><p>第三方开发的开源存储引擎，有非常快的写速度，支持数据的压缩存储、可以在线添加索引而不影响读写操作。但是因为压缩的原因，TokuDB 非常适合访问频率不高的数据或历史数据归档，不适合大量读取的场景。</p>\n<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><ul>\n<li>表锁：开销小，加锁快，不会出现死锁；但是锁的粒度大，发生锁冲突的概率高，并发访问效率比较低。</li>\n<li>行级锁：开销大，加锁慢，有可能会出现死锁，不过因为锁定粒度最小，发生锁冲突的概率低，并发访问效率比较高</li>\n<li>共享锁：读锁，其他事务可以读，但不能写。MySQL 可以通过 lock in share mode 语句显示使用共享锁。</li>\n<li>排他锁：写锁，其他事务不能读取，也不能写。对于 UPDATE、DELETE 和 INSERT 语句，InnoDB 会自动给涉及的数据集加排他锁，或者使用 select for update 显示使用排他锁。</li>\n</ul>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2>"},{"title":"HBase","_content":"\n## 索引类型\n* 本地索引\n* 全局索引\n* 覆盖索引\n\n## RowKey设计\n* 长度原则\n* 唯一原则\n* 散列原则\n\n## 参考文章\n* [HBase技术细节笔记上](https://cloud.tencent.com/developer/article/1006043)\n* [HBase技术细节笔记下](https://cloud.tencent.com/developer/article/1006044)\n* [我终于看懂了HBase，太不容易了](https://zhuanlan.zhihu.com/p/145551967)\n* [2018 HBase技术总结](https://www.slidestalk.com/HBaseGroup/HBase_ebook28532)","source":"_posts/20181114.md","raw":"---\ntitle: HBase\ncategory: 应用模块\ntag: 数据库\n---\n\n## 索引类型\n* 本地索引\n* 全局索引\n* 覆盖索引\n\n## RowKey设计\n* 长度原则\n* 唯一原则\n* 散列原则\n\n## 参考文章\n* [HBase技术细节笔记上](https://cloud.tencent.com/developer/article/1006043)\n* [HBase技术细节笔记下](https://cloud.tencent.com/developer/article/1006044)\n* [我终于看懂了HBase，太不容易了](https://zhuanlan.zhihu.com/p/145551967)\n* [2018 HBase技术总结](https://www.slidestalk.com/HBaseGroup/HBase_ebook28532)","slug":"20181114","published":1,"date":"2021-07-28T12:08:06.943Z","updated":"2021-07-28T14:41:50.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgta0017ni0mlck3r8wb","content":"<h2 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h2><ul>\n<li>本地索引</li>\n<li>全局索引</li>\n<li>覆盖索引</li>\n</ul>\n<h2 id=\"RowKey设计\"><a href=\"#RowKey设计\" class=\"headerlink\" title=\"RowKey设计\"></a>RowKey设计</h2><ul>\n<li>长度原则</li>\n<li>唯一原则</li>\n<li>散列原则</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006043\" target=\"_blank\" rel=\"external\">HBase技术细节笔记上</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006044\" target=\"_blank\" rel=\"external\">HBase技术细节笔记下</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/145551967\" target=\"_blank\" rel=\"external\">我终于看懂了HBase，太不容易了</a></li>\n<li><a href=\"https://www.slidestalk.com/HBaseGroup/HBase_ebook28532\" target=\"_blank\" rel=\"external\">2018 HBase技术总结</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h2><ul>\n<li>本地索引</li>\n<li>全局索引</li>\n<li>覆盖索引</li>\n</ul>\n<h2 id=\"RowKey设计\"><a href=\"#RowKey设计\" class=\"headerlink\" title=\"RowKey设计\"></a>RowKey设计</h2><ul>\n<li>长度原则</li>\n<li>唯一原则</li>\n<li>散列原则</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006043\" target=\"_blank\" rel=\"external\">HBase技术细节笔记上</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006044\" target=\"_blank\" rel=\"external\">HBase技术细节笔记下</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/145551967\" target=\"_blank\" rel=\"external\">我终于看懂了HBase，太不容易了</a></li>\n<li><a href=\"https://www.slidestalk.com/HBaseGroup/HBase_ebook28532\" target=\"_blank\" rel=\"external\">2018 HBase技术总结</a></li>\n</ul>\n"},{"title":"Cassandra","_content":"","source":"_posts/20181115.md","raw":"---\ntitle: Cassandra\ncategory: 应用模块\ntag: 数据库\n---","slug":"20181115","published":1,"date":"2021-07-28T12:08:06.943Z","updated":"2021-07-28T14:41:50.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgtf0019ni0mucg7mqde","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Mongo","_content":"\n## 索引\n\n* 单键索引\n* 复合索引\n* 多键值索引\n* 地理索引\n* 全文索引\n* 散列索引\n\n* 稀疏索引\n* 唯一索引\n* 过期索引\n\n## 部署方式\n分片\n副本集","source":"_posts/20190107.md","raw":"---\ntitle: Mongo\ncategory: 应用模块\ntag: 数据库\n---\n\n## 索引\n\n* 单键索引\n* 复合索引\n* 多键值索引\n* 地理索引\n* 全文索引\n* 散列索引\n\n* 稀疏索引\n* 唯一索引\n* 过期索引\n\n## 部署方式\n分片\n副本集","slug":"20190107","published":1,"date":"2021-07-28T12:08:06.943Z","updated":"2021-07-28T14:41:50.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgtg001dni0m6qaw9vmm","content":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>单键索引</li>\n<li>复合索引</li>\n<li>多键值索引</li>\n<li>地理索引</li>\n<li>全文索引</li>\n<li><p>散列索引</p>\n</li>\n<li><p>稀疏索引</p>\n</li>\n<li>唯一索引</li>\n<li>过期索引</li>\n</ul>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><p>分片<br>副本集</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>单键索引</li>\n<li>复合索引</li>\n<li>多键值索引</li>\n<li>地理索引</li>\n<li>全文索引</li>\n<li><p>散列索引</p>\n</li>\n<li><p>稀疏索引</p>\n</li>\n<li>唯一索引</li>\n<li>过期索引</li>\n</ul>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><p>分片<br>副本集</p>\n"},{"title":"架构","_content":"\n## CAP理论\nConsistency: 一致性，所有节点访问同一份最新的数据副本\nAvailability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\nPartition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。\n在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。\n\n### CA\n放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。\n### CP\n选择强一致和分区容错，允许极端情况下出现短时的服务不可用。\nCP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos\n### AP\n选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。\nAP实现的系统：Eureka、Nacos、Cassandra\n\n### BASE\nBasically Available：基本可用\nSoft-state：软状态\nEventual Consistency：最终一致性\n它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。\n\n\n\n## 微服务框架\n\n- 服务注册：Zookeeper、Consul、Eureka、Nacos\n- 负载均衡：ribbon\n- 熔断降级：hystrix\n- 网关：Zuul\n- 配置管理：config\n\n\n\n## 云原生服务\n\n\n\n## Service Mesh\n\n","source":"_posts/20190112.md","raw":"---\ntitle: 架构\ncategory: 综合模块\n---\n\n## CAP理论\nConsistency: 一致性，所有节点访问同一份最新的数据副本\nAvailability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\nPartition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。\n在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。\n\n### CA\n放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。\n### CP\n选择强一致和分区容错，允许极端情况下出现短时的服务不可用。\nCP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos\n### AP\n选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。\nAP实现的系统：Eureka、Nacos、Cassandra\n\n### BASE\nBasically Available：基本可用\nSoft-state：软状态\nEventual Consistency：最终一致性\n它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。\n\n\n\n## 微服务框架\n\n- 服务注册：Zookeeper、Consul、Eureka、Nacos\n- 负载均衡：ribbon\n- 熔断降级：hystrix\n- 网关：Zuul\n- 配置管理：config\n\n\n\n## 云原生服务\n\n\n\n## Service Mesh\n\n","slug":"20190112","published":1,"date":"2021-07-28T12:08:06.943Z","updated":"2021-07-29T22:30:58.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgtg001gni0makmkqan7","content":"<h2 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h2><p>Consistency: 一致性，所有节点访问同一份最新的数据副本<br>Availability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。<br>Partition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。<br>在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。</p>\n<h3 id=\"CA\"><a href=\"#CA\" class=\"headerlink\" title=\"CA\"></a>CA</h3><p>放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。</p>\n<h3 id=\"CP\"><a href=\"#CP\" class=\"headerlink\" title=\"CP\"></a>CP</h3><p>选择强一致和分区容错，允许极端情况下出现短时的服务不可用。<br>CP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos</p>\n<h3 id=\"AP\"><a href=\"#AP\" class=\"headerlink\" title=\"AP\"></a>AP</h3><p>选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。<br>AP实现的系统：Eureka、Nacos、Cassandra</p>\n<h3 id=\"BASE\"><a href=\"#BASE\" class=\"headerlink\" title=\"BASE\"></a>BASE</h3><p>Basically Available：基本可用<br>Soft-state：软状态<br>Eventual Consistency：最终一致性<br>它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。</p>\n<h2 id=\"微服务框架\"><a href=\"#微服务框架\" class=\"headerlink\" title=\"微服务框架\"></a>微服务框架</h2><ul>\n<li>服务注册：Zookeeper、Consul、Eureka、Nacos</li>\n<li>负载均衡：ribbon</li>\n<li>熔断降级：hystrix</li>\n<li>网关：Zuul</li>\n<li>配置管理：config</li>\n</ul>\n<h2 id=\"云原生服务\"><a href=\"#云原生服务\" class=\"headerlink\" title=\"云原生服务\"></a>云原生服务</h2><h2 id=\"Service-Mesh\"><a href=\"#Service-Mesh\" class=\"headerlink\" title=\"Service Mesh\"></a>Service Mesh</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h2><p>Consistency: 一致性，所有节点访问同一份最新的数据副本<br>Availability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。<br>Partition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。<br>在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。</p>\n<h3 id=\"CA\"><a href=\"#CA\" class=\"headerlink\" title=\"CA\"></a>CA</h3><p>放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。</p>\n<h3 id=\"CP\"><a href=\"#CP\" class=\"headerlink\" title=\"CP\"></a>CP</h3><p>选择强一致和分区容错，允许极端情况下出现短时的服务不可用。<br>CP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos</p>\n<h3 id=\"AP\"><a href=\"#AP\" class=\"headerlink\" title=\"AP\"></a>AP</h3><p>选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。<br>AP实现的系统：Eureka、Nacos、Cassandra</p>\n<h3 id=\"BASE\"><a href=\"#BASE\" class=\"headerlink\" title=\"BASE\"></a>BASE</h3><p>Basically Available：基本可用<br>Soft-state：软状态<br>Eventual Consistency：最终一致性<br>它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。</p>\n<h2 id=\"微服务框架\"><a href=\"#微服务框架\" class=\"headerlink\" title=\"微服务框架\"></a>微服务框架</h2><ul>\n<li>服务注册：Zookeeper、Consul、Eureka、Nacos</li>\n<li>负载均衡：ribbon</li>\n<li>熔断降级：hystrix</li>\n<li>网关：Zuul</li>\n<li>配置管理：config</li>\n</ul>\n<h2 id=\"云原生服务\"><a href=\"#云原生服务\" class=\"headerlink\" title=\"云原生服务\"></a>云原生服务</h2><h2 id=\"Service-Mesh\"><a href=\"#Service-Mesh\" class=\"headerlink\" title=\"Service Mesh\"></a>Service Mesh</h2>"},{"title":"数据格式","_content":"\n## ProtoBuf\nProtocol Buffer 简称 protobuf，google开源的一种数据传输格式，类似于json，但比json的体积要小，速度更快，并且跨平台、跨语言。使用时需编写.proto文件，然后使用protocol.exe生成特定语言的文件。序列化和反序列化需使用同一个文件。\nprotobuf按照Tag + 可选（长度） + 值进行存储，不存储真正的属性名，而是在解析时按照Tag去寻找对应的属性名，然后对其进行赋值。\nProtostuff是为了简化生成中间文件而生的开源项目。\n都是Java语言时，客户端和服务端类名、属性、类型需保持一致。包名也必须一致？\n服务端Java、客户端Python时，客户端需定义Message。对于泛型的处理，需要经过调试才能知道各种类型的Tag。\n同时需注意客户端与服务端的protobuf的版本必须一致，目前主要版本为2.0、3.0。\n\n## JSON\n","source":"_posts/20210728.md","raw":"---\ntitle: 数据格式\ncategory: 基础模块\n---\n\n## ProtoBuf\nProtocol Buffer 简称 protobuf，google开源的一种数据传输格式，类似于json，但比json的体积要小，速度更快，并且跨平台、跨语言。使用时需编写.proto文件，然后使用protocol.exe生成特定语言的文件。序列化和反序列化需使用同一个文件。\nprotobuf按照Tag + 可选（长度） + 值进行存储，不存储真正的属性名，而是在解析时按照Tag去寻找对应的属性名，然后对其进行赋值。\nProtostuff是为了简化生成中间文件而生的开源项目。\n都是Java语言时，客户端和服务端类名、属性、类型需保持一致。包名也必须一致？\n服务端Java、客户端Python时，客户端需定义Message。对于泛型的处理，需要经过调试才能知道各种类型的Tag。\n同时需注意客户端与服务端的protobuf的版本必须一致，目前主要版本为2.0、3.0。\n\n## JSON\n","slug":"20210728","published":1,"date":"2021-07-28T12:57:41.237Z","updated":"2021-07-29T13:43:48.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgth001lni0mf70hg3d5","content":"<h2 id=\"ProtoBuf\"><a href=\"#ProtoBuf\" class=\"headerlink\" title=\"ProtoBuf\"></a>ProtoBuf</h2><p>Protocol Buffer 简称 protobuf，google开源的一种数据传输格式，类似于json，但比json的体积要小，速度更快，并且跨平台、跨语言。使用时需编写.proto文件，然后使用protocol.exe生成特定语言的文件。序列化和反序列化需使用同一个文件。<br>protobuf按照Tag + 可选（长度） + 值进行存储，不存储真正的属性名，而是在解析时按照Tag去寻找对应的属性名，然后对其进行赋值。<br>Protostuff是为了简化生成中间文件而生的开源项目。<br>都是Java语言时，客户端和服务端类名、属性、类型需保持一致。包名也必须一致？<br>服务端Java、客户端Python时，客户端需定义Message。对于泛型的处理，需要经过调试才能知道各种类型的Tag。<br>同时需注意客户端与服务端的protobuf的版本必须一致，目前主要版本为2.0、3.0。</p>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ProtoBuf\"><a href=\"#ProtoBuf\" class=\"headerlink\" title=\"ProtoBuf\"></a>ProtoBuf</h2><p>Protocol Buffer 简称 protobuf，google开源的一种数据传输格式，类似于json，但比json的体积要小，速度更快，并且跨平台、跨语言。使用时需编写.proto文件，然后使用protocol.exe生成特定语言的文件。序列化和反序列化需使用同一个文件。<br>protobuf按照Tag + 可选（长度） + 值进行存储，不存储真正的属性名，而是在解析时按照Tag去寻找对应的属性名，然后对其进行赋值。<br>Protostuff是为了简化生成中间文件而生的开源项目。<br>都是Java语言时，客户端和服务端类名、属性、类型需保持一致。包名也必须一致？<br>服务端Java、客户端Python时，客户端需定义Message。对于泛型的处理，需要经过调试才能知道各种类型的Tag。<br>同时需注意客户端与服务端的protobuf的版本必须一致，目前主要版本为2.0、3.0。</p>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2>"},{"title":"Netty","_content":"Netty 是一个高性能的异步事件驱动的 NIO 框架，它对消息的处理采用串行无锁化设计，提供了对 TCP、UDP 和文件传输的支持。\n\n内置了多种 encoder 和 decoder 实现来解决 TCP 粘包问题。\n\n处理消息时使用了池化的缓冲池 ByteBuffers，提高性能。\n\n结合内存零 copy 机制，减少了对象的创建，降低了 GC 的压力。\n<!--more-->\n\n\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRCAOMXfAACEn9bOiF8679.png)\n\n## 线程模型\n\nNetty 线程模型采用“服务端监听线程”和“IO 线程”分离的方式。\n\nBoss 线程组负责监听事件，创建 Socket 并绑定到 Worker 线程组。Worker 线程组负责 IO 处理。\n\n线程组由 EventLoopGroup 实现，其中包含了多个 EventLoop 事件处理器，每个 EventLoop 包含一个处理线程。\n\n通常情况下在 NIO 非阻塞模式下，Netty 为每个 Channel 分配一个 EventLoop，并且它的整个生命周期中的事件都由这个 EventLoop 来处理。一个 EventLoop 可以绑定多个 Channel。\n\n## 处理模型\n\nNetty4 中 Channel 的读写事件都是由 Worker 线程来处理。请求处理中最主要的就是 ChannelPipeline，其中包含了一组 ChannelHandler。\n\n这些 Handler 组成了责任链模式，依次对 Channel 中的消息进行处理。一般接收消息时，Pipeline 处理完成会把消息提交到业务线程池进行处理，当业务线程处理完成时，会封装成 Task，提交回 Channel 对应的 EventLoop 来写回返回值。\n\n\n\n## 主要概念\n\n- Channel\n- ChannelHandler\n- ChannelPipeline\n- EventLoop\n- BootStrap\n\n## 零内存复制\n\n使用堆外内存来避免在 Socket 读写时缓冲数据在堆外与堆内进行频繁复制；使用 CompositeByteBuf 来减少多个小的 buffer 合并时产生的内存复制；\n\n使用 FileRegion 实现文件传输的零拷贝等。\n\n## 粘包与半包\n\nFixedLengthFrameDecoder 用来解决固定大小数据包的粘包问题\n\nLineBasedFrameDecoder 适合对文本进行按行分包\n\nDelimiterBasedFrameDecoder 适合按特殊字符作为分包标记的场景\n\nLengthFieldBasedFrameDecoder 可以支持复杂的自定义协议分包\n\n## Netty3 和 Netty4","source":"_posts/20210730.md","raw":"---\ntitle: Netty\ncategory: 应用模块\ntag: 框架\n---\nNetty 是一个高性能的异步事件驱动的 NIO 框架，它对消息的处理采用串行无锁化设计，提供了对 TCP、UDP 和文件传输的支持。\n\n内置了多种 encoder 和 decoder 实现来解决 TCP 粘包问题。\n\n处理消息时使用了池化的缓冲池 ByteBuffers，提高性能。\n\n结合内存零 copy 机制，减少了对象的创建，降低了 GC 的压力。\n<!--more-->\n\n\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRCAOMXfAACEn9bOiF8679.png)\n\n## 线程模型\n\nNetty 线程模型采用“服务端监听线程”和“IO 线程”分离的方式。\n\nBoss 线程组负责监听事件，创建 Socket 并绑定到 Worker 线程组。Worker 线程组负责 IO 处理。\n\n线程组由 EventLoopGroup 实现，其中包含了多个 EventLoop 事件处理器，每个 EventLoop 包含一个处理线程。\n\n通常情况下在 NIO 非阻塞模式下，Netty 为每个 Channel 分配一个 EventLoop，并且它的整个生命周期中的事件都由这个 EventLoop 来处理。一个 EventLoop 可以绑定多个 Channel。\n\n## 处理模型\n\nNetty4 中 Channel 的读写事件都是由 Worker 线程来处理。请求处理中最主要的就是 ChannelPipeline，其中包含了一组 ChannelHandler。\n\n这些 Handler 组成了责任链模式，依次对 Channel 中的消息进行处理。一般接收消息时，Pipeline 处理完成会把消息提交到业务线程池进行处理，当业务线程处理完成时，会封装成 Task，提交回 Channel 对应的 EventLoop 来写回返回值。\n\n\n\n## 主要概念\n\n- Channel\n- ChannelHandler\n- ChannelPipeline\n- EventLoop\n- BootStrap\n\n## 零内存复制\n\n使用堆外内存来避免在 Socket 读写时缓冲数据在堆外与堆内进行频繁复制；使用 CompositeByteBuf 来减少多个小的 buffer 合并时产生的内存复制；\n\n使用 FileRegion 实现文件传输的零拷贝等。\n\n## 粘包与半包\n\nFixedLengthFrameDecoder 用来解决固定大小数据包的粘包问题\n\nLineBasedFrameDecoder 适合对文本进行按行分包\n\nDelimiterBasedFrameDecoder 适合按特殊字符作为分包标记的场景\n\nLengthFieldBasedFrameDecoder 可以支持复杂的自定义协议分包\n\n## Netty3 和 Netty4","slug":"20210730","published":1,"date":"2021-07-29T13:09:18.011Z","updated":"2021-07-29T13:53:47.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpxlgti001nni0m6is52qi1","content":"<p>Netty 是一个高性能的异步事件驱动的 NIO 框架，它对消息的处理采用串行无锁化设计，提供了对 TCP、UDP 和文件传输的支持。</p>\n<p>内置了多种 encoder 和 decoder 实现来解决 TCP 粘包问题。</p>\n<p>处理消息时使用了池化的缓冲池 ByteBuffers，提高性能。</p>\n<p>结合内存零 copy 机制，减少了对象的创建，降低了 GC 的压力。<br><a id=\"more\"></a></p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRCAOMXfAACEn9bOiF8679.png\" alt=\"img\"></p>\n<h2 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h2><p>Netty 线程模型采用“服务端监听线程”和“IO 线程”分离的方式。</p>\n<p>Boss 线程组负责监听事件，创建 Socket 并绑定到 Worker 线程组。Worker 线程组负责 IO 处理。</p>\n<p>线程组由 EventLoopGroup 实现，其中包含了多个 EventLoop 事件处理器，每个 EventLoop 包含一个处理线程。</p>\n<p>通常情况下在 NIO 非阻塞模式下，Netty 为每个 Channel 分配一个 EventLoop，并且它的整个生命周期中的事件都由这个 EventLoop 来处理。一个 EventLoop 可以绑定多个 Channel。</p>\n<h2 id=\"处理模型\"><a href=\"#处理模型\" class=\"headerlink\" title=\"处理模型\"></a>处理模型</h2><p>Netty4 中 Channel 的读写事件都是由 Worker 线程来处理。请求处理中最主要的就是 ChannelPipeline，其中包含了一组 ChannelHandler。</p>\n<p>这些 Handler 组成了责任链模式，依次对 Channel 中的消息进行处理。一般接收消息时，Pipeline 处理完成会把消息提交到业务线程池进行处理，当业务线程处理完成时，会封装成 Task，提交回 Channel 对应的 EventLoop 来写回返回值。</p>\n<h2 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念\"></a>主要概念</h2><ul>\n<li>Channel</li>\n<li>ChannelHandler</li>\n<li>ChannelPipeline</li>\n<li>EventLoop</li>\n<li>BootStrap</li>\n</ul>\n<h2 id=\"零内存复制\"><a href=\"#零内存复制\" class=\"headerlink\" title=\"零内存复制\"></a>零内存复制</h2><p>使用堆外内存来避免在 Socket 读写时缓冲数据在堆外与堆内进行频繁复制；使用 CompositeByteBuf 来减少多个小的 buffer 合并时产生的内存复制；</p>\n<p>使用 FileRegion 实现文件传输的零拷贝等。</p>\n<h2 id=\"粘包与半包\"><a href=\"#粘包与半包\" class=\"headerlink\" title=\"粘包与半包\"></a>粘包与半包</h2><p>FixedLengthFrameDecoder 用来解决固定大小数据包的粘包问题</p>\n<p>LineBasedFrameDecoder 适合对文本进行按行分包</p>\n<p>DelimiterBasedFrameDecoder 适合按特殊字符作为分包标记的场景</p>\n<p>LengthFieldBasedFrameDecoder 可以支持复杂的自定义协议分包</p>\n<h2 id=\"Netty3-和-Netty4\"><a href=\"#Netty3-和-Netty4\" class=\"headerlink\" title=\"Netty3 和 Netty4\"></a>Netty3 和 Netty4</h2>","site":{"data":{}},"excerpt":"<p>Netty 是一个高性能的异步事件驱动的 NIO 框架，它对消息的处理采用串行无锁化设计，提供了对 TCP、UDP 和文件传输的支持。</p>\n<p>内置了多种 encoder 和 decoder 实现来解决 TCP 粘包问题。</p>\n<p>处理消息时使用了池化的缓冲池 ByteBuffers，提高性能。</p>\n<p>结合内存零 copy 机制，减少了对象的创建，降低了 GC 的压力。<br>","more":"</p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRCAOMXfAACEn9bOiF8679.png\" alt=\"img\"></p>\n<h2 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h2><p>Netty 线程模型采用“服务端监听线程”和“IO 线程”分离的方式。</p>\n<p>Boss 线程组负责监听事件，创建 Socket 并绑定到 Worker 线程组。Worker 线程组负责 IO 处理。</p>\n<p>线程组由 EventLoopGroup 实现，其中包含了多个 EventLoop 事件处理器，每个 EventLoop 包含一个处理线程。</p>\n<p>通常情况下在 NIO 非阻塞模式下，Netty 为每个 Channel 分配一个 EventLoop，并且它的整个生命周期中的事件都由这个 EventLoop 来处理。一个 EventLoop 可以绑定多个 Channel。</p>\n<h2 id=\"处理模型\"><a href=\"#处理模型\" class=\"headerlink\" title=\"处理模型\"></a>处理模型</h2><p>Netty4 中 Channel 的读写事件都是由 Worker 线程来处理。请求处理中最主要的就是 ChannelPipeline，其中包含了一组 ChannelHandler。</p>\n<p>这些 Handler 组成了责任链模式，依次对 Channel 中的消息进行处理。一般接收消息时，Pipeline 处理完成会把消息提交到业务线程池进行处理，当业务线程处理完成时，会封装成 Task，提交回 Channel 对应的 EventLoop 来写回返回值。</p>\n<h2 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念\"></a>主要概念</h2><ul>\n<li>Channel</li>\n<li>ChannelHandler</li>\n<li>ChannelPipeline</li>\n<li>EventLoop</li>\n<li>BootStrap</li>\n</ul>\n<h2 id=\"零内存复制\"><a href=\"#零内存复制\" class=\"headerlink\" title=\"零内存复制\"></a>零内存复制</h2><p>使用堆外内存来避免在 Socket 读写时缓冲数据在堆外与堆内进行频繁复制；使用 CompositeByteBuf 来减少多个小的 buffer 合并时产生的内存复制；</p>\n<p>使用 FileRegion 实现文件传输的零拷贝等。</p>\n<h2 id=\"粘包与半包\"><a href=\"#粘包与半包\" class=\"headerlink\" title=\"粘包与半包\"></a>粘包与半包</h2><p>FixedLengthFrameDecoder 用来解决固定大小数据包的粘包问题</p>\n<p>LineBasedFrameDecoder 适合对文本进行按行分包</p>\n<p>DelimiterBasedFrameDecoder 适合按特殊字符作为分包标记的场景</p>\n<p>LengthFieldBasedFrameDecoder 可以支持复杂的自定义协议分包</p>\n<h2 id=\"Netty3-和-Netty4\"><a href=\"#Netty3-和-Netty4\" class=\"headerlink\" title=\"Netty3 和 Netty4\"></a>Netty3 和 Netty4</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckrpxlgsm0001ni0mycbnulp7","category_id":"ckrpxlgsr0004ni0m45b2uztv","_id":"ckrpxlgsw000bni0mhqgupt79"},{"post_id":"ckrpxlgsv000ani0mga979nd7","category_id":"ckrpxlgsv0009ni0mfxp9edx7","_id":"ckrpxlgsz000fni0mditwajxk"},{"post_id":"ckrpxlgsq0003ni0mn61ti78b","category_id":"ckrpxlgsv0009ni0mfxp9edx7","_id":"ckrpxlgt0000ini0mystni0ox"},{"post_id":"ckrpxlgsw000cni0mregk789d","category_id":"ckrpxlgsv0009ni0mfxp9edx7","_id":"ckrpxlgt1000lni0mka13slgz"},{"post_id":"ckrpxlgst0006ni0m32xqj6qu","category_id":"ckrpxlgsv0009ni0mfxp9edx7","_id":"ckrpxlgt2000oni0mcbovontu"},{"post_id":"ckrpxlgst0007ni0mbh92zw77","category_id":"ckrpxlgsv0009ni0mfxp9edx7","_id":"ckrpxlgt4000sni0m1z3udo2j"},{"post_id":"ckrpxlgsu0008ni0mlehd0j7c","category_id":"ckrpxlgsv0009ni0mfxp9edx7","_id":"ckrpxlgt7000yni0mjb4puwln"},{"post_id":"ckrpxlgt5000vni0mvdk699op","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgt90012ni0mod2b14e9"},{"post_id":"ckrpxlgsy000eni0m1puy1oky","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgta0016ni0mvc1wyq86"},{"post_id":"ckrpxlgt6000wni0m6co0xalq","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgte0018ni0mpwvs5jx4"},{"post_id":"ckrpxlgt80011ni0mq256up25","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgtf001cni0mfkunaj3d"},{"post_id":"ckrpxlgsz000gni0maz2ra73g","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgtg001fni0mdb0ezp5n"},{"post_id":"ckrpxlgt90013ni0mzcgqk8x9","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgth001jni0msjrtbjvj"},{"post_id":"ckrpxlgta0017ni0mlck3r8wb","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgti001mni0m7bkxewtl"},{"post_id":"ckrpxlgt0000jni0mnbmcxnui","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgtj001pni0m9fpr9wyd"},{"post_id":"ckrpxlgtf0019ni0mucg7mqde","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgtj001sni0myjaxtf7q"},{"post_id":"ckrpxlgtg001dni0m6qaw9vmm","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgtk001uni0me6pqp57n"},{"post_id":"ckrpxlgt1000mni0m509t1h1e","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgtk001xni0mrwecnphz"},{"post_id":"ckrpxlgtg001gni0makmkqan7","category_id":"ckrpxlgsr0004ni0m45b2uztv","_id":"ckrpxlgtk001zni0me1uev49g"},{"post_id":"ckrpxlgth001lni0mf70hg3d5","category_id":"ckrpxlgsv0009ni0mfxp9edx7","_id":"ckrpxlgtl0021ni0m71si1czk"},{"post_id":"ckrpxlgt3000pni0mwr1lg1g5","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgtl0022ni0me2vy8md1"},{"post_id":"ckrpxlgti001nni0m6is52qi1","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgtl0024ni0m139gbtmc"},{"post_id":"ckrpxlgt3000qni0m7irrvs5m","category_id":"ckrpxlgt4000tni0moed4hn4z","_id":"ckrpxlgtm0026ni0mlywf4uh3"}],"PostTag":[{"post_id":"ckrpxlgsz000gni0maz2ra73g","tag_id":"ckrpxlgt1000kni0m206nh01d","_id":"ckrpxlgt5000uni0m129sv3bf"},{"post_id":"ckrpxlgt0000jni0mnbmcxnui","tag_id":"ckrpxlgt1000kni0m206nh01d","_id":"ckrpxlgt80010ni0msip8t8id"},{"post_id":"ckrpxlgt3000pni0mwr1lg1g5","tag_id":"ckrpxlgt7000xni0mjhmsm5o9","_id":"ckrpxlgtg001eni0mu63xeguy"},{"post_id":"ckrpxlgt3000pni0mwr1lg1g5","tag_id":"ckrpxlgta0014ni0mamhfad9r","_id":"ckrpxlgth001hni0m9bonpco0"},{"post_id":"ckrpxlgt3000qni0m7irrvs5m","tag_id":"ckrpxlgtf001ani0m0v8x14sx","_id":"ckrpxlgtj001rni0mh17b9dex"},{"post_id":"ckrpxlgt3000qni0m7irrvs5m","tag_id":"ckrpxlgta0014ni0mamhfad9r","_id":"ckrpxlgtk001tni0mzrl98yfb"},{"post_id":"ckrpxlgti001nni0m6is52qi1","tag_id":"ckrpxlgt1000kni0m206nh01d","_id":"ckrpxlgtk001wni0mxgj47mi1"},{"post_id":"ckrpxlgt5000vni0mvdk699op","tag_id":"ckrpxlgtj001qni0me2xb7osw","_id":"ckrpxlgtk001yni0mqorvp4ph"},{"post_id":"ckrpxlgt6000wni0m6co0xalq","tag_id":"ckrpxlgt7000xni0mjhmsm5o9","_id":"ckrpxlgtl0025ni0m2lshy1c2"},{"post_id":"ckrpxlgt6000wni0m6co0xalq","tag_id":"ckrpxlgta0014ni0mamhfad9r","_id":"ckrpxlgtm0027ni0mcvqik9zg"},{"post_id":"ckrpxlgt80011ni0mq256up25","tag_id":"ckrpxlgtf001ani0m0v8x14sx","_id":"ckrpxlgtm002ani0mif3tnct1"},{"post_id":"ckrpxlgt80011ni0mq256up25","tag_id":"ckrpxlgta0014ni0mamhfad9r","_id":"ckrpxlgtm002bni0ma6qhowu3"},{"post_id":"ckrpxlgt90013ni0mzcgqk8x9","tag_id":"ckrpxlgtj001qni0me2xb7osw","_id":"ckrpxlgtn002dni0mzkqbfmda"},{"post_id":"ckrpxlgta0017ni0mlck3r8wb","tag_id":"ckrpxlgtj001qni0me2xb7osw","_id":"ckrpxlgtn002fni0mrxjqdkxb"},{"post_id":"ckrpxlgtf0019ni0mucg7mqde","tag_id":"ckrpxlgtj001qni0me2xb7osw","_id":"ckrpxlgto002hni0m79orjrvp"},{"post_id":"ckrpxlgtg001dni0m6qaw9vmm","tag_id":"ckrpxlgtj001qni0me2xb7osw","_id":"ckrpxlgto002ini0mbrzjbvdr"}],"Tag":[{"name":"框架","_id":"ckrpxlgt1000kni0m206nh01d"},{"name":"缓存","_id":"ckrpxlgt7000xni0mjhmsm5o9"},{"name":"中间件","_id":"ckrpxlgta0014ni0mamhfad9r"},{"name":"消息队列","_id":"ckrpxlgtf001ani0m0v8x14sx"},{"name":"数据库","_id":"ckrpxlgtj001qni0me2xb7osw"}]}}