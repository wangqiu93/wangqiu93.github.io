{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/JVM内存模型.png","path":"img/posts/JVM内存模型.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/MyBatis.png","path":"img/posts/MyBatis.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/Redis数据结构.png","path":"img/posts/Redis数据结构.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/同步非阻塞IO.png","path":"img/posts/同步非阻塞IO.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/同步阻塞IO.png","path":"img/posts/同步阻塞IO.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/索引优化.png","path":"img/posts/索引优化.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/Java内存模型.png","path":"img/posts/Java内存模型.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/聚簇索引.png","path":"img/posts/聚簇索引.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/车辆监控平台架构.png","path":"img/posts/车辆监控平台架构.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/posts/缺失值范围.png","path":"img/posts/缺失值范围.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1672709344008},{"_id":"themes/yelee/README.md","hash":"034155f3c0a9ac4a30bbdcfd549f151960f5ef8d","modified":1672709344009},{"_id":"themes/yelee/_config.yml","hash":"bb9b47f9370130c97737003fccbb7f103523a483","modified":1672709344009},{"_id":"themes/yelee/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1672709344013},{"_id":"source/_posts/20170918.md","hash":"efa5ec0afde5949319807c5b9b38203f2bf11b7a","modified":1672709344005},{"_id":"source/_posts/20171212.md","hash":"23580bbad5671ed5cf00f7994471dc7b47e2d4e7","modified":1672709344005},{"_id":"source/_posts/20180617.md","hash":"be218b5367d84db37f01dc5f651c2e51052eb39b","modified":1672709344005},{"_id":"source/_posts/20180618.md","hash":"5670f56f9fb60f46ae9f8781f904bfc0e1c0191d","modified":1672709344005},{"_id":"source/_posts/20180619.md","hash":"fe54aa129cbdb87d939bfd80045a3591dfed6f66","modified":1672709344005},{"_id":"source/_posts/20180630.md","hash":"42acf0c280d0bf6863257305cfdf0559b82dd455","modified":1672709344006},{"_id":"source/_posts/20180725.md","hash":"5a850e269763628c7e5076fe15c0e9f6d1b03734","modified":1672709344006},{"_id":"source/_posts/20180720.md","hash":"70eaca40bc8071828e61123b54b01464ebd02229","modified":1672709344006},{"_id":"source/_posts/20180727.md","hash":"609f58ef348210750d15431d267907e3a1953ae9","modified":1672709344006},{"_id":"source/_posts/20180802.md","hash":"f3e471b255ba1a4449d30ada6beaf7befecc0b4d","modified":1672709344006},{"_id":"source/_posts/20180815.md","hash":"cd29cb51eff149ef0e25696263118dc800ebd29f","modified":1672709344006},{"_id":"source/_posts/20180916.md","hash":"63a4f28afb11da969d68b79644d69d6ec9c1c317","modified":1672709344006},{"_id":"source/_posts/20181010.md","hash":"ae5f5c8ae36422001f74e9009600ab68e00b5a1c","modified":1672709344006},{"_id":"source/_posts/20181023.md","hash":"beef9617854076b15b685ffac25945a0681201ff","modified":1672709344006},{"_id":"source/_posts/20181112.md","hash":"9e5e5396b099da5cc757129c41dfe9533245eeb0","modified":1672709344007},{"_id":"source/_posts/20181111.md","hash":"bda146826d3c1829b0afa9c3303240158cbcb500","modified":1672709344006},{"_id":"source/_posts/20181115.md","hash":"0c8e2dee17800fbfe7f18ded37587f6a8e4ca771","modified":1672709344007},{"_id":"source/_posts/20181113.md","hash":"f1bdfbc3ee5ada11a8668813368f18b4806e3f55","modified":1672709344007},{"_id":"source/_posts/20190107.md","hash":"0a195df11e8a310addd95677120c5e27b55dc8dd","modified":1672709344007},{"_id":"source/_posts/20181114.md","hash":"fade689dc7bc20a80a05c2ee213fb4489ac61edc","modified":1672709344007},{"_id":"source/_posts/20190112.md","hash":"cc7b9dbf4c68b14666a6d9591cbb33325b0ebf2e","modified":1672709344007},{"_id":"source/_posts/20210728.md","hash":"e5fd2b522f7cb86853b662329a279ac786ba7e38","modified":1672709344007},{"_id":"source/_posts/20210807.md","hash":"d5bcdb139b1b9c11c46b7a78f2a04fe4773ccd43","modified":1672709344007},{"_id":"source/_posts/20210809.md","hash":"cedb6c3061fc52b91cf1beac40eab5ed6df15d52","modified":1672709344007},{"_id":"source/_posts/20210818.md","hash":"83aadaccafac26feac74dc805329dc7b8b820db6","modified":1672709344008},{"_id":"source/_posts/20210819.md","hash":"f0056d6e00d76e45a5d6a8572d902c8ed878db75","modified":1672709344008},{"_id":"source/_posts/20210907.md","hash":"334f9f14c4fdcb6518d27b34708c2d9a3283a0b3","modified":1672709344008},{"_id":"source/_posts/20220514.md","hash":"60ed23227d905c8c90b878270e63fc416e56c1f0","modified":1672709344008},{"_id":"source/about/index.md","hash":"6d75276204fc3ea6bdde9cb9d19f65ea3fe5b785","modified":1672709344008},{"_id":"source/categories/index.md","hash":"286902e1a3f2259e4ac980e4831f78fd1b728ff5","modified":1672709344008},{"_id":"source/tags/index.md","hash":"522a7f03486a3113d6a4cec3bfa0cbb7c2e70c9c","modified":1672709344008},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1672709344009},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1672709344009},{"_id":"source/_posts/20210730.md","hash":"3e80aae58762751ae22d850ab3db7b1440f6d51b","modified":1672709344007},{"_id":"source/_posts/20210803.md","hash":"0a4de17a1605c9bed4eaa958350d99a7b3f53635","modified":1672709344007},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1672709344009},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1672709344009},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1672709344009},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1672709344012},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1672709344012},{"_id":"themes/yelee/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1672709344012},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1672709344012},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1672709344013},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1672709344013},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1672709344013},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1672709344013},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"4024557da5cd7925084eb0bdf045ef438a0b5754","modified":1672709344009},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"8af583c5f60c69ffdc97bee4e8fdac1ba34ebecd","modified":1672709344009},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1672709344010},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"d781737389f408a5dd57a0f9430d2704b7fe192c","modified":1672709344010},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"a439ebf7c4798ad3830e66ccf226a60b05ffea0a","modified":1672709344010},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1672709344010},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1672709344011},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"2ea24319611a8fceeed4491c710920ab72b3e165","modified":1672709344010},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1672709344011},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"8ef930a8ed8b1a3d71b18cca02bc4963e310cf00","modified":1672709344011},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"6ea8bacacc8370ccf5af4e6f66da3bc743b88342","modified":1672709344011},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"48696ded8e57def05d7ea58e74730f49d66ea6b5","modified":1672709344011},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"252f3757edea31d55a7e5624e2214f268bf07283","modified":1672709344011},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1672709344011},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1672709344012},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"9e504a0ec060ac3c6622855734ebea6eca2b78e9","modified":1672709344011},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"190efc2e8ee037387685ff7dd24ae6db8bc77c60","modified":1672709344011},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"6da102cd4a05bc6b4807b937862a7332f6845e5f","modified":1672709344012},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"a0c6362e0f0161bbb7e70d50a4d9e39f2ff8ca48","modified":1672709344012},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1672709344012},{"_id":"themes/yelee/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1672709344016},{"_id":"themes/yelee/source/css/_variables.styl","hash":"bca217a64e422ea7a4a1748b8fc980b408e8c836","modified":1672709344019},{"_id":"themes/yelee/source/css/style.styl","hash":"33519d7a6be12193795382840810e9ab1a5eae8e","modified":1672709344019},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1672709344019},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1672709344019},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1672709344019},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1672709344019},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1672709344019},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1672709344019},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1672709344019},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1672709344019},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1672709344020},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1672709344020},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1672709344020},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1672709344020},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1672709344024},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1672709344024},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1672709344024},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1672709344024},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1672709344024},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1672709344024},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1672709344024},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1672709344024},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1672709344014},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1672709344014},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1672709344015},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1672709344015},{"_id":"themes/yelee/source/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1672709344024},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1672709344024},{"_id":"themes/yelee/source/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1672709344025},{"_id":"themes/yelee/source/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1672709344025},{"_id":"themes/yelee/source/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1672709344025},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1672709344025},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1672709344025},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1672709344015},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1672709344016},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1672709344010},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1672709344010},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"b0b73b4629983b4de447418f30bf744cdf7ed044","modified":1672709344010},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"15c269b81046b22ee44d38d9a08fc66618318435","modified":1672709344010},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1672709344010},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"265bb12f7cfa5e0bcbb74fdd409ba13a6d9d2e22","modified":1672709344011},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"593cdf0a9eca655c8a763f2d5fb22254d19b1252","modified":1672709344012},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"357a8de8a7ed8194efc16f55f97f7e2551b31bf9","modified":1672709344011},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"9dad471e27de9e066666f3082137eccaede2e67b","modified":1672709344012},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1672709344012},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"60cb646f3bc22c46d6ff4b95bb36dad577ed76c0","modified":1672709344012},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"416786f566582fe697a12bb03a9eb2d1c604e2c7","modified":1672709344016},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"45d36a307c22a754ed87f3ae6441ba8616f7329c","modified":1672709344016},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"384f9a9c017400b12f52ac33759380075e527998","modified":1672709344017},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4dcf5d3e3435897de91b39473a93fb7c3ad73dde","modified":1672709344017},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1672709344017},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"db9cc156c7df27f7f54b0e7ff34b5949f55f99eb","modified":1672709344017},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"d82129844528ae1a5c9547bc6d3f5bd37b0fb801","modified":1672709344017},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"034eb9605e006a0d0098bd963e9cdc11a1eaf6c3","modified":1672709344017},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"4681032f51fd0df6451051ba35efa1f9f745c302","modified":1672709344018},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"d05287b44c64576b8560461bc6c3b7e8ceda5539","modified":1672709344018},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"1932774d30b8706919342f9cf36ea2d99987ce14","modified":1672709344018},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1672709344018},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"24ff28457b5e1519a8b4561284f6159bdd827ad4","modified":1672709344018},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"9d7847cc899970a19d288c9eec9f24691c053ef3","modified":1672709344018},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1672709344018},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1672709344018},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1672709344018},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1672709344019},{"_id":"themes/yelee/source/img/posts/JVM内存模型.png","hash":"471c80a05af52e2c9b9528bdb6010a9fda1b23d4","modified":1672709344020},{"_id":"themes/yelee/source/img/posts/MyBatis.png","hash":"beec07d8f23bf7db21b438840d75235ecc1de7b4","modified":1672709344021},{"_id":"themes/yelee/source/img/posts/Redis数据结构.png","hash":"2e41fb643c2545ae384dc4cc231086f62f2a0e0a","modified":1672709344021},{"_id":"themes/yelee/source/img/posts/同步非阻塞IO.png","hash":"fcf731ce6361d1e960341b870f7b4566dccf646c","modified":1672709344021},{"_id":"themes/yelee/source/img/posts/同步阻塞IO.png","hash":"d036f41461f8e8b85c580f78b7b12d836ad5955e","modified":1672709344021},{"_id":"themes/yelee/source/img/posts/索引优化.png","hash":"57f3578a2eee3477158102ecc96f4eefdc444b1e","modified":1672709344021},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1672709344013},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1672709344013},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1672709344014},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1672709344014},{"_id":"themes/yelee/source/img/posts/Java内存模型.png","hash":"9855050bb237ea4f333cb8e77d55a782dea1525c","modified":1672709344020},{"_id":"themes/yelee/source/img/posts/聚簇索引.png","hash":"64d1d1b8e841cf95b54a84cf3bd0221aa264ef7e","modified":1672709344023},{"_id":"themes/yelee/source/img/posts/车辆监控平台架构.png","hash":"c464bf55601c2df591c7855c073831f88651f1b2","modified":1672709344024},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"816044b7680514626981e945ee6be943a5de60a7","modified":1672709344017},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"9b96dd1c51b43a1130b3bb6eedb293b77eef8b1d","modified":1672709344016},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"ebf7ca8598d93235479460ea7d1be97d44224b05","modified":1672709344016},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1672709344017},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"2014a25ec300910b8a093ec8010f6703a2142021","modified":1672709344017},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1672709344017},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"365026a5a30bcc88bec1b46c391c7d3bce41f033","modified":1672709344017},{"_id":"themes/yelee/source/img/posts/缺失值范围.png","hash":"af047ec05cfaccee988338c7d6cbf71a08bd38da","modified":1672709344022},{"_id":"source/_posts/20230215.md","hash":"125b611f34a9cf7b31112db31d590fbd4ac4038f","modified":1676426441451},{"_id":"source/_posts/20230218.md","hash":"1b8f990970660a199bde152b7a1b622883d7d790","modified":1676439234082},{"_id":"source/_posts/20230217.md","hash":"e88001e986dcfb9af0f9f2729630a3608189e8de","modified":1676438847190},{"_id":"source/_posts/20230216.md","hash":"d83189a0dfdab13cf1ca6552534a54c9dda5ac48","modified":1676454825487},{"_id":"source/_posts/20230219.md","hash":"85d496a45dbbbea341387d6439e39924500514ee","modified":1676525824937}],"Category":[{"name":"综合模块","_id":"clcogfn0n0002cwyus6o95kgt"},{"name":"基础模块","_id":"clcogfn0p0006cwyuk4u07puo"},{"name":"应用模块","_id":"clcogfn0s000qcwyum1u6kwke"}],"Data":[],"Page":[{"title":"分类","date":"2017-12-23T12:34:27.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-12-23 20:34:27\ntype: \"categories\"\n---\n","updated":"2023-01-03T01:29:04.008Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clcogfn100025cwyudfrfqfgx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-07-28T07:17:20.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-07-28 15:17:20\ntype: \"tags\"\n---\n","updated":"2023-01-03T01:29:04.008Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clcogfn100027cwyu4repd6n7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2017-12-23T12:34:27.000Z","type":"about","_content":"\nJava码农一枚，专注车联网领域。\n\n# 工作经历\n* 2021.12 - 至今 ：极氪汽车（上海）有限公司\n* 2019.11 - 2021.12 ：上海仙豆智能机器人有限公司\n* 2018.10 - 2019.11 上海中移智行有限公司\n* 2015.12 - 2018.10 : 苏州科达科技股份有限公司\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-12-23 20:34:27\ntype: \"about\"\n---\n\nJava码农一枚，专注车联网领域。\n\n# 工作经历\n* 2021.12 - 至今 ：极氪汽车（上海）有限公司\n* 2019.11 - 2021.12 ：上海仙豆智能机器人有限公司\n* 2018.10 - 2019.11 上海中移智行有限公司\n* 2015.12 - 2018.10 : 苏州科达科技股份有限公司\n\n","updated":"2023-01-03T01:29:04.008Z","path":"about/index.html","comments":1,"layout":"page","_id":"clcogfn11002acwyulmtiwnsz","content":"<p>Java码农一枚，专注车联网领域。</p>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><ul>\n<li>2021.12 - 至今 ：极氪汽车（上海）有限公司</li>\n<li>2019.11 - 2021.12 ：上海仙豆智能机器人有限公司</li>\n<li>2018.10 - 2019.11 上海中移智行有限公司</li>\n<li>2015.12 - 2018.10 : 苏州科达科技股份有限公司</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Java码农一枚，专注车联网领域。</p>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><ul>\n<li>2021.12 - 至今 ：极氪汽车（上海）有限公司</li>\n<li>2019.11 - 2021.12 ：上海仙豆智能机器人有限公司</li>\n<li>2018.10 - 2019.11 上海中移智行有限公司</li>\n<li>2015.12 - 2018.10 : 苏州科达科技股份有限公司</li>\n</ul>\n"}],"Post":[{"title":"硬技能图谱","_content":"\n程序员的核心竞争力\n\n- **学习能力**，尤其是自学能力，你啥时看到那些有名的程序高手在论坛上问“学习XX该看什么书，如何快速学习XXX，学习XXX有什么代码推荐”之类的问题，他们想学什么很快就能自己找到相关资料。这个行业发展太快，技术淘汰的速度也很快，3年不学新东西就可能落伍了。\n- **动手能力**，都是看书看资料，当别人还在纠结看什么书，还在纠结书里的字句是什么意思的时候，有些人的几百上千行代码都已经能运行了。\n- **耐心和毅力**，做程序员兴趣固然重要，写自己喜欢的代码那是相当愉快的事情，但是程序开发中无论如何还有大量乏味无趣的事情，要能坚持，咬牙把这些做完。\n- **表达能力**，能在大庭广众下，把自己的想法逻辑清晰流畅地讲出来，让人听懂。\n\n<!-- more -->\n\n![img](http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png)\n\n![img](http://s0.lgstatic.com/i/image2/M01/89/7A/CgotOV12QGeAMyl9AAChmvajJmw343.png)\n\n","source":"_posts/20170918.md","raw":"---\ntitle: 硬技能图谱\ncategory: 综合模块\n---\n\n程序员的核心竞争力\n\n- **学习能力**，尤其是自学能力，你啥时看到那些有名的程序高手在论坛上问“学习XX该看什么书，如何快速学习XXX，学习XXX有什么代码推荐”之类的问题，他们想学什么很快就能自己找到相关资料。这个行业发展太快，技术淘汰的速度也很快，3年不学新东西就可能落伍了。\n- **动手能力**，都是看书看资料，当别人还在纠结看什么书，还在纠结书里的字句是什么意思的时候，有些人的几百上千行代码都已经能运行了。\n- **耐心和毅力**，做程序员兴趣固然重要，写自己喜欢的代码那是相当愉快的事情，但是程序开发中无论如何还有大量乏味无趣的事情，要能坚持，咬牙把这些做完。\n- **表达能力**，能在大庭广众下，把自己的想法逻辑清晰流畅地讲出来，让人听懂。\n\n<!-- more -->\n\n![img](http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png)\n\n![img](http://s0.lgstatic.com/i/image2/M01/89/7A/CgotOV12QGeAMyl9AAChmvajJmw343.png)\n\n","slug":"20170918","published":1,"date":"2023-01-03T01:29:04.005Z","updated":"2023-01-03T01:29:04.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0l0000cwyu3aeln2qy","content":"<p>程序员的核心竞争力</p>\n<ul>\n<li><strong>学习能力</strong>，尤其是自学能力，你啥时看到那些有名的程序高手在论坛上问“学习XX该看什么书，如何快速学习XXX，学习XXX有什么代码推荐”之类的问题，他们想学什么很快就能自己找到相关资料。这个行业发展太快，技术淘汰的速度也很快，3年不学新东西就可能落伍了。</li>\n<li><strong>动手能力</strong>，都是看书看资料，当别人还在纠结看什么书，还在纠结书里的字句是什么意思的时候，有些人的几百上千行代码都已经能运行了。</li>\n<li><strong>耐心和毅力</strong>，做程序员兴趣固然重要，写自己喜欢的代码那是相当愉快的事情，但是程序开发中无论如何还有大量乏味无趣的事情，要能坚持，咬牙把这些做完。</li>\n<li><strong>表达能力</strong>，能在大庭广众下，把自己的想法逻辑清晰流畅地讲出来，让人听懂。</li>\n</ul>\n<a id=\"more\"></a>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png\" alt=\"img\"></p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/89/7A/CgotOV12QGeAMyl9AAChmvajJmw343.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<p>程序员的核心竞争力</p>\n<ul>\n<li><strong>学习能力</strong>，尤其是自学能力，你啥时看到那些有名的程序高手在论坛上问“学习XX该看什么书，如何快速学习XXX，学习XXX有什么代码推荐”之类的问题，他们想学什么很快就能自己找到相关资料。这个行业发展太快，技术淘汰的速度也很快，3年不学新东西就可能落伍了。</li>\n<li><strong>动手能力</strong>，都是看书看资料，当别人还在纠结看什么书，还在纠结书里的字句是什么意思的时候，有些人的几百上千行代码都已经能运行了。</li>\n<li><strong>耐心和毅力</strong>，做程序员兴趣固然重要，写自己喜欢的代码那是相当愉快的事情，但是程序开发中无论如何还有大量乏味无趣的事情，要能坚持，咬牙把这些做完。</li>\n<li><strong>表达能力</strong>，能在大庭广众下，把自己的想法逻辑清晰流畅地讲出来，让人听懂。</li>\n</ul>","more":"<p><img src=\"http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png\" alt=\"img\"></p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/89/7A/CgotOV12QGeAMyl9AAChmvajJmw343.png\" alt=\"img\"></p>"},{"title":"操作系统与计算机网络","_content":"\n<!-- more -->\n\n## 计算机网络\n\n### HTTP\n\n### TCP\n三次握手建连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png)\n\n四次挥手断连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png)\n\n### UDP\n\n### QUIC\n\n### RPC\n\n### MQTT\n\n### GB32960(新能源通信协议)\n[在线文档](http://c.gb688.cn/bzgk/gb/showGb?type=online&hcno=674DE45C0AD3DE2CD75B9C4CD8ED57C1)\n\n\n## 操作系统\n\n### 位运算符\n* \">>\" ：右移，向右进行移位操作，低位丢弃，高位补 0。例如：m >> n,相当于 m 除以2的 n 次方并取商。\n* \">>>\" : 无符号右移\n* \"<<\" ：左移，向左进行移位操作，高位丢弃，低位补 0。例如：m << n,相当于 m 乘以2的 n 次方。\n* \"<<<\" : 无符号左移\n* \"&\" ：与，两个位都为1时，结果才为1。特殊场景：当 x = 2^n 时，y % x = y & ( x - 1 )\n* \"%\" ：求余\n* \"|\" ：或，两个位都为0时，结果才为0。\n* \"^\" ：异或，两个位相同为0，相异为1。\n\n### top\n### netstat\n- MAC telnet 端口: nc -vz -w 2 ip port\n- netstat -nlpt\n\n## 经验\n生产配置：4C8G\n\n\n","source":"_posts/20171212.md","raw":"---\ntitle: 操作系统与计算机网络\ncategory: 基础模块\n---\n\n<!-- more -->\n\n## 计算机网络\n\n### HTTP\n\n### TCP\n三次握手建连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png)\n\n四次挥手断连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png)\n\n### UDP\n\n### QUIC\n\n### RPC\n\n### MQTT\n\n### GB32960(新能源通信协议)\n[在线文档](http://c.gb688.cn/bzgk/gb/showGb?type=online&hcno=674DE45C0AD3DE2CD75B9C4CD8ED57C1)\n\n\n## 操作系统\n\n### 位运算符\n* \">>\" ：右移，向右进行移位操作，低位丢弃，高位补 0。例如：m >> n,相当于 m 除以2的 n 次方并取商。\n* \">>>\" : 无符号右移\n* \"<<\" ：左移，向左进行移位操作，高位丢弃，低位补 0。例如：m << n,相当于 m 乘以2的 n 次方。\n* \"<<<\" : 无符号左移\n* \"&\" ：与，两个位都为1时，结果才为1。特殊场景：当 x = 2^n 时，y % x = y & ( x - 1 )\n* \"%\" ：求余\n* \"|\" ：或，两个位都为0时，结果才为0。\n* \"^\" ：异或，两个位相同为0，相异为1。\n\n### top\n### netstat\n- MAC telnet 端口: nc -vz -w 2 ip port\n- netstat -nlpt\n\n## 经验\n生产配置：4C8G\n\n\n","slug":"20171212","published":1,"date":"2023-01-03T01:29:04.005Z","updated":"2023-01-03T01:29:04.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0n0001cwyusdlb9o0c","content":"<a id=\"more\"></a>\n<h2 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h2><h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><p>三次握手建连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png\" alt=\"img\"></p>\n<p>四次挥手断连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png\" alt=\"img\"></p>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><h3 id=\"QUIC\"><a href=\"#QUIC\" class=\"headerlink\" title=\"QUIC\"></a>QUIC</h3><h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><h3 id=\"MQTT\"><a href=\"#MQTT\" class=\"headerlink\" title=\"MQTT\"></a>MQTT</h3><h3 id=\"GB32960-新能源通信协议\"><a href=\"#GB32960-新能源通信协议\" class=\"headerlink\" title=\"GB32960(新能源通信协议)\"></a>GB32960(新能源通信协议)</h3><p><a href=\"http://c.gb688.cn/bzgk/gb/showGb?type=online&amp;hcno=674DE45C0AD3DE2CD75B9C4CD8ED57C1\" target=\"_blank\" rel=\"external\">在线文档</a></p>\n<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><ul>\n<li>“&gt;&gt;” ：右移，向右进行移位操作，低位丢弃，高位补 0。例如：m &gt;&gt; n,相当于 m 除以2的 n 次方并取商。</li>\n<li>“&gt;&gt;&gt;” : 无符号右移</li>\n<li>“&lt;&lt;” ：左移，向左进行移位操作，高位丢弃，低位补 0。例如：m &lt;&lt; n,相当于 m 乘以2的 n 次方。</li>\n<li>“&lt;&lt;&lt;” : 无符号左移</li>\n<li>“&amp;” ：与，两个位都为1时，结果才为1。特殊场景：当 x = 2^n 时，y % x = y &amp; ( x - 1 )</li>\n<li>“%” ：求余</li>\n<li>“|” ：或，两个位都为0时，结果才为0。</li>\n<li>“^” ：异或，两个位相同为0，相异为1。</li>\n</ul>\n<h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><ul>\n<li>MAC telnet 端口: nc -vz -w 2 ip port</li>\n<li>netstat -nlpt</li>\n</ul>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><p>生产配置：4C8G</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h2><h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><p>三次握手建连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png\" alt=\"img\"></p>\n<p>四次挥手断连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png\" alt=\"img\"></p>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><h3 id=\"QUIC\"><a href=\"#QUIC\" class=\"headerlink\" title=\"QUIC\"></a>QUIC</h3><h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><h3 id=\"MQTT\"><a href=\"#MQTT\" class=\"headerlink\" title=\"MQTT\"></a>MQTT</h3><h3 id=\"GB32960-新能源通信协议\"><a href=\"#GB32960-新能源通信协议\" class=\"headerlink\" title=\"GB32960(新能源通信协议)\"></a>GB32960(新能源通信协议)</h3><p><a href=\"http://c.gb688.cn/bzgk/gb/showGb?type=online&amp;hcno=674DE45C0AD3DE2CD75B9C4CD8ED57C1\" target=\"_blank\" rel=\"external\">在线文档</a></p>\n<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><ul>\n<li>“&gt;&gt;” ：右移，向右进行移位操作，低位丢弃，高位补 0。例如：m &gt;&gt; n,相当于 m 除以2的 n 次方并取商。</li>\n<li>“&gt;&gt;&gt;” : 无符号右移</li>\n<li>“&lt;&lt;” ：左移，向左进行移位操作，高位丢弃，低位补 0。例如：m &lt;&lt; n,相当于 m 乘以2的 n 次方。</li>\n<li>“&lt;&lt;&lt;” : 无符号左移</li>\n<li>“&amp;” ：与，两个位都为1时，结果才为1。特殊场景：当 x = 2^n 时，y % x = y &amp; ( x - 1 )</li>\n<li>“%” ：求余</li>\n<li>“|” ：或，两个位都为0时，结果才为0。</li>\n<li>“^” ：异或，两个位相同为0，相异为1。</li>\n</ul>\n<h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><ul>\n<li>MAC telnet 端口: nc -vz -w 2 ip port</li>\n<li>netstat -nlpt</li>\n</ul>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><p>生产配置：4C8G</p>"},{"title":"Java","_content":"\n## 常用集合\n### HashMap\n底层实现：数组加链表，数组中的每一项是一个链表，链表中的节点存储的是键值对。通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置。用链表来解决散列冲突，\n#### 数组下标计算过程\n~~~java\nhash = (h = key.hashCode()) ^ (h >>> 16)\n// n为数组长度，下面代码等价于 n % hash\n(n - 1) & hash\n~~~\n1111 1101 1101 1111 0101 1101 0010 1111 ：key.hashCode()\n0000 0000 0000 0000 1111 1101 1101 1111 ：h >>> 16\n—————————————————————————————————————————————————————————\n1111 1101 1101 1111 1010 0000 1111 0000 ：h ^ ( h >>> 16 )\n0000 0000 0000 0000 0000 0000 0000 1111 ：16 - 1\n—————————————————————————————————————————————————————————\n0000 0000 0000 0000 0000 0000 0000 0000\n\n总结：异或运算能更好的保留各部分的特征，如果采用&运算计算出来的值会向0靠拢，采用|运算计算出来的值会向1靠拢\n\n#### 扩容机制\n容量：默认为 1 <<< 4\n加载因子：默认0.75\n当元素数量超过阔值（容量 * 加载因子）时触发扩容，扩容后的容量是原容量的**2倍**。\n\n#### 链表插入机制\n1.7：头插法\n1.8：尾插法\n\n#### 链表转换为红黑树\n1.8版本后为减少搜索时间，当链表长度大于阔值（默认8）且数组长度大于等于64时，链表会转换为**红黑树**。\n\n单个 TreeNode 需要占用的空间大约是普通 Node 的两倍，所以只有当包含足够多的 Nodes 时才会转成 TreeNodes。\n而当桶中节点数由于移除或者 resize 变少后，又会变回普通的链表的形式，以便节省空间。\n\n\n参考文章[Java集合之一—HashMap](https://blog.csdn.net/woshimaxiao1/article/details/83661464)\n### ConcurrentHashMap\n1.7：使用 Segment （继承ReentrantLock，结构为数组加链表且均采用 volatile 修饰，保证获取时的可见性）进行分段加锁，降低并发锁定，支持 Segment 数组数量的线程并发。\n1.8：抛弃了分段锁，使用 CAS + synchronized 来提高性能，并且同 hashMap 一样增加了红黑树。\n参考文章：[HashMap？ConcurrentHashMap？相信看完这篇没人能难住你！](https://blog.csdn.net/weixin_44460333/article/details/86770169)\n\n## Stream\n### 中间操作符\n- map\n- flatmap\n- limit\n- distint\n- filter\n- peek\n- skip\n- sorted\n```java\n// 简单，正序\nComparator.comparing(Object::参数)\n// 简单，倒序\nComparator.comparing(Object::参数).reversed()\n// 复杂\nComparator.comparing((o1, o2) -> {return -1/0/1})\n\n```\n\n### 终止操作符\n- collect\n  - Collectors.toMap(key,value,重复数据处理策略): 将数据转换为Map\n- count\n- findFirst、findAny\n- noneMatch、allMatch、anyMatch\n- min、max\n- reduce\n- forEach、forEachOrdered\n- toArray\n\n## 反射\n\n## 动态代理\n\n### JDK动态代理\n\n### CGLIB动态代理\nJDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。\n\n## 基础数据类型\n1 字节 = 8 位（bit）\n\n- 字符型：char\n- 布尔型：boolean\n- 数值型：\n    - 整形：byte、short、int、long\n    - 浮点型：float、double\n\n## 对象引用\n\n## 异常\n\n## 注解\n\n## SPI\n\n## 版本特性\n\n## 参考文章\n\n- [Java源码剖析34讲](https://blog.csdn.net/cenghaihengliu/category_10140480.html)\n\n","source":"_posts/20180617.md","raw":"---\ntitle: Java\ncategory: 基础模块\n---\n\n## 常用集合\n### HashMap\n底层实现：数组加链表，数组中的每一项是一个链表，链表中的节点存储的是键值对。通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置。用链表来解决散列冲突，\n#### 数组下标计算过程\n~~~java\nhash = (h = key.hashCode()) ^ (h >>> 16)\n// n为数组长度，下面代码等价于 n % hash\n(n - 1) & hash\n~~~\n1111 1101 1101 1111 0101 1101 0010 1111 ：key.hashCode()\n0000 0000 0000 0000 1111 1101 1101 1111 ：h >>> 16\n—————————————————————————————————————————————————————————\n1111 1101 1101 1111 1010 0000 1111 0000 ：h ^ ( h >>> 16 )\n0000 0000 0000 0000 0000 0000 0000 1111 ：16 - 1\n—————————————————————————————————————————————————————————\n0000 0000 0000 0000 0000 0000 0000 0000\n\n总结：异或运算能更好的保留各部分的特征，如果采用&运算计算出来的值会向0靠拢，采用|运算计算出来的值会向1靠拢\n\n#### 扩容机制\n容量：默认为 1 <<< 4\n加载因子：默认0.75\n当元素数量超过阔值（容量 * 加载因子）时触发扩容，扩容后的容量是原容量的**2倍**。\n\n#### 链表插入机制\n1.7：头插法\n1.8：尾插法\n\n#### 链表转换为红黑树\n1.8版本后为减少搜索时间，当链表长度大于阔值（默认8）且数组长度大于等于64时，链表会转换为**红黑树**。\n\n单个 TreeNode 需要占用的空间大约是普通 Node 的两倍，所以只有当包含足够多的 Nodes 时才会转成 TreeNodes。\n而当桶中节点数由于移除或者 resize 变少后，又会变回普通的链表的形式，以便节省空间。\n\n\n参考文章[Java集合之一—HashMap](https://blog.csdn.net/woshimaxiao1/article/details/83661464)\n### ConcurrentHashMap\n1.7：使用 Segment （继承ReentrantLock，结构为数组加链表且均采用 volatile 修饰，保证获取时的可见性）进行分段加锁，降低并发锁定，支持 Segment 数组数量的线程并发。\n1.8：抛弃了分段锁，使用 CAS + synchronized 来提高性能，并且同 hashMap 一样增加了红黑树。\n参考文章：[HashMap？ConcurrentHashMap？相信看完这篇没人能难住你！](https://blog.csdn.net/weixin_44460333/article/details/86770169)\n\n## Stream\n### 中间操作符\n- map\n- flatmap\n- limit\n- distint\n- filter\n- peek\n- skip\n- sorted\n```java\n// 简单，正序\nComparator.comparing(Object::参数)\n// 简单，倒序\nComparator.comparing(Object::参数).reversed()\n// 复杂\nComparator.comparing((o1, o2) -> {return -1/0/1})\n\n```\n\n### 终止操作符\n- collect\n  - Collectors.toMap(key,value,重复数据处理策略): 将数据转换为Map\n- count\n- findFirst、findAny\n- noneMatch、allMatch、anyMatch\n- min、max\n- reduce\n- forEach、forEachOrdered\n- toArray\n\n## 反射\n\n## 动态代理\n\n### JDK动态代理\n\n### CGLIB动态代理\nJDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。\n\n## 基础数据类型\n1 字节 = 8 位（bit）\n\n- 字符型：char\n- 布尔型：boolean\n- 数值型：\n    - 整形：byte、short、int、long\n    - 浮点型：float、double\n\n## 对象引用\n\n## 异常\n\n## 注解\n\n## SPI\n\n## 版本特性\n\n## 参考文章\n\n- [Java源码剖析34讲](https://blog.csdn.net/cenghaihengliu/category_10140480.html)\n\n","slug":"20180617","published":1,"date":"2023-01-03T01:29:04.005Z","updated":"2023-01-03T01:29:04.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0o0003cwyuwei0kjfq","content":"<h2 id=\"常用集合\"><a href=\"#常用集合\" class=\"headerlink\" title=\"常用集合\"></a>常用集合</h2><h3 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h3><p>底层实现：数组加链表，数组中的每一项是一个链表，链表中的节点存储的是键值对。通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置。用链表来解决散列冲突，</p>\n<h4 id=\"数组下标计算过程\"><a href=\"#数组下标计算过程\" class=\"headerlink\" title=\"数组下标计算过程\"></a>数组下标计算过程</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash = (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// n为数组长度，下面代码等价于 n % hash</span></div><div class=\"line\">(n - <span class=\"number\">1</span>) &amp; hash</div></pre></td></tr></table></figure>\n<p>1111 1101 1101 1111 0101 1101 0010 1111 ：key.hashCode()<br>0000 0000 0000 0000 1111 1101 1101 1111 ：h &gt;&gt;&gt; 16<br>—————————————————————————————————————————————————————————<br>1111 1101 1101 1111 1010 0000 1111 0000 ：h ^ ( h &gt;&gt;&gt; 16 )<br>0000 0000 0000 0000 0000 0000 0000 1111 ：16 - 1<br>—————————————————————————————————————————————————————————<br>0000 0000 0000 0000 0000 0000 0000 0000</p>\n<p>总结：异或运算能更好的保留各部分的特征，如果采用&amp;运算计算出来的值会向0靠拢，采用|运算计算出来的值会向1靠拢</p>\n<h4 id=\"扩容机制\"><a href=\"#扩容机制\" class=\"headerlink\" title=\"扩容机制\"></a>扩容机制</h4><p>容量：默认为 1 &lt;&lt;&lt; 4<br>加载因子：默认0.75<br>当元素数量超过阔值（容量 <em> 加载因子）时触发扩容，扩容后的容量是原容量的<em>*2倍</em></em>。</p>\n<h4 id=\"链表插入机制\"><a href=\"#链表插入机制\" class=\"headerlink\" title=\"链表插入机制\"></a>链表插入机制</h4><p>1.7：头插法<br>1.8：尾插法</p>\n<h4 id=\"链表转换为红黑树\"><a href=\"#链表转换为红黑树\" class=\"headerlink\" title=\"链表转换为红黑树\"></a>链表转换为红黑树</h4><p>1.8版本后为减少搜索时间，当链表长度大于阔值（默认8）且数组长度大于等于64时，链表会转换为<strong>红黑树</strong>。</p>\n<p>单个 TreeNode 需要占用的空间大约是普通 Node 的两倍，所以只有当包含足够多的 Nodes 时才会转成 TreeNodes。<br>而当桶中节点数由于移除或者 resize 变少后，又会变回普通的链表的形式，以便节省空间。</p>\n<p>参考文章<a href=\"https://blog.csdn.net/woshimaxiao1/article/details/83661464\" target=\"_blank\" rel=\"external\">Java集合之一—HashMap</a></p>\n<h3 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h3><p>1.7：使用 Segment （继承ReentrantLock，结构为数组加链表且均采用 volatile 修饰，保证获取时的可见性）进行分段加锁，降低并发锁定，支持 Segment 数组数量的线程并发。<br>1.8：抛弃了分段锁，使用 CAS + synchronized 来提高性能，并且同 hashMap 一样增加了红黑树。<br>参考文章：<a href=\"https://blog.csdn.net/weixin_44460333/article/details/86770169\" target=\"_blank\" rel=\"external\">HashMap？ConcurrentHashMap？相信看完这篇没人能难住你！</a></p>\n<h2 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h2><h3 id=\"中间操作符\"><a href=\"#中间操作符\" class=\"headerlink\" title=\"中间操作符\"></a>中间操作符</h3><ul>\n<li>map</li>\n<li>flatmap</li>\n<li>limit</li>\n<li>distint</li>\n<li>filter</li>\n<li>peek</li>\n<li>skip</li>\n<li>sorted<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 简单，正序</span></div><div class=\"line\">Comparator.comparing(Object::参数)</div><div class=\"line\"><span class=\"comment\">// 简单，倒序</span></div><div class=\"line\">Comparator.comparing(Object::参数).reversed()</div><div class=\"line\"><span class=\"comment\">// 复杂</span></div><div class=\"line\">Comparator.comparing((o1, o2) -&gt; &#123;<span class=\"keyword\">return</span> -<span class=\"number\">1</span>/<span class=\"number\">0</span>/<span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"终止操作符\"><a href=\"#终止操作符\" class=\"headerlink\" title=\"终止操作符\"></a>终止操作符</h3><ul>\n<li>collect<ul>\n<li>Collectors.toMap(key,value,重复数据处理策略): 将数据转换为Map</li>\n</ul>\n</li>\n<li>count</li>\n<li>findFirst、findAny</li>\n<li>noneMatch、allMatch、anyMatch</li>\n<li>min、max</li>\n<li>reduce</li>\n<li>forEach、forEachOrdered</li>\n<li>toArray</li>\n</ul>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><h3 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h3><p>JDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。</p>\n<h2 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h2><p>1 字节 = 8 位（bit）</p>\n<ul>\n<li>字符型：char</li>\n<li>布尔型：boolean</li>\n<li>数值型：<ul>\n<li>整形：byte、short、int、long</li>\n<li>浮点型：float、double</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h2><h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><h2 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a>SPI</h2><h2 id=\"版本特性\"><a href=\"#版本特性\" class=\"headerlink\" title=\"版本特性\"></a>版本特性</h2><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://blog.csdn.net/cenghaihengliu/category_10140480.html\" target=\"_blank\" rel=\"external\">Java源码剖析34讲</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用集合\"><a href=\"#常用集合\" class=\"headerlink\" title=\"常用集合\"></a>常用集合</h2><h3 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h3><p>底层实现：数组加链表，数组中的每一项是一个链表，链表中的节点存储的是键值对。通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置。用链表来解决散列冲突，</p>\n<h4 id=\"数组下标计算过程\"><a href=\"#数组下标计算过程\" class=\"headerlink\" title=\"数组下标计算过程\"></a>数组下标计算过程</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash = (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// n为数组长度，下面代码等价于 n % hash</span></div><div class=\"line\">(n - <span class=\"number\">1</span>) &amp; hash</div></pre></td></tr></table></figure>\n<p>1111 1101 1101 1111 0101 1101 0010 1111 ：key.hashCode()<br>0000 0000 0000 0000 1111 1101 1101 1111 ：h &gt;&gt;&gt; 16<br>—————————————————————————————————————————————————————————<br>1111 1101 1101 1111 1010 0000 1111 0000 ：h ^ ( h &gt;&gt;&gt; 16 )<br>0000 0000 0000 0000 0000 0000 0000 1111 ：16 - 1<br>—————————————————————————————————————————————————————————<br>0000 0000 0000 0000 0000 0000 0000 0000</p>\n<p>总结：异或运算能更好的保留各部分的特征，如果采用&amp;运算计算出来的值会向0靠拢，采用|运算计算出来的值会向1靠拢</p>\n<h4 id=\"扩容机制\"><a href=\"#扩容机制\" class=\"headerlink\" title=\"扩容机制\"></a>扩容机制</h4><p>容量：默认为 1 &lt;&lt;&lt; 4<br>加载因子：默认0.75<br>当元素数量超过阔值（容量 <em> 加载因子）时触发扩容，扩容后的容量是原容量的<em>*2倍</em></em>。</p>\n<h4 id=\"链表插入机制\"><a href=\"#链表插入机制\" class=\"headerlink\" title=\"链表插入机制\"></a>链表插入机制</h4><p>1.7：头插法<br>1.8：尾插法</p>\n<h4 id=\"链表转换为红黑树\"><a href=\"#链表转换为红黑树\" class=\"headerlink\" title=\"链表转换为红黑树\"></a>链表转换为红黑树</h4><p>1.8版本后为减少搜索时间，当链表长度大于阔值（默认8）且数组长度大于等于64时，链表会转换为<strong>红黑树</strong>。</p>\n<p>单个 TreeNode 需要占用的空间大约是普通 Node 的两倍，所以只有当包含足够多的 Nodes 时才会转成 TreeNodes。<br>而当桶中节点数由于移除或者 resize 变少后，又会变回普通的链表的形式，以便节省空间。</p>\n<p>参考文章<a href=\"https://blog.csdn.net/woshimaxiao1/article/details/83661464\" target=\"_blank\" rel=\"external\">Java集合之一—HashMap</a></p>\n<h3 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h3><p>1.7：使用 Segment （继承ReentrantLock，结构为数组加链表且均采用 volatile 修饰，保证获取时的可见性）进行分段加锁，降低并发锁定，支持 Segment 数组数量的线程并发。<br>1.8：抛弃了分段锁，使用 CAS + synchronized 来提高性能，并且同 hashMap 一样增加了红黑树。<br>参考文章：<a href=\"https://blog.csdn.net/weixin_44460333/article/details/86770169\" target=\"_blank\" rel=\"external\">HashMap？ConcurrentHashMap？相信看完这篇没人能难住你！</a></p>\n<h2 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h2><h3 id=\"中间操作符\"><a href=\"#中间操作符\" class=\"headerlink\" title=\"中间操作符\"></a>中间操作符</h3><ul>\n<li>map</li>\n<li>flatmap</li>\n<li>limit</li>\n<li>distint</li>\n<li>filter</li>\n<li>peek</li>\n<li>skip</li>\n<li>sorted<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 简单，正序</span></div><div class=\"line\">Comparator.comparing(Object::参数)</div><div class=\"line\"><span class=\"comment\">// 简单，倒序</span></div><div class=\"line\">Comparator.comparing(Object::参数).reversed()</div><div class=\"line\"><span class=\"comment\">// 复杂</span></div><div class=\"line\">Comparator.comparing((o1, o2) -&gt; &#123;<span class=\"keyword\">return</span> -<span class=\"number\">1</span>/<span class=\"number\">0</span>/<span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"终止操作符\"><a href=\"#终止操作符\" class=\"headerlink\" title=\"终止操作符\"></a>终止操作符</h3><ul>\n<li>collect<ul>\n<li>Collectors.toMap(key,value,重复数据处理策略): 将数据转换为Map</li>\n</ul>\n</li>\n<li>count</li>\n<li>findFirst、findAny</li>\n<li>noneMatch、allMatch、anyMatch</li>\n<li>min、max</li>\n<li>reduce</li>\n<li>forEach、forEachOrdered</li>\n<li>toArray</li>\n</ul>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><h3 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h3><p>JDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。</p>\n<h2 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h2><p>1 字节 = 8 位（bit）</p>\n<ul>\n<li>字符型：char</li>\n<li>布尔型：boolean</li>\n<li>数值型：<ul>\n<li>整形：byte、short、int、long</li>\n<li>浮点型：float、double</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h2><h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><h2 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a>SPI</h2><h2 id=\"版本特性\"><a href=\"#版本特性\" class=\"headerlink\" title=\"版本特性\"></a>版本特性</h2><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://blog.csdn.net/cenghaihengliu/category_10140480.html\" target=\"_blank\" rel=\"external\">Java源码剖析34讲</a></li>\n</ul>\n"},{"title":"设计模式","_content":"\n设计模式分为 3 大类型共 23 种：\n* **创建型**：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n* **结构型**：适配器模式、桥接模式、组合模式、装饰模式、门面模式、享元模式和代理模式。\n* **行为型**：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。\n\n\n\n<!-- more -->\n\n# 创建型\n\n## 单例模式\n\n### 懒汉式，线程安全\n~~~java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton (){}\n    public static synchronized Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n~~~\n### 双重检验锁\n~~~java\npublic class Singleton {\n    private volatile static Singleton instance;\n    private Singleton (){}\n    public static Singleton getSingleton() {\n        if (instance == null) {                         \n            synchronized (Singleton.class) {\n                if (instance == null) {       \n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n~~~\n### 饿汉式\n~~~java\npublic class Singleton{\n    //类加载时就初始化\n    private static final Singleton instance = new Singleton();\n    private Singleton(){}\n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n~~~\n### 静态内部类\n~~~java\npublic class Singleton {  \n    private static class SingletonHolder {  \n        private static final Singleton INSTANCE = new Singleton();  \n    }  \n    private Singleton (){}  \n    public static final Singleton getInstance() {  \n        return SingletonHolder.INSTANCE; \n    }  \n}\n~~~\n### 枚举\n~~~java\npublic enum EasySingleton{\n    INSTANCE;\n}\n~~~\n\n# 结构型\n\n## 适配器模式\n\n使用频率：☆☆☆☆☆\n\n定义：将类的接口转换为客户期望的另一个接口，适配器可以让不兼容的两个类一起协同工作。\n\n关键角色：\n\n- **目标类，** 适配器类即将要进行适配的抽象类或接口；\n- **适配器类，** 可以是类或接口，是作为具体适配者类的中间类来使用；\n- **具体适配者类，** 可以是内部的类或服务，也可以是外部对象或服务。\n\n## 桥接模式\n\n使用频率：☆☆☆☆☆\n\n定义：将抽象部分与它的实现部分分离，使它们都可以独立地变化。\n\n关键角色：\n\n- **抽象实体**：定义的一种抽象分类。比如，电脑中的 CPU、内存、摄像头、显示屏等。\n- **具体实体**：继承抽象实体的子类实体。比如，Intel i7 CPU、三星内存、徕卡摄像头、京东方显示屏幕等。\n- **抽象行为**：定义抽象实体中具备的多种行为。比如，CPU 逻辑运算、内存读写存储、摄像头拍照、屏幕显示图像等。\n- **具体行为**：实现抽象行为的具体算法。比如，Intel 使用 X64 架构实现 CPU 逻辑运算，Mac M1 芯片使用 ARM 架构实现 CPU 逻辑运算，等等。\n\n**桥接模式的本质是通过对一个对象进行实体与行为的分离，来将需要使用多层继承的场景转换为使用组合或聚合的方式，进而解耦对象间的强耦合关系，达到对象与对象之间的动态绑定的效果，提升代码结构的扩展性**。\n\n## 代理模式\n\n使用频率：☆☆☆☆☆\n\n定义：让你能够提供对象的替代品或其[占位符。代理控制着对于原对象的访问，并允许将请求提交给对象前后进行一些处理。\n\n关键角色：\n\n- **抽象主题类（RealObject）**：声明公用的方法，定义可供客户端使用的统一功能。\n- **主题实现类（RealObjectImpl）**：实现了抽象主题类的所有方法。\n- **代理类（Proxy）**：实现了抽象主题类的方法，并隐藏在代理后面可能其他类的实现。\n\n## 装饰模式\n\n使用频率：☆☆☆☆☆\n\n定义：允许动态地向一个现有的对象添加新的功能，同时又不改变其结构，相当于对现有的对象进行了一个包装。\n\n关键角色：\n\n- **组件**：作为装饰器类包装的目标类。\n- **具体组件**：实现组件的基础子类。\n- **装饰器**：一个抽象类，其中包含对组件的引用，并且还重写了组件接口方法。\n- **具体装饰器**：继承扩展了装饰器，并重写组件接口方法，同时可以添加附加功能。\n\n## 门面模式\n\n使用频率：☆☆☆☆☆\n\n定义：为子系统中的一组接口提供统一的接口。它定义了一个更高级别的接口，使子系统更易于使用。\n\n关键角色：\n\n- **门面系统**，负责处理依赖子系统的请求，并将请求代理给适当的子系统进行处理；\n- **子系统**，代表某个领域内的功能实现，比如，订单、用户、支付等，专门处理由门面系统指派的任务。\n\n## 组合模式\n\n使用频率：☆\n\n定义：将对象组合成树形结构以表示整个部分的层次结构。组合模式可以让用户统一对待单个对象和对象的组合。\n\n关键角色：\n\n## 享元模式\n\n使用频率：☆\n\n定义：摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，从而让我们能在有限的内存容量中载入更多对象。\n\n关键角色：\n\n- **享元类（Flyweight）**：定义了享元对象需要实现的公共操作方法。在该方法中会使用一个状态作为输入参数，也叫外部状态，由客户端保存，在运行时改变。\n- **享元工厂类（Flyweight Factory）**：管理一个享元对象类的缓存池。它会存储享元对象之间需要传递的共有状态，比如，按照大写英文字母来作为状态标识，这种只在享元对象之间传递的方式就叫内部状态。同时，它还提供了一个通用方法 getFlyweight()，主要通过内部状态标识来获取享元对象。\n- **可共享的具体享元类（ConcreteFlyweight）**：能够复用享元工厂内部状态并实现享元类公共操作的具体实现类。\n- **非共享的具体享元类（UnsharedConcreteFlyweight）**：不复用享元工厂内部状态，但实现享元类的具体实现类。\n\n\n\n\n\n# 行为型\n\n## 观察者模式\n\n使用频率：☆☆☆☆☆\n\n定义：定义对象之间的一对多依赖关系，这样当一个对象改变状态时，它的所有依赖项都会自动得到通知和更新。\n\n解释：相当于**订阅-发布模式；****基于事件驱动的架构**也是观察者模式的一种最佳实践\n\n## 策略模式\n\n使用频率：☆☆☆☆☆\n\n定义：定义一系列算法，封装每个算法，并使它们可以互换。策略让算法独立于使用它的客户端而变化。\n\n\n\n- **上下文信息类**（Context）：用于存放和执行需要使用的具体策略类以及客户端调用的逻辑。\n- **抽象策略类**（Strategy）：定义策略的共有方法。\n- **具体策略类**（StrategyA 等）：实现抽象策略类定义的共有方法。\n\n## 模板方法模式\n\n使用频率：☆☆☆☆\n\n定义：在操作中定义算法的框架，将一些步骤推迟到子类中。模板方法让子类在不改变算法结构的情况下重新定义算法的某些步骤。\n\n\n\n- **抽象父类**：定义一个算法所包含的所有步骤，并提供一些通用的方法逻辑。\n- **具体子类**：继承自抽象父类，根据需要重写父类提供的算法步骤中的某些步骤。\n\n## 中介者模式\n\n使用频率：☆☆☆\n\n定义：中介者对象封装了一组对象之间的交互，这组对象会将它们的交互委托给中介者对象，而不是直接交互。\n\n\n\n- **抽象中介者**（Mediator）：定义中介者需要执行的方法操作。\n- **具体中介者**（MediatorImpl）：实现抽象中介者定义的方法操作，同时可以包含更多逻辑。\n- **抽象组件类**（Component）：定义组件需要执行的方法操作。\n- **具体组件类**（ComponentA、ComponentB）：继承自抽象组件类，实现具体的组件业务逻辑。\n\n## 状态模式\n\n使用频率：☆☆☆\n\n定义：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了自己的类一样。\n\n- **上下文信息类**（Context）：实际上就是存储当前状态的类，对外提供更新状态的操作。\n- **抽象状态类**（State）：可以是一个接口或抽象类，用于定义声明状态更新的操作方法有哪些。\n- **具体状态类**（StateA 等）：实现抽象状态类定义的方法，根据具体的场景来指定对应状态改变后的代码实现逻辑。\n\n## 责任链模式\n\n使用频率：☆☆☆\n\n定义：将一个请求封装为一个对象，从而让我们可以参数化具有不同请求、队列或日志请求的其他对象，并支持可撤销的操作。\n\n解释：命令模式是为了将一组操作封装在对象中而设计的，简单来说，就是为了将函数方法封装为对象以方便传输。\n\n## 迭代器模式\n\n使用频率：☆\n\n定义：迭代器提供一种对容器对象中的各个元素进行访问的方法，而又不需要暴露该对象的内部细节。\n\n## 命令模式\n\n使用频率：☆\n\n定义：用于定义语言的语法规则表示，并提供解释器来处理句子中的语法\n\n解释：相当于函数式编程\n\n## 解释器模式\n\n使用频率：☆\n\n定义：用于定义语言的语法规则表示，并提供解释器来处理句子中的语法。\n\n## 备忘录模式\n\n使用频率：☆\n\n定义：捕获并外部化对象的内部状态，以便以后可以恢复，所有这些都不会违反封装。\n\n- **原始对象（Originator）**：除了创建自身所需要的属性和业务逻辑外，还通过提供方法 create() 和 restore(memento) 来保存和恢复对象副本。\n- **备忘录（Memento）**：用于保存原始对象的所有属性状态，以便在未来进行撤销操作。\n\n## 访问者模式\n\n使用频率：☆\n\n定义：允许在运行时将一个或多个操作应用于一组对象，将操作与对象结构分离。\n\n\n\n# 参考文档\n\n1. [拉钩教育之趣学设计模式](https://enterpc.blog.csdn.net/category_11435606.html)\n","source":"_posts/20180618.md","raw":"---\ntitle: 设计模式\ncategory: 基础模块\n---\n\n设计模式分为 3 大类型共 23 种：\n* **创建型**：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n* **结构型**：适配器模式、桥接模式、组合模式、装饰模式、门面模式、享元模式和代理模式。\n* **行为型**：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。\n\n\n\n<!-- more -->\n\n# 创建型\n\n## 单例模式\n\n### 懒汉式，线程安全\n~~~java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton (){}\n    public static synchronized Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n~~~\n### 双重检验锁\n~~~java\npublic class Singleton {\n    private volatile static Singleton instance;\n    private Singleton (){}\n    public static Singleton getSingleton() {\n        if (instance == null) {                         \n            synchronized (Singleton.class) {\n                if (instance == null) {       \n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n~~~\n### 饿汉式\n~~~java\npublic class Singleton{\n    //类加载时就初始化\n    private static final Singleton instance = new Singleton();\n    private Singleton(){}\n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n~~~\n### 静态内部类\n~~~java\npublic class Singleton {  \n    private static class SingletonHolder {  \n        private static final Singleton INSTANCE = new Singleton();  \n    }  \n    private Singleton (){}  \n    public static final Singleton getInstance() {  \n        return SingletonHolder.INSTANCE; \n    }  \n}\n~~~\n### 枚举\n~~~java\npublic enum EasySingleton{\n    INSTANCE;\n}\n~~~\n\n# 结构型\n\n## 适配器模式\n\n使用频率：☆☆☆☆☆\n\n定义：将类的接口转换为客户期望的另一个接口，适配器可以让不兼容的两个类一起协同工作。\n\n关键角色：\n\n- **目标类，** 适配器类即将要进行适配的抽象类或接口；\n- **适配器类，** 可以是类或接口，是作为具体适配者类的中间类来使用；\n- **具体适配者类，** 可以是内部的类或服务，也可以是外部对象或服务。\n\n## 桥接模式\n\n使用频率：☆☆☆☆☆\n\n定义：将抽象部分与它的实现部分分离，使它们都可以独立地变化。\n\n关键角色：\n\n- **抽象实体**：定义的一种抽象分类。比如，电脑中的 CPU、内存、摄像头、显示屏等。\n- **具体实体**：继承抽象实体的子类实体。比如，Intel i7 CPU、三星内存、徕卡摄像头、京东方显示屏幕等。\n- **抽象行为**：定义抽象实体中具备的多种行为。比如，CPU 逻辑运算、内存读写存储、摄像头拍照、屏幕显示图像等。\n- **具体行为**：实现抽象行为的具体算法。比如，Intel 使用 X64 架构实现 CPU 逻辑运算，Mac M1 芯片使用 ARM 架构实现 CPU 逻辑运算，等等。\n\n**桥接模式的本质是通过对一个对象进行实体与行为的分离，来将需要使用多层继承的场景转换为使用组合或聚合的方式，进而解耦对象间的强耦合关系，达到对象与对象之间的动态绑定的效果，提升代码结构的扩展性**。\n\n## 代理模式\n\n使用频率：☆☆☆☆☆\n\n定义：让你能够提供对象的替代品或其[占位符。代理控制着对于原对象的访问，并允许将请求提交给对象前后进行一些处理。\n\n关键角色：\n\n- **抽象主题类（RealObject）**：声明公用的方法，定义可供客户端使用的统一功能。\n- **主题实现类（RealObjectImpl）**：实现了抽象主题类的所有方法。\n- **代理类（Proxy）**：实现了抽象主题类的方法，并隐藏在代理后面可能其他类的实现。\n\n## 装饰模式\n\n使用频率：☆☆☆☆☆\n\n定义：允许动态地向一个现有的对象添加新的功能，同时又不改变其结构，相当于对现有的对象进行了一个包装。\n\n关键角色：\n\n- **组件**：作为装饰器类包装的目标类。\n- **具体组件**：实现组件的基础子类。\n- **装饰器**：一个抽象类，其中包含对组件的引用，并且还重写了组件接口方法。\n- **具体装饰器**：继承扩展了装饰器，并重写组件接口方法，同时可以添加附加功能。\n\n## 门面模式\n\n使用频率：☆☆☆☆☆\n\n定义：为子系统中的一组接口提供统一的接口。它定义了一个更高级别的接口，使子系统更易于使用。\n\n关键角色：\n\n- **门面系统**，负责处理依赖子系统的请求，并将请求代理给适当的子系统进行处理；\n- **子系统**，代表某个领域内的功能实现，比如，订单、用户、支付等，专门处理由门面系统指派的任务。\n\n## 组合模式\n\n使用频率：☆\n\n定义：将对象组合成树形结构以表示整个部分的层次结构。组合模式可以让用户统一对待单个对象和对象的组合。\n\n关键角色：\n\n## 享元模式\n\n使用频率：☆\n\n定义：摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，从而让我们能在有限的内存容量中载入更多对象。\n\n关键角色：\n\n- **享元类（Flyweight）**：定义了享元对象需要实现的公共操作方法。在该方法中会使用一个状态作为输入参数，也叫外部状态，由客户端保存，在运行时改变。\n- **享元工厂类（Flyweight Factory）**：管理一个享元对象类的缓存池。它会存储享元对象之间需要传递的共有状态，比如，按照大写英文字母来作为状态标识，这种只在享元对象之间传递的方式就叫内部状态。同时，它还提供了一个通用方法 getFlyweight()，主要通过内部状态标识来获取享元对象。\n- **可共享的具体享元类（ConcreteFlyweight）**：能够复用享元工厂内部状态并实现享元类公共操作的具体实现类。\n- **非共享的具体享元类（UnsharedConcreteFlyweight）**：不复用享元工厂内部状态，但实现享元类的具体实现类。\n\n\n\n\n\n# 行为型\n\n## 观察者模式\n\n使用频率：☆☆☆☆☆\n\n定义：定义对象之间的一对多依赖关系，这样当一个对象改变状态时，它的所有依赖项都会自动得到通知和更新。\n\n解释：相当于**订阅-发布模式；****基于事件驱动的架构**也是观察者模式的一种最佳实践\n\n## 策略模式\n\n使用频率：☆☆☆☆☆\n\n定义：定义一系列算法，封装每个算法，并使它们可以互换。策略让算法独立于使用它的客户端而变化。\n\n\n\n- **上下文信息类**（Context）：用于存放和执行需要使用的具体策略类以及客户端调用的逻辑。\n- **抽象策略类**（Strategy）：定义策略的共有方法。\n- **具体策略类**（StrategyA 等）：实现抽象策略类定义的共有方法。\n\n## 模板方法模式\n\n使用频率：☆☆☆☆\n\n定义：在操作中定义算法的框架，将一些步骤推迟到子类中。模板方法让子类在不改变算法结构的情况下重新定义算法的某些步骤。\n\n\n\n- **抽象父类**：定义一个算法所包含的所有步骤，并提供一些通用的方法逻辑。\n- **具体子类**：继承自抽象父类，根据需要重写父类提供的算法步骤中的某些步骤。\n\n## 中介者模式\n\n使用频率：☆☆☆\n\n定义：中介者对象封装了一组对象之间的交互，这组对象会将它们的交互委托给中介者对象，而不是直接交互。\n\n\n\n- **抽象中介者**（Mediator）：定义中介者需要执行的方法操作。\n- **具体中介者**（MediatorImpl）：实现抽象中介者定义的方法操作，同时可以包含更多逻辑。\n- **抽象组件类**（Component）：定义组件需要执行的方法操作。\n- **具体组件类**（ComponentA、ComponentB）：继承自抽象组件类，实现具体的组件业务逻辑。\n\n## 状态模式\n\n使用频率：☆☆☆\n\n定义：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了自己的类一样。\n\n- **上下文信息类**（Context）：实际上就是存储当前状态的类，对外提供更新状态的操作。\n- **抽象状态类**（State）：可以是一个接口或抽象类，用于定义声明状态更新的操作方法有哪些。\n- **具体状态类**（StateA 等）：实现抽象状态类定义的方法，根据具体的场景来指定对应状态改变后的代码实现逻辑。\n\n## 责任链模式\n\n使用频率：☆☆☆\n\n定义：将一个请求封装为一个对象，从而让我们可以参数化具有不同请求、队列或日志请求的其他对象，并支持可撤销的操作。\n\n解释：命令模式是为了将一组操作封装在对象中而设计的，简单来说，就是为了将函数方法封装为对象以方便传输。\n\n## 迭代器模式\n\n使用频率：☆\n\n定义：迭代器提供一种对容器对象中的各个元素进行访问的方法，而又不需要暴露该对象的内部细节。\n\n## 命令模式\n\n使用频率：☆\n\n定义：用于定义语言的语法规则表示，并提供解释器来处理句子中的语法\n\n解释：相当于函数式编程\n\n## 解释器模式\n\n使用频率：☆\n\n定义：用于定义语言的语法规则表示，并提供解释器来处理句子中的语法。\n\n## 备忘录模式\n\n使用频率：☆\n\n定义：捕获并外部化对象的内部状态，以便以后可以恢复，所有这些都不会违反封装。\n\n- **原始对象（Originator）**：除了创建自身所需要的属性和业务逻辑外，还通过提供方法 create() 和 restore(memento) 来保存和恢复对象副本。\n- **备忘录（Memento）**：用于保存原始对象的所有属性状态，以便在未来进行撤销操作。\n\n## 访问者模式\n\n使用频率：☆\n\n定义：允许在运行时将一个或多个操作应用于一组对象，将操作与对象结构分离。\n\n\n\n# 参考文档\n\n1. [拉钩教育之趣学设计模式](https://enterpc.blog.csdn.net/category_11435606.html)\n","slug":"20180618","published":1,"date":"2023-01-03T01:29:04.005Z","updated":"2023-01-03T01:29:04.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0o0004cwyudkesoard","content":"<p>设计模式分为 3 大类型共 23 种：</p>\n<ul>\n<li><strong>创建型</strong>：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li>\n<li><strong>结构型</strong>：适配器模式、桥接模式、组合模式、装饰模式、门面模式、享元模式和代理模式。</li>\n<li><strong>行为型</strong>：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"创建型\"><a href=\"#创建型\" class=\"headerlink\" title=\"创建型\"></a>创建型</h1><h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><h3 id=\"懒汉式，线程安全\"><a href=\"#懒汉式，线程安全\" class=\"headerlink\" title=\"懒汉式，线程安全\"></a>懒汉式，线程安全</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"双重检验锁\"><a href=\"#双重检验锁\" class=\"headerlink\" title=\"双重检验锁\"></a>双重检验锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton instance;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getSingleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;                         </div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;       </div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//类加载时就初始化</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE; </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> EasySingleton&#123;</div><div class=\"line\">    INSTANCE;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"结构型\"><a href=\"#结构型\" class=\"headerlink\" title=\"结构型\"></a>结构型</h1><h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：将类的接口转换为客户期望的另一个接口，适配器可以让不兼容的两个类一起协同工作。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>目标类，</strong> 适配器类即将要进行适配的抽象类或接口；</li>\n<li><strong>适配器类，</strong> 可以是类或接口，是作为具体适配者类的中间类来使用；</li>\n<li><strong>具体适配者类，</strong> 可以是内部的类或服务，也可以是外部对象或服务。</li>\n</ul>\n<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>抽象实体</strong>：定义的一种抽象分类。比如，电脑中的 CPU、内存、摄像头、显示屏等。</li>\n<li><strong>具体实体</strong>：继承抽象实体的子类实体。比如，Intel i7 CPU、三星内存、徕卡摄像头、京东方显示屏幕等。</li>\n<li><strong>抽象行为</strong>：定义抽象实体中具备的多种行为。比如，CPU 逻辑运算、内存读写存储、摄像头拍照、屏幕显示图像等。</li>\n<li><strong>具体行为</strong>：实现抽象行为的具体算法。比如，Intel 使用 X64 架构实现 CPU 逻辑运算，Mac M1 芯片使用 ARM 架构实现 CPU 逻辑运算，等等。</li>\n</ul>\n<p><strong>桥接模式的本质是通过对一个对象进行实体与行为的分离，来将需要使用多层继承的场景转换为使用组合或聚合的方式，进而解耦对象间的强耦合关系，达到对象与对象之间的动态绑定的效果，提升代码结构的扩展性</strong>。</p>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：让你能够提供对象的替代品或其[占位符。代理控制着对于原对象的访问，并允许将请求提交给对象前后进行一些处理。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>抽象主题类（RealObject）</strong>：声明公用的方法，定义可供客户端使用的统一功能。</li>\n<li><strong>主题实现类（RealObjectImpl）</strong>：实现了抽象主题类的所有方法。</li>\n<li><strong>代理类（Proxy）</strong>：实现了抽象主题类的方法，并隐藏在代理后面可能其他类的实现。</li>\n</ul>\n<h2 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：允许动态地向一个现有的对象添加新的功能，同时又不改变其结构，相当于对现有的对象进行了一个包装。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>组件</strong>：作为装饰器类包装的目标类。</li>\n<li><strong>具体组件</strong>：实现组件的基础子类。</li>\n<li><strong>装饰器</strong>：一个抽象类，其中包含对组件的引用，并且还重写了组件接口方法。</li>\n<li><strong>具体装饰器</strong>：继承扩展了装饰器，并重写组件接口方法，同时可以添加附加功能。</li>\n</ul>\n<h2 id=\"门面模式\"><a href=\"#门面模式\" class=\"headerlink\" title=\"门面模式\"></a>门面模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：为子系统中的一组接口提供统一的接口。它定义了一个更高级别的接口，使子系统更易于使用。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>门面系统</strong>，负责处理依赖子系统的请求，并将请求代理给适当的子系统进行处理；</li>\n<li><strong>子系统</strong>，代表某个领域内的功能实现，比如，订单、用户、支付等，专门处理由门面系统指派的任务。</li>\n</ul>\n<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><p>使用频率：☆</p>\n<p>定义：将对象组合成树形结构以表示整个部分的层次结构。组合模式可以让用户统一对待单个对象和对象的组合。</p>\n<p>关键角色：</p>\n<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><p>使用频率：☆</p>\n<p>定义：摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，从而让我们能在有限的内存容量中载入更多对象。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>享元类（Flyweight）</strong>：定义了享元对象需要实现的公共操作方法。在该方法中会使用一个状态作为输入参数，也叫外部状态，由客户端保存，在运行时改变。</li>\n<li><strong>享元工厂类（Flyweight Factory）</strong>：管理一个享元对象类的缓存池。它会存储享元对象之间需要传递的共有状态，比如，按照大写英文字母来作为状态标识，这种只在享元对象之间传递的方式就叫内部状态。同时，它还提供了一个通用方法 getFlyweight()，主要通过内部状态标识来获取享元对象。</li>\n<li><strong>可共享的具体享元类（ConcreteFlyweight）</strong>：能够复用享元工厂内部状态并实现享元类公共操作的具体实现类。</li>\n<li><strong>非共享的具体享元类（UnsharedConcreteFlyweight）</strong>：不复用享元工厂内部状态，但实现享元类的具体实现类。</li>\n</ul>\n<h1 id=\"行为型\"><a href=\"#行为型\" class=\"headerlink\" title=\"行为型\"></a>行为型</h1><h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：定义对象之间的一对多依赖关系，这样当一个对象改变状态时，它的所有依赖项都会自动得到通知和更新。</p>\n<p>解释：相当于<strong>订阅-发布模式；**</strong>基于事件驱动的架构**也是观察者模式的一种最佳实践</p>\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：定义一系列算法，封装每个算法，并使它们可以互换。策略让算法独立于使用它的客户端而变化。</p>\n<ul>\n<li><strong>上下文信息类</strong>（Context）：用于存放和执行需要使用的具体策略类以及客户端调用的逻辑。</li>\n<li><strong>抽象策略类</strong>（Strategy）：定义策略的共有方法。</li>\n<li><strong>具体策略类</strong>（StrategyA 等）：实现抽象策略类定义的共有方法。</li>\n</ul>\n<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><p>使用频率：☆☆☆☆</p>\n<p>定义：在操作中定义算法的框架，将一些步骤推迟到子类中。模板方法让子类在不改变算法结构的情况下重新定义算法的某些步骤。</p>\n<ul>\n<li><strong>抽象父类</strong>：定义一个算法所包含的所有步骤，并提供一些通用的方法逻辑。</li>\n<li><strong>具体子类</strong>：继承自抽象父类，根据需要重写父类提供的算法步骤中的某些步骤。</li>\n</ul>\n<h2 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h2><p>使用频率：☆☆☆</p>\n<p>定义：中介者对象封装了一组对象之间的交互，这组对象会将它们的交互委托给中介者对象，而不是直接交互。</p>\n<ul>\n<li><strong>抽象中介者</strong>（Mediator）：定义中介者需要执行的方法操作。</li>\n<li><strong>具体中介者</strong>（MediatorImpl）：实现抽象中介者定义的方法操作，同时可以包含更多逻辑。</li>\n<li><strong>抽象组件类</strong>（Component）：定义组件需要执行的方法操作。</li>\n<li><strong>具体组件类</strong>（ComponentA、ComponentB）：继承自抽象组件类，实现具体的组件业务逻辑。</li>\n</ul>\n<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><p>使用频率：☆☆☆</p>\n<p>定义：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了自己的类一样。</p>\n<ul>\n<li><strong>上下文信息类</strong>（Context）：实际上就是存储当前状态的类，对外提供更新状态的操作。</li>\n<li><strong>抽象状态类</strong>（State）：可以是一个接口或抽象类，用于定义声明状态更新的操作方法有哪些。</li>\n<li><strong>具体状态类</strong>（StateA 等）：实现抽象状态类定义的方法，根据具体的场景来指定对应状态改变后的代码实现逻辑。</li>\n</ul>\n<h2 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h2><p>使用频率：☆☆☆</p>\n<p>定义：将一个请求封装为一个对象，从而让我们可以参数化具有不同请求、队列或日志请求的其他对象，并支持可撤销的操作。</p>\n<p>解释：命令模式是为了将一组操作封装在对象中而设计的，简单来说，就是为了将函数方法封装为对象以方便传输。</p>\n<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><p>使用频率：☆</p>\n<p>定义：迭代器提供一种对容器对象中的各个元素进行访问的方法，而又不需要暴露该对象的内部细节。</p>\n<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><p>使用频率：☆</p>\n<p>定义：用于定义语言的语法规则表示，并提供解释器来处理句子中的语法</p>\n<p>解释：相当于函数式编程</p>\n<h2 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h2><p>使用频率：☆</p>\n<p>定义：用于定义语言的语法规则表示，并提供解释器来处理句子中的语法。</p>\n<h2 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h2><p>使用频率：☆</p>\n<p>定义：捕获并外部化对象的内部状态，以便以后可以恢复，所有这些都不会违反封装。</p>\n<ul>\n<li><strong>原始对象（Originator）</strong>：除了创建自身所需要的属性和业务逻辑外，还通过提供方法 create() 和 restore(memento) 来保存和恢复对象副本。</li>\n<li><strong>备忘录（Memento）</strong>：用于保存原始对象的所有属性状态，以便在未来进行撤销操作。</li>\n</ul>\n<h2 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h2><p>使用频率：☆</p>\n<p>定义：允许在运行时将一个或多个操作应用于一组对象，将操作与对象结构分离。</p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><ol>\n<li><a href=\"https://enterpc.blog.csdn.net/category_11435606.html\" target=\"_blank\" rel=\"external\">拉钩教育之趣学设计模式</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>设计模式分为 3 大类型共 23 种：</p>\n<ul>\n<li><strong>创建型</strong>：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li>\n<li><strong>结构型</strong>：适配器模式、桥接模式、组合模式、装饰模式、门面模式、享元模式和代理模式。</li>\n<li><strong>行为型</strong>：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li>\n</ul>","more":"<h1 id=\"创建型\"><a href=\"#创建型\" class=\"headerlink\" title=\"创建型\"></a>创建型</h1><h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><h3 id=\"懒汉式，线程安全\"><a href=\"#懒汉式，线程安全\" class=\"headerlink\" title=\"懒汉式，线程安全\"></a>懒汉式，线程安全</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"双重检验锁\"><a href=\"#双重检验锁\" class=\"headerlink\" title=\"双重检验锁\"></a>双重检验锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton instance;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getSingleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;                         </div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;       </div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//类加载时就初始化</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE; </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> EasySingleton&#123;</div><div class=\"line\">    INSTANCE;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"结构型\"><a href=\"#结构型\" class=\"headerlink\" title=\"结构型\"></a>结构型</h1><h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：将类的接口转换为客户期望的另一个接口，适配器可以让不兼容的两个类一起协同工作。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>目标类，</strong> 适配器类即将要进行适配的抽象类或接口；</li>\n<li><strong>适配器类，</strong> 可以是类或接口，是作为具体适配者类的中间类来使用；</li>\n<li><strong>具体适配者类，</strong> 可以是内部的类或服务，也可以是外部对象或服务。</li>\n</ul>\n<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>抽象实体</strong>：定义的一种抽象分类。比如，电脑中的 CPU、内存、摄像头、显示屏等。</li>\n<li><strong>具体实体</strong>：继承抽象实体的子类实体。比如，Intel i7 CPU、三星内存、徕卡摄像头、京东方显示屏幕等。</li>\n<li><strong>抽象行为</strong>：定义抽象实体中具备的多种行为。比如，CPU 逻辑运算、内存读写存储、摄像头拍照、屏幕显示图像等。</li>\n<li><strong>具体行为</strong>：实现抽象行为的具体算法。比如，Intel 使用 X64 架构实现 CPU 逻辑运算，Mac M1 芯片使用 ARM 架构实现 CPU 逻辑运算，等等。</li>\n</ul>\n<p><strong>桥接模式的本质是通过对一个对象进行实体与行为的分离，来将需要使用多层继承的场景转换为使用组合或聚合的方式，进而解耦对象间的强耦合关系，达到对象与对象之间的动态绑定的效果，提升代码结构的扩展性</strong>。</p>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：让你能够提供对象的替代品或其[占位符。代理控制着对于原对象的访问，并允许将请求提交给对象前后进行一些处理。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>抽象主题类（RealObject）</strong>：声明公用的方法，定义可供客户端使用的统一功能。</li>\n<li><strong>主题实现类（RealObjectImpl）</strong>：实现了抽象主题类的所有方法。</li>\n<li><strong>代理类（Proxy）</strong>：实现了抽象主题类的方法，并隐藏在代理后面可能其他类的实现。</li>\n</ul>\n<h2 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：允许动态地向一个现有的对象添加新的功能，同时又不改变其结构，相当于对现有的对象进行了一个包装。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>组件</strong>：作为装饰器类包装的目标类。</li>\n<li><strong>具体组件</strong>：实现组件的基础子类。</li>\n<li><strong>装饰器</strong>：一个抽象类，其中包含对组件的引用，并且还重写了组件接口方法。</li>\n<li><strong>具体装饰器</strong>：继承扩展了装饰器，并重写组件接口方法，同时可以添加附加功能。</li>\n</ul>\n<h2 id=\"门面模式\"><a href=\"#门面模式\" class=\"headerlink\" title=\"门面模式\"></a>门面模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：为子系统中的一组接口提供统一的接口。它定义了一个更高级别的接口，使子系统更易于使用。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>门面系统</strong>，负责处理依赖子系统的请求，并将请求代理给适当的子系统进行处理；</li>\n<li><strong>子系统</strong>，代表某个领域内的功能实现，比如，订单、用户、支付等，专门处理由门面系统指派的任务。</li>\n</ul>\n<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><p>使用频率：☆</p>\n<p>定义：将对象组合成树形结构以表示整个部分的层次结构。组合模式可以让用户统一对待单个对象和对象的组合。</p>\n<p>关键角色：</p>\n<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><p>使用频率：☆</p>\n<p>定义：摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，从而让我们能在有限的内存容量中载入更多对象。</p>\n<p>关键角色：</p>\n<ul>\n<li><strong>享元类（Flyweight）</strong>：定义了享元对象需要实现的公共操作方法。在该方法中会使用一个状态作为输入参数，也叫外部状态，由客户端保存，在运行时改变。</li>\n<li><strong>享元工厂类（Flyweight Factory）</strong>：管理一个享元对象类的缓存池。它会存储享元对象之间需要传递的共有状态，比如，按照大写英文字母来作为状态标识，这种只在享元对象之间传递的方式就叫内部状态。同时，它还提供了一个通用方法 getFlyweight()，主要通过内部状态标识来获取享元对象。</li>\n<li><strong>可共享的具体享元类（ConcreteFlyweight）</strong>：能够复用享元工厂内部状态并实现享元类公共操作的具体实现类。</li>\n<li><strong>非共享的具体享元类（UnsharedConcreteFlyweight）</strong>：不复用享元工厂内部状态，但实现享元类的具体实现类。</li>\n</ul>\n<h1 id=\"行为型\"><a href=\"#行为型\" class=\"headerlink\" title=\"行为型\"></a>行为型</h1><h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：定义对象之间的一对多依赖关系，这样当一个对象改变状态时，它的所有依赖项都会自动得到通知和更新。</p>\n<p>解释：相当于<strong>订阅-发布模式；**</strong>基于事件驱动的架构**也是观察者模式的一种最佳实践</p>\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><p>使用频率：☆☆☆☆☆</p>\n<p>定义：定义一系列算法，封装每个算法，并使它们可以互换。策略让算法独立于使用它的客户端而变化。</p>\n<ul>\n<li><strong>上下文信息类</strong>（Context）：用于存放和执行需要使用的具体策略类以及客户端调用的逻辑。</li>\n<li><strong>抽象策略类</strong>（Strategy）：定义策略的共有方法。</li>\n<li><strong>具体策略类</strong>（StrategyA 等）：实现抽象策略类定义的共有方法。</li>\n</ul>\n<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><p>使用频率：☆☆☆☆</p>\n<p>定义：在操作中定义算法的框架，将一些步骤推迟到子类中。模板方法让子类在不改变算法结构的情况下重新定义算法的某些步骤。</p>\n<ul>\n<li><strong>抽象父类</strong>：定义一个算法所包含的所有步骤，并提供一些通用的方法逻辑。</li>\n<li><strong>具体子类</strong>：继承自抽象父类，根据需要重写父类提供的算法步骤中的某些步骤。</li>\n</ul>\n<h2 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h2><p>使用频率：☆☆☆</p>\n<p>定义：中介者对象封装了一组对象之间的交互，这组对象会将它们的交互委托给中介者对象，而不是直接交互。</p>\n<ul>\n<li><strong>抽象中介者</strong>（Mediator）：定义中介者需要执行的方法操作。</li>\n<li><strong>具体中介者</strong>（MediatorImpl）：实现抽象中介者定义的方法操作，同时可以包含更多逻辑。</li>\n<li><strong>抽象组件类</strong>（Component）：定义组件需要执行的方法操作。</li>\n<li><strong>具体组件类</strong>（ComponentA、ComponentB）：继承自抽象组件类，实现具体的组件业务逻辑。</li>\n</ul>\n<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><p>使用频率：☆☆☆</p>\n<p>定义：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了自己的类一样。</p>\n<ul>\n<li><strong>上下文信息类</strong>（Context）：实际上就是存储当前状态的类，对外提供更新状态的操作。</li>\n<li><strong>抽象状态类</strong>（State）：可以是一个接口或抽象类，用于定义声明状态更新的操作方法有哪些。</li>\n<li><strong>具体状态类</strong>（StateA 等）：实现抽象状态类定义的方法，根据具体的场景来指定对应状态改变后的代码实现逻辑。</li>\n</ul>\n<h2 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h2><p>使用频率：☆☆☆</p>\n<p>定义：将一个请求封装为一个对象，从而让我们可以参数化具有不同请求、队列或日志请求的其他对象，并支持可撤销的操作。</p>\n<p>解释：命令模式是为了将一组操作封装在对象中而设计的，简单来说，就是为了将函数方法封装为对象以方便传输。</p>\n<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><p>使用频率：☆</p>\n<p>定义：迭代器提供一种对容器对象中的各个元素进行访问的方法，而又不需要暴露该对象的内部细节。</p>\n<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><p>使用频率：☆</p>\n<p>定义：用于定义语言的语法规则表示，并提供解释器来处理句子中的语法</p>\n<p>解释：相当于函数式编程</p>\n<h2 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h2><p>使用频率：☆</p>\n<p>定义：用于定义语言的语法规则表示，并提供解释器来处理句子中的语法。</p>\n<h2 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h2><p>使用频率：☆</p>\n<p>定义：捕获并外部化对象的内部状态，以便以后可以恢复，所有这些都不会违反封装。</p>\n<ul>\n<li><strong>原始对象（Originator）</strong>：除了创建自身所需要的属性和业务逻辑外，还通过提供方法 create() 和 restore(memento) 来保存和恢复对象副本。</li>\n<li><strong>备忘录（Memento）</strong>：用于保存原始对象的所有属性状态，以便在未来进行撤销操作。</li>\n</ul>\n<h2 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h2><p>使用频率：☆</p>\n<p>定义：允许在运行时将一个或多个操作应用于一组对象，将操作与对象结构分离。</p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><ol>\n<li><a href=\"https://enterpc.blog.csdn.net/category_11435606.html\" target=\"_blank\" rel=\"external\">拉钩教育之趣学设计模式</a></li>\n</ol>"},{"title":"JVM","_content":"\n架构师必备武器\n<!-- more -->\n\n## 内存模型\n\n### JVM内存模型\n\n线程私有\n\n- 虚拟机栈\n- 本地方法栈\n- 程序计数器\n\n线程共享\n\n- 堆\n- 方法区\n\n### Java内存模型\n\nJMM 的主要目标是定义程序中变量的访问规则。\n\n- 所有的共享变量都存储在主内存中共享。\n- 每个线程有自己的工作内存。\n- 工作内存中保存的是主内存中变量的副本。\n- 线程对变量的读写等操作必须在自己的工作内存中进行，而不能直接读写主内存中的变量。\n\n### JMM三大特性\n\n原子性\n\n- JMM 保证对除 long 和 double 外的基础数据类型的读写操作是原子性的。\n- 关键字 synchronized 也可以提供原子性保证。\n\n可见性：当一个线程修改了共享变量的值，其他线程能够立即的值这个修改\n\n- volatile 强制变量的赋值会同步刷新回主内存，强制变量的读取会从主内存重新加载，保证不同的线程总是能够看到该变量的最新值。\n- synchronized\n\n有序性：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。\n\n- volatile 关键字本身包含了禁止指令重排序的语义。\n- synchronized 保证一个变量在同一个时刻只允许一条线程对其进行lock操作。\n- 先行发生原则\n  - 程序次序规则\n  - 管程锁定规则\n  - volatile 变量规则\n  - 线程启动、终止、中断规则\n  - 对象终结规则\n  - 传递性\n\n## 类加载\n\n### 类加载过程\n\n类的加载指将编译好的 Class 类文件中的字节码读入内存中，将其放在方法区内并创建对应的 Class 对象。\n\n- 加载：文件到内存的过程。通过类的完全限定名查找此类字节码文件，并利用字节码文件创建一个 Class 对象。\n- 链接\n  - 验证：对类文件内容验证，主要包括四种：文件格式验证，元数据验证，字节码验证，符号引用验证。目的在于确保 Class 文件符合当前虚拟机要求，不会危害虚拟机自身安全。\n  - 准备：进行内存分配，为类变量也就是类中由 static 修饰的变量分配内存，并且设置初始值。\n  - 解析：解析字段、接口、方法，主要是将常量池中的符号引用替换为直接引用的过程。直接引用就是直接指向目标的指针、相对偏移量等。\n- 初始化：主要完成静态块执行与静态变量的赋值。只有对类主动使用时，才会进行初始化，初始化的触发条件包括在创建类的实例时、访问类的静态方法或者静态变量时、Class.forName() 反射类时、或者某个子类被初始化时。\n\n### 双亲委派模型\n\nJava自带三种类加载器及其加载目录：\n\n- BootStrap 启动类加载器：<JAVA_HOME>/lib\n- 扩展类加载器：<JAVA_HOME>/lib/ext\n- 应用加载器：java-classpath\n\n除此之外，可以自定义类加载器。\n\n双亲委派模式：可以避免类的重复加载，另外也避免了 Java 的核心 API 被篡改。\n\n- 一个类加载器在加载类时，先把这个请求委托给自己的父类加载器去执行。\n- 如果父类加载器还存在父类加载器，就继续向上委托，直到顶层的启动类加载器。\n- 如果父类加载器能够完成类加载，就成功返回。\n- 如果父类加载器无法完成加载，那么子加载器才会尝试自己去加载。\n\n## GC\n\n## 性能调优\n\n## 执行模式\n\n## 编译器优化\n\n## 参考文章\n\n- 深入理解Java虚拟机:JVM高级特性与最佳实践\n- [深入浅出Java虚拟机](https://www.kancloud.cn/alex_wsc/javajvm/1844795)\n","source":"_posts/20180619.md","raw":"---\ntitle: JVM\ncategory: 基础模块\n---\n\n架构师必备武器\n<!-- more -->\n\n## 内存模型\n\n### JVM内存模型\n\n线程私有\n\n- 虚拟机栈\n- 本地方法栈\n- 程序计数器\n\n线程共享\n\n- 堆\n- 方法区\n\n### Java内存模型\n\nJMM 的主要目标是定义程序中变量的访问规则。\n\n- 所有的共享变量都存储在主内存中共享。\n- 每个线程有自己的工作内存。\n- 工作内存中保存的是主内存中变量的副本。\n- 线程对变量的读写等操作必须在自己的工作内存中进行，而不能直接读写主内存中的变量。\n\n### JMM三大特性\n\n原子性\n\n- JMM 保证对除 long 和 double 外的基础数据类型的读写操作是原子性的。\n- 关键字 synchronized 也可以提供原子性保证。\n\n可见性：当一个线程修改了共享变量的值，其他线程能够立即的值这个修改\n\n- volatile 强制变量的赋值会同步刷新回主内存，强制变量的读取会从主内存重新加载，保证不同的线程总是能够看到该变量的最新值。\n- synchronized\n\n有序性：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。\n\n- volatile 关键字本身包含了禁止指令重排序的语义。\n- synchronized 保证一个变量在同一个时刻只允许一条线程对其进行lock操作。\n- 先行发生原则\n  - 程序次序规则\n  - 管程锁定规则\n  - volatile 变量规则\n  - 线程启动、终止、中断规则\n  - 对象终结规则\n  - 传递性\n\n## 类加载\n\n### 类加载过程\n\n类的加载指将编译好的 Class 类文件中的字节码读入内存中，将其放在方法区内并创建对应的 Class 对象。\n\n- 加载：文件到内存的过程。通过类的完全限定名查找此类字节码文件，并利用字节码文件创建一个 Class 对象。\n- 链接\n  - 验证：对类文件内容验证，主要包括四种：文件格式验证，元数据验证，字节码验证，符号引用验证。目的在于确保 Class 文件符合当前虚拟机要求，不会危害虚拟机自身安全。\n  - 准备：进行内存分配，为类变量也就是类中由 static 修饰的变量分配内存，并且设置初始值。\n  - 解析：解析字段、接口、方法，主要是将常量池中的符号引用替换为直接引用的过程。直接引用就是直接指向目标的指针、相对偏移量等。\n- 初始化：主要完成静态块执行与静态变量的赋值。只有对类主动使用时，才会进行初始化，初始化的触发条件包括在创建类的实例时、访问类的静态方法或者静态变量时、Class.forName() 反射类时、或者某个子类被初始化时。\n\n### 双亲委派模型\n\nJava自带三种类加载器及其加载目录：\n\n- BootStrap 启动类加载器：<JAVA_HOME>/lib\n- 扩展类加载器：<JAVA_HOME>/lib/ext\n- 应用加载器：java-classpath\n\n除此之外，可以自定义类加载器。\n\n双亲委派模式：可以避免类的重复加载，另外也避免了 Java 的核心 API 被篡改。\n\n- 一个类加载器在加载类时，先把这个请求委托给自己的父类加载器去执行。\n- 如果父类加载器还存在父类加载器，就继续向上委托，直到顶层的启动类加载器。\n- 如果父类加载器能够完成类加载，就成功返回。\n- 如果父类加载器无法完成加载，那么子加载器才会尝试自己去加载。\n\n## GC\n\n## 性能调优\n\n## 执行模式\n\n## 编译器优化\n\n## 参考文章\n\n- 深入理解Java虚拟机:JVM高级特性与最佳实践\n- [深入浅出Java虚拟机](https://www.kancloud.cn/alex_wsc/javajvm/1844795)\n","slug":"20180619","published":1,"date":"2023-01-03T01:29:04.005Z","updated":"2023-01-03T01:29:04.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0p0005cwyu0grxbxq1","content":"<p>架构师必备武器<br><a id=\"more\"></a></p>\n<h2 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h2><h3 id=\"JVM内存模型\"><a href=\"#JVM内存模型\" class=\"headerlink\" title=\"JVM内存模型\"></a>JVM内存模型</h3><p>线程私有</p>\n<ul>\n<li>虚拟机栈</li>\n<li>本地方法栈</li>\n<li>程序计数器</li>\n</ul>\n<p>线程共享</p>\n<ul>\n<li>堆</li>\n<li>方法区</li>\n</ul>\n<h3 id=\"Java内存模型\"><a href=\"#Java内存模型\" class=\"headerlink\" title=\"Java内存模型\"></a>Java内存模型</h3><p>JMM 的主要目标是定义程序中变量的访问规则。</p>\n<ul>\n<li>所有的共享变量都存储在主内存中共享。</li>\n<li>每个线程有自己的工作内存。</li>\n<li>工作内存中保存的是主内存中变量的副本。</li>\n<li>线程对变量的读写等操作必须在自己的工作内存中进行，而不能直接读写主内存中的变量。</li>\n</ul>\n<h3 id=\"JMM三大特性\"><a href=\"#JMM三大特性\" class=\"headerlink\" title=\"JMM三大特性\"></a>JMM三大特性</h3><p>原子性</p>\n<ul>\n<li>JMM 保证对除 long 和 double 外的基础数据类型的读写操作是原子性的。</li>\n<li>关键字 synchronized 也可以提供原子性保证。</li>\n</ul>\n<p>可见性：当一个线程修改了共享变量的值，其他线程能够立即的值这个修改</p>\n<ul>\n<li>volatile 强制变量的赋值会同步刷新回主内存，强制变量的读取会从主内存重新加载，保证不同的线程总是能够看到该变量的最新值。</li>\n<li>synchronized</li>\n</ul>\n<p>有序性：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。</p>\n<ul>\n<li>volatile 关键字本身包含了禁止指令重排序的语义。</li>\n<li>synchronized 保证一个变量在同一个时刻只允许一条线程对其进行lock操作。</li>\n<li>先行发生原则<ul>\n<li>程序次序规则</li>\n<li>管程锁定规则</li>\n<li>volatile 变量规则</li>\n<li>线程启动、终止、中断规则</li>\n<li>对象终结规则</li>\n<li>传递性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h2><h3 id=\"类加载过程\"><a href=\"#类加载过程\" class=\"headerlink\" title=\"类加载过程\"></a>类加载过程</h3><p>类的加载指将编译好的 Class 类文件中的字节码读入内存中，将其放在方法区内并创建对应的 Class 对象。</p>\n<ul>\n<li>加载：文件到内存的过程。通过类的完全限定名查找此类字节码文件，并利用字节码文件创建一个 Class 对象。</li>\n<li>链接<ul>\n<li>验证：对类文件内容验证，主要包括四种：文件格式验证，元数据验证，字节码验证，符号引用验证。目的在于确保 Class 文件符合当前虚拟机要求，不会危害虚拟机自身安全。</li>\n<li>准备：进行内存分配，为类变量也就是类中由 static 修饰的变量分配内存，并且设置初始值。</li>\n<li>解析：解析字段、接口、方法，主要是将常量池中的符号引用替换为直接引用的过程。直接引用就是直接指向目标的指针、相对偏移量等。</li>\n</ul>\n</li>\n<li>初始化：主要完成静态块执行与静态变量的赋值。只有对类主动使用时，才会进行初始化，初始化的触发条件包括在创建类的实例时、访问类的静态方法或者静态变量时、Class.forName() 反射类时、或者某个子类被初始化时。</li>\n</ul>\n<h3 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h3><p>Java自带三种类加载器及其加载目录：</p>\n<ul>\n<li>BootStrap 启动类加载器：<java_home>/lib</java_home></li>\n<li>扩展类加载器：<java_home>/lib/ext</java_home></li>\n<li>应用加载器：java-classpath</li>\n</ul>\n<p>除此之外，可以自定义类加载器。</p>\n<p>双亲委派模式：可以避免类的重复加载，另外也避免了 Java 的核心 API 被篡改。</p>\n<ul>\n<li>一个类加载器在加载类时，先把这个请求委托给自己的父类加载器去执行。</li>\n<li>如果父类加载器还存在父类加载器，就继续向上委托，直到顶层的启动类加载器。</li>\n<li>如果父类加载器能够完成类加载，就成功返回。</li>\n<li>如果父类加载器无法完成加载，那么子加载器才会尝试自己去加载。</li>\n</ul>\n<h2 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h2><h2 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h2><h2 id=\"执行模式\"><a href=\"#执行模式\" class=\"headerlink\" title=\"执行模式\"></a>执行模式</h2><h2 id=\"编译器优化\"><a href=\"#编译器优化\" class=\"headerlink\" title=\"编译器优化\"></a>编译器优化</h2><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li>深入理解Java虚拟机:JVM高级特性与最佳实践</li>\n<li><a href=\"https://www.kancloud.cn/alex_wsc/javajvm/1844795\" target=\"_blank\" rel=\"external\">深入浅出Java虚拟机</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>架构师必备武器<br>","more":"</p>\n<h2 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h2><h3 id=\"JVM内存模型\"><a href=\"#JVM内存模型\" class=\"headerlink\" title=\"JVM内存模型\"></a>JVM内存模型</h3><p>线程私有</p>\n<ul>\n<li>虚拟机栈</li>\n<li>本地方法栈</li>\n<li>程序计数器</li>\n</ul>\n<p>线程共享</p>\n<ul>\n<li>堆</li>\n<li>方法区</li>\n</ul>\n<h3 id=\"Java内存模型\"><a href=\"#Java内存模型\" class=\"headerlink\" title=\"Java内存模型\"></a>Java内存模型</h3><p>JMM 的主要目标是定义程序中变量的访问规则。</p>\n<ul>\n<li>所有的共享变量都存储在主内存中共享。</li>\n<li>每个线程有自己的工作内存。</li>\n<li>工作内存中保存的是主内存中变量的副本。</li>\n<li>线程对变量的读写等操作必须在自己的工作内存中进行，而不能直接读写主内存中的变量。</li>\n</ul>\n<h3 id=\"JMM三大特性\"><a href=\"#JMM三大特性\" class=\"headerlink\" title=\"JMM三大特性\"></a>JMM三大特性</h3><p>原子性</p>\n<ul>\n<li>JMM 保证对除 long 和 double 外的基础数据类型的读写操作是原子性的。</li>\n<li>关键字 synchronized 也可以提供原子性保证。</li>\n</ul>\n<p>可见性：当一个线程修改了共享变量的值，其他线程能够立即的值这个修改</p>\n<ul>\n<li>volatile 强制变量的赋值会同步刷新回主内存，强制变量的读取会从主内存重新加载，保证不同的线程总是能够看到该变量的最新值。</li>\n<li>synchronized</li>\n</ul>\n<p>有序性：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。</p>\n<ul>\n<li>volatile 关键字本身包含了禁止指令重排序的语义。</li>\n<li>synchronized 保证一个变量在同一个时刻只允许一条线程对其进行lock操作。</li>\n<li>先行发生原则<ul>\n<li>程序次序规则</li>\n<li>管程锁定规则</li>\n<li>volatile 变量规则</li>\n<li>线程启动、终止、中断规则</li>\n<li>对象终结规则</li>\n<li>传递性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h2><h3 id=\"类加载过程\"><a href=\"#类加载过程\" class=\"headerlink\" title=\"类加载过程\"></a>类加载过程</h3><p>类的加载指将编译好的 Class 类文件中的字节码读入内存中，将其放在方法区内并创建对应的 Class 对象。</p>\n<ul>\n<li>加载：文件到内存的过程。通过类的完全限定名查找此类字节码文件，并利用字节码文件创建一个 Class 对象。</li>\n<li>链接<ul>\n<li>验证：对类文件内容验证，主要包括四种：文件格式验证，元数据验证，字节码验证，符号引用验证。目的在于确保 Class 文件符合当前虚拟机要求，不会危害虚拟机自身安全。</li>\n<li>准备：进行内存分配，为类变量也就是类中由 static 修饰的变量分配内存，并且设置初始值。</li>\n<li>解析：解析字段、接口、方法，主要是将常量池中的符号引用替换为直接引用的过程。直接引用就是直接指向目标的指针、相对偏移量等。</li>\n</ul>\n</li>\n<li>初始化：主要完成静态块执行与静态变量的赋值。只有对类主动使用时，才会进行初始化，初始化的触发条件包括在创建类的实例时、访问类的静态方法或者静态变量时、Class.forName() 反射类时、或者某个子类被初始化时。</li>\n</ul>\n<h3 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h3><p>Java自带三种类加载器及其加载目录：</p>\n<ul>\n<li>BootStrap 启动类加载器：<java_home>/lib</java_home></li>\n<li>扩展类加载器：<java_home>/lib/ext</java_home></li>\n<li>应用加载器：java-classpath</li>\n</ul>\n<p>除此之外，可以自定义类加载器。</p>\n<p>双亲委派模式：可以避免类的重复加载，另外也避免了 Java 的核心 API 被篡改。</p>\n<ul>\n<li>一个类加载器在加载类时，先把这个请求委托给自己的父类加载器去执行。</li>\n<li>如果父类加载器还存在父类加载器，就继续向上委托，直到顶层的启动类加载器。</li>\n<li>如果父类加载器能够完成类加载，就成功返回。</li>\n<li>如果父类加载器无法完成加载，那么子加载器才会尝试自己去加载。</li>\n</ul>\n<h2 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h2><h2 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h2><h2 id=\"执行模式\"><a href=\"#执行模式\" class=\"headerlink\" title=\"执行模式\"></a>执行模式</h2><h2 id=\"编译器优化\"><a href=\"#编译器优化\" class=\"headerlink\" title=\"编译器优化\"></a>编译器优化</h2><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li>深入理解Java虚拟机:JVM高级特性与最佳实践</li>\n<li><a href=\"https://www.kancloud.cn/alex_wsc/javajvm/1844795\" target=\"_blank\" rel=\"external\">深入浅出Java虚拟机</a></li>\n</ul>"},{"title":"并发与多线程","_content":"\n## 线程池\n线程池通过复用线程，避免线程频繁地创建和销毁。\n\n### 线程池任务执行流程\n提交任务的方法\nsubmit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。\nexecute：submit 最终也是通过 execute 执行的。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png)\n1. 向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。\n2. 如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。\n3. 如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。\n4. 如果已经达到了最大线程数，则执行指定的拒绝策略\n\n### 创建线程池\nJava 的 Executors 工具类中提供了 5 种类型的线程池。\n\n* FixedThreadPool\n固定大小线程池，特点是线程数固定，使用无界队列。\n适用于任务数量不均匀的场景、对内存压力不敏感但系统负载比较敏感的场景。\n\n~~~java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n~~~\n\n* CachedThreadPool\nCached 线程池，特点是不限制线程数。\n适用于要求低延迟的短期任务场景。\n\n~~~java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n~~~\n\n* SingleThreadExecutor\n单线程线程池，就是一个线程的固定线程池。\n适用于需要异步执行但需要保证任务顺序的场景。\n\n~~~java\npublic static ScheduledExecutorService newSingleThreadScheduledExecutor() {\n    return new DelegatedScheduledExecutorService\n        (new ScheduledThreadPoolExecutor(1));\n}\n~~~\n\n* ScheduledThreadPool\nScheduled 线程池。\n适用于定期执行任务场景，支持按固定频率定期执行和按固定延时定期执行两种方式。\n\n~~~java\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n    return new ScheduledThreadPoolExecutor(corePoolSize);\n}\n\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue());\n}\n~~~\n\n* WorkStealingPool\n工作窃取线程池，使用的是 ForkJoinPool，是固定并行度的多任务队列。\n适合任务执行时长不均匀的场景。\n\n~~~java\npublic static ExecutorService newWorkStealingPool(int parallelism) {\n     return new ForkJoinPool\n         (parallelism,\n          ForkJoinPool.defaultForkJoinWorkerThreadFactory,\n          null, true);\n }\n~~~\n另外还可以根据业务需要自定义线程池，可使用 ThreadPoolExecutor(JUC工具类) 或 ThreadPoolTaskExecutor(Spring封装类) 。\n\n### 核心参数\n* 核心线程数\n* 最大线程数\n* 线程空闲时间和空闲时间的单位\n当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。\n* 缓存队列\nArrayBlockingQueue: 有界队列，队列有最大容量限制\nLinkedBlockingQueue: 无界队列，队列不限制容量\nSynchronousQueue: 同步队列，内部没有缓冲区。\n* 线程工厂\n用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等，一般使用默认工厂类即可。\n\n~~~java\npublic class VehicleThreadFactory implements ThreadFactory {\n    private final ThreadGroup group;\n    private final AtomicInteger threadNumber = new AtomicInteger(1);\n    private final String prefix;\n    public VehicleThreadFactory(String name) {\n        SecurityManager s = System.getSecurityManager();\n        group = (s != null) ? s.getThreadGroup() :\n                Thread.currentThread().getThreadGroup();\n        prefix = name + \"-thread-\";\n    }\n    @Override\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(group, r,\n                prefix + threadNumber.getAndIncrement(),\n                0);\n        if (t.isDaemon()) {\n            t.setDaemon(false);\n        }\n        if (t.getPriority() != Thread.NORM_PRIORITY) {\n            t.setPriority(Thread.NORM_PRIORITY);\n        }\n        return t;\n    }\n}\n~~~\n* 拒绝策略\nAbort：默认策略，抛出 RejectedExecutionException 。\nDiscard：直接丢弃任务。\nCallerRuns：由提交任务的线程直接执行。\nDiscardOldest: 会丢弃最早提交的任务。\n也可以自定义策略，例如：\n~~~java\n(r, executor) -> {\n    try {\n        executor.getQueue().put(r);\n    } catch (InterruptedException e) {\n        log.warn(\"retry put task error,message:{}\", e);\n    }\n}\n~~~\n\n## 同步与互斥\n\n### synchronized\nsynchronized 应用在方法上时，在字节码中是通过方法的 **ACC_SYNCHRONIZED** 标志来实现的；\nsynchronized 应用在同步块上时，在字节码中是通过 **monitorenter** 和 **monitorexit** 实现的。\n最终都是通过对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，当 Monitor 被某个线程持有后，就会处于锁定状态，此时 Owner 会指向持有 Monitor 对象的线程。Monitor 还有两个队列，用来存放进入及等待获取锁的线程。\nJVM对其进行了大量优化\n* 锁消除\n* 锁粗化\n* 自旋和自适应自旋\n* 锁升级\n无锁->偏向锁->轻量级锁->重量级锁\n### Lock\nAQS是实现Lock基础，AQS 有一个 state 标记位，值为1时表示有线程占用，其他线程需要进入到同步队列等待。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ANLfHAAA3fj0S8po403.png)\n1. 当获得锁的线程需要等待某个条件时，会进入 condition 的等待队列，等待队列可以有多个。\n2. 当 condition 条件满足时，线程会从等待队列重新进入同步队列进行获取锁的竞争\n\n* ReentrantLock\n基于AQS实现，内部有公平锁和非公平锁两种实现，**差别就在于新来的线程是否比已经在同步队列中的等待线程更早获得锁**。\n* Semaphore\n基于AQS实现，差别在于 ReentrantLock 是独占锁，Semaphore 是共享锁。\n\n### CAS\n乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS。它认为并发操作并不总会发生。\n操作流程如下：其中比较并写回的操作是通过操作系统原语实现的，保证执行过程中不会被中断。\n1. 线程在读取数据时不进行加锁；\n2. 在准备写回数据时，比较原值是否修改；\n3. 若未被其他线程修改则写回；\n4. 若已被修改，则重新执行读取流程。\n\n缺点：容易出现ABA问题，不一定会影响结果，但还是需要防范，可以通过增加额外的标志位或者时间戳解决。JUC 工具包中提供了这样的类。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6AB5XwAAAWMnENBjk562.png)\n1. 线程 T1 读取值 A 之后，发生两次写入。\n2. 先由线程 T2 写回了 B\n3. 又由 T3 写回了 A\n4. 此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。\n\nsynchronized 和 ReentrantLock 的区别：\n相同点：都是可重入、重量级锁。\n不同点：\n1. synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API。\n2. ReentrantLock 比 synchronized 增加了一些高级功能。例如：等待可中断、可实现公平锁、可绑定多个条件。\n使用场景：\n\n## 线程状态转换\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI2Ab8rJAACvTREK08g324.png)\n1. 当创建一个线程时，线程处在 NEW 状态。\n2. 运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态，但线程此时是 READY 状态，就绪状态等待线程调度，在获取 CPU 后才能进入 RUNNING 运行状态。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。\n3. 线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态，当获取到锁后，会从 BLOCKED 状态恢复到 RUNNABLE 可运行状态。\n4. 调用 Object.wait、Thread.join等，进入 TIMED_WAITING 有超时时间的等待状态。调用 Thread.join 或者 Locksupport.park 等，进入 WAITING 无超时的等待状态。均可以通过 notify 或 unpark 结束等待状态并恢复到RUNNABLE 可运行状态。\n5. 线程运行完成结束，进入 TERMINATED 状态。\n\n## JUC\n### 原子类\n例如：AtomicBoolean、AtomicLong、AtomicInteger、LongAdder、LongAccumulator等。\nAtomicLong：通过 unsafe 类实现，基于CAS。\nLongAdder：基于Cell，分段锁思想，空间换时间，更适合高并发场景。\nLongAccumulator：提供了比LongAdder更强大的功能，能够指定对数据的操作规则，例如可以把对数据的相加操作改成相乘操作。\n### 锁类\nReentrantLock\nReentrantReadWriteLock\nStampedLock：JDK 1.8 改进的读写锁，是使用一种 CLH 的乐观锁，能够有效防止写饥饿。所谓写饥饿就是在多线程读写时，读线程访问非常频繁，导致总是有读线程占用资源，写线程很难加上写锁。\nLockSupport\n### 异步执行类\nExecutors：用于创建线程池\nForkJoinPool：1.7提供，采用分治思想，将大任务分解成多个小任务处理，然后在合并处理结果。特点是使用工作窃取算法，可以有效平衡多任务时间长短不一的场景。\nFutureTask\nCompletableFuture：可以支持流式调用，可以方便的进行多 future 的组合使用，例如可以同时执行两个异步任务，然后对执行结果进行合并处理。还可以很方便地设置完成时间。\n### 阻塞队列类\nLinkedBlockingDeque：双端队列，也就是可以分别从队头和队尾操作入队、出队。\nArrayBlockingQueue：单端队列，只能从队尾入队，队头出队。\n### 多线程协作类\nCountDownLatch\n**底层原理**\n**多线程执行任务后汇总**\n~~~java\nint count = 10;\nCountDownLatch latch = new CountDownLatch(count);\nfor (int i = 0; i < count; i++) {\n    int index = i;\n    new Thread(() -> {\n        System.out.println(\"线程：\" + index);\n        latch.countDown();\n    }).start();\n}\n\nlatch.await();\nSystem.out.println(\"主线程\");\n~~~\n**模拟线程并发**\n~~~java\nCountDownLatch latch = new CountDownLatch(1);\nfor (int i = 0; i < 10; i++) {\n    int index = i;\n    new Thread(() -> {\n        try {\n            latch.await();\n            System.out.println(\"线程：\" + index);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }).start();\n}\n\nlatch.countDown();\n~~~\nCyclicBarrier\n~~~java\nCyclicBarrier barrier = new CyclicBarrier(10);\nfor (int i = 0; i < 10; i++) {\n    int index = i;\n    new Thread(() -> {\n        try {\n            barrier.await();\n            System.out.println(\"线程：\" + index);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }).start();\n}\n~~~\nSemaphore\n~~~java\nSemaphore semaphore = new Semaphore(2);\nfor (int i = 0; i < 10; i++) {\n    int index = i;\n    new Thread(() -> {\n        try {\n            System.out.println(\"车辆\" + index + \"到达停车场\");\n            semaphore.acquire();\n            System.out.println(\"车辆\" + index + \"进停车场\");\n            semaphore.release();\n            System.out.println(\"车辆\" + index + \"出停车场\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n    }).start();\n}\n~~~\n### 集合类\nConcurrentHashMap：线程安全的HashMap。\nCopyOnWriteArrayList：通过写入数据时进行 copy 修改，然后更新引用的方式，来消除并行读写中的锁使用，比较适合读多写少，数据量比较小，但是并发非常高的场景。\n\n## 线程通信\n### wait\nwait 和 sleep 区别：\n* wait 属于 Object 类，sleep 属于 Thread 类；\n* wait 会释放锁对象，而 sleep 不会；\n* 使用的位置不同，wait 需要在同步块中使用，sleep 可以在任意地方；\n* sleep 需要捕获异常，而 wait 不需要。\n\n### notify\n### notifyAll\n\n## 死锁\n产生条件：\n* 互斥\n* 请求并持有\n* 非剥夺\n* 循环等待\n死锁检测与防止\n竞争条件与临界区\n\n## 机制\n### ThreadLocal\n用来解决线程数据隔离的问题，底层使用ThreadLocalMap保存线程变量。\n**底层实现**\n每个线程都会有一个ThreadLocalMap变量，结构为：主干是一个数组，数组元素为Entry\n~~~java\nstatic class Entry extends WeakReference<ThreadLocal<?>> {\n    /** The value associated with this ThreadLocal. */\n    Object value;\n    Entry(ThreadLocal<?> k, Object v) {\n        super(k);\n        value = v;\n    }\n}\n~~~\nk为ThreadLocal实例对象，value为具体的值。\n**哈希冲突**\n线性探测：如果发现这个位置上已经有其他key值的元素被占用，则利用固定的算法寻找一定步长的下个位置，依次判断，直至找到能够存放的位置。\n\n### Fork/Join\n用于大任务的分割与汇总\n\n### Volatile\n对多线程数据可见性的保证\n \n### Interrupt\n线程的中断机制","source":"_posts/20180630.md","raw":"---\ntitle: 并发与多线程\ncategory: 基础模块\n---\n\n## 线程池\n线程池通过复用线程，避免线程频繁地创建和销毁。\n\n### 线程池任务执行流程\n提交任务的方法\nsubmit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。\nexecute：submit 最终也是通过 execute 执行的。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png)\n1. 向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。\n2. 如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。\n3. 如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。\n4. 如果已经达到了最大线程数，则执行指定的拒绝策略\n\n### 创建线程池\nJava 的 Executors 工具类中提供了 5 种类型的线程池。\n\n* FixedThreadPool\n固定大小线程池，特点是线程数固定，使用无界队列。\n适用于任务数量不均匀的场景、对内存压力不敏感但系统负载比较敏感的场景。\n\n~~~java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n~~~\n\n* CachedThreadPool\nCached 线程池，特点是不限制线程数。\n适用于要求低延迟的短期任务场景。\n\n~~~java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n~~~\n\n* SingleThreadExecutor\n单线程线程池，就是一个线程的固定线程池。\n适用于需要异步执行但需要保证任务顺序的场景。\n\n~~~java\npublic static ScheduledExecutorService newSingleThreadScheduledExecutor() {\n    return new DelegatedScheduledExecutorService\n        (new ScheduledThreadPoolExecutor(1));\n}\n~~~\n\n* ScheduledThreadPool\nScheduled 线程池。\n适用于定期执行任务场景，支持按固定频率定期执行和按固定延时定期执行两种方式。\n\n~~~java\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n    return new ScheduledThreadPoolExecutor(corePoolSize);\n}\n\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue());\n}\n~~~\n\n* WorkStealingPool\n工作窃取线程池，使用的是 ForkJoinPool，是固定并行度的多任务队列。\n适合任务执行时长不均匀的场景。\n\n~~~java\npublic static ExecutorService newWorkStealingPool(int parallelism) {\n     return new ForkJoinPool\n         (parallelism,\n          ForkJoinPool.defaultForkJoinWorkerThreadFactory,\n          null, true);\n }\n~~~\n另外还可以根据业务需要自定义线程池，可使用 ThreadPoolExecutor(JUC工具类) 或 ThreadPoolTaskExecutor(Spring封装类) 。\n\n### 核心参数\n* 核心线程数\n* 最大线程数\n* 线程空闲时间和空闲时间的单位\n当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。\n* 缓存队列\nArrayBlockingQueue: 有界队列，队列有最大容量限制\nLinkedBlockingQueue: 无界队列，队列不限制容量\nSynchronousQueue: 同步队列，内部没有缓冲区。\n* 线程工厂\n用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等，一般使用默认工厂类即可。\n\n~~~java\npublic class VehicleThreadFactory implements ThreadFactory {\n    private final ThreadGroup group;\n    private final AtomicInteger threadNumber = new AtomicInteger(1);\n    private final String prefix;\n    public VehicleThreadFactory(String name) {\n        SecurityManager s = System.getSecurityManager();\n        group = (s != null) ? s.getThreadGroup() :\n                Thread.currentThread().getThreadGroup();\n        prefix = name + \"-thread-\";\n    }\n    @Override\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(group, r,\n                prefix + threadNumber.getAndIncrement(),\n                0);\n        if (t.isDaemon()) {\n            t.setDaemon(false);\n        }\n        if (t.getPriority() != Thread.NORM_PRIORITY) {\n            t.setPriority(Thread.NORM_PRIORITY);\n        }\n        return t;\n    }\n}\n~~~\n* 拒绝策略\nAbort：默认策略，抛出 RejectedExecutionException 。\nDiscard：直接丢弃任务。\nCallerRuns：由提交任务的线程直接执行。\nDiscardOldest: 会丢弃最早提交的任务。\n也可以自定义策略，例如：\n~~~java\n(r, executor) -> {\n    try {\n        executor.getQueue().put(r);\n    } catch (InterruptedException e) {\n        log.warn(\"retry put task error,message:{}\", e);\n    }\n}\n~~~\n\n## 同步与互斥\n\n### synchronized\nsynchronized 应用在方法上时，在字节码中是通过方法的 **ACC_SYNCHRONIZED** 标志来实现的；\nsynchronized 应用在同步块上时，在字节码中是通过 **monitorenter** 和 **monitorexit** 实现的。\n最终都是通过对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，当 Monitor 被某个线程持有后，就会处于锁定状态，此时 Owner 会指向持有 Monitor 对象的线程。Monitor 还有两个队列，用来存放进入及等待获取锁的线程。\nJVM对其进行了大量优化\n* 锁消除\n* 锁粗化\n* 自旋和自适应自旋\n* 锁升级\n无锁->偏向锁->轻量级锁->重量级锁\n### Lock\nAQS是实现Lock基础，AQS 有一个 state 标记位，值为1时表示有线程占用，其他线程需要进入到同步队列等待。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ANLfHAAA3fj0S8po403.png)\n1. 当获得锁的线程需要等待某个条件时，会进入 condition 的等待队列，等待队列可以有多个。\n2. 当 condition 条件满足时，线程会从等待队列重新进入同步队列进行获取锁的竞争\n\n* ReentrantLock\n基于AQS实现，内部有公平锁和非公平锁两种实现，**差别就在于新来的线程是否比已经在同步队列中的等待线程更早获得锁**。\n* Semaphore\n基于AQS实现，差别在于 ReentrantLock 是独占锁，Semaphore 是共享锁。\n\n### CAS\n乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS。它认为并发操作并不总会发生。\n操作流程如下：其中比较并写回的操作是通过操作系统原语实现的，保证执行过程中不会被中断。\n1. 线程在读取数据时不进行加锁；\n2. 在准备写回数据时，比较原值是否修改；\n3. 若未被其他线程修改则写回；\n4. 若已被修改，则重新执行读取流程。\n\n缺点：容易出现ABA问题，不一定会影响结果，但还是需要防范，可以通过增加额外的标志位或者时间戳解决。JUC 工具包中提供了这样的类。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6AB5XwAAAWMnENBjk562.png)\n1. 线程 T1 读取值 A 之后，发生两次写入。\n2. 先由线程 T2 写回了 B\n3. 又由 T3 写回了 A\n4. 此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。\n\nsynchronized 和 ReentrantLock 的区别：\n相同点：都是可重入、重量级锁。\n不同点：\n1. synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API。\n2. ReentrantLock 比 synchronized 增加了一些高级功能。例如：等待可中断、可实现公平锁、可绑定多个条件。\n使用场景：\n\n## 线程状态转换\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI2Ab8rJAACvTREK08g324.png)\n1. 当创建一个线程时，线程处在 NEW 状态。\n2. 运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态，但线程此时是 READY 状态，就绪状态等待线程调度，在获取 CPU 后才能进入 RUNNING 运行状态。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。\n3. 线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态，当获取到锁后，会从 BLOCKED 状态恢复到 RUNNABLE 可运行状态。\n4. 调用 Object.wait、Thread.join等，进入 TIMED_WAITING 有超时时间的等待状态。调用 Thread.join 或者 Locksupport.park 等，进入 WAITING 无超时的等待状态。均可以通过 notify 或 unpark 结束等待状态并恢复到RUNNABLE 可运行状态。\n5. 线程运行完成结束，进入 TERMINATED 状态。\n\n## JUC\n### 原子类\n例如：AtomicBoolean、AtomicLong、AtomicInteger、LongAdder、LongAccumulator等。\nAtomicLong：通过 unsafe 类实现，基于CAS。\nLongAdder：基于Cell，分段锁思想，空间换时间，更适合高并发场景。\nLongAccumulator：提供了比LongAdder更强大的功能，能够指定对数据的操作规则，例如可以把对数据的相加操作改成相乘操作。\n### 锁类\nReentrantLock\nReentrantReadWriteLock\nStampedLock：JDK 1.8 改进的读写锁，是使用一种 CLH 的乐观锁，能够有效防止写饥饿。所谓写饥饿就是在多线程读写时，读线程访问非常频繁，导致总是有读线程占用资源，写线程很难加上写锁。\nLockSupport\n### 异步执行类\nExecutors：用于创建线程池\nForkJoinPool：1.7提供，采用分治思想，将大任务分解成多个小任务处理，然后在合并处理结果。特点是使用工作窃取算法，可以有效平衡多任务时间长短不一的场景。\nFutureTask\nCompletableFuture：可以支持流式调用，可以方便的进行多 future 的组合使用，例如可以同时执行两个异步任务，然后对执行结果进行合并处理。还可以很方便地设置完成时间。\n### 阻塞队列类\nLinkedBlockingDeque：双端队列，也就是可以分别从队头和队尾操作入队、出队。\nArrayBlockingQueue：单端队列，只能从队尾入队，队头出队。\n### 多线程协作类\nCountDownLatch\n**底层原理**\n**多线程执行任务后汇总**\n~~~java\nint count = 10;\nCountDownLatch latch = new CountDownLatch(count);\nfor (int i = 0; i < count; i++) {\n    int index = i;\n    new Thread(() -> {\n        System.out.println(\"线程：\" + index);\n        latch.countDown();\n    }).start();\n}\n\nlatch.await();\nSystem.out.println(\"主线程\");\n~~~\n**模拟线程并发**\n~~~java\nCountDownLatch latch = new CountDownLatch(1);\nfor (int i = 0; i < 10; i++) {\n    int index = i;\n    new Thread(() -> {\n        try {\n            latch.await();\n            System.out.println(\"线程：\" + index);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }).start();\n}\n\nlatch.countDown();\n~~~\nCyclicBarrier\n~~~java\nCyclicBarrier barrier = new CyclicBarrier(10);\nfor (int i = 0; i < 10; i++) {\n    int index = i;\n    new Thread(() -> {\n        try {\n            barrier.await();\n            System.out.println(\"线程：\" + index);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }).start();\n}\n~~~\nSemaphore\n~~~java\nSemaphore semaphore = new Semaphore(2);\nfor (int i = 0; i < 10; i++) {\n    int index = i;\n    new Thread(() -> {\n        try {\n            System.out.println(\"车辆\" + index + \"到达停车场\");\n            semaphore.acquire();\n            System.out.println(\"车辆\" + index + \"进停车场\");\n            semaphore.release();\n            System.out.println(\"车辆\" + index + \"出停车场\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n    }).start();\n}\n~~~\n### 集合类\nConcurrentHashMap：线程安全的HashMap。\nCopyOnWriteArrayList：通过写入数据时进行 copy 修改，然后更新引用的方式，来消除并行读写中的锁使用，比较适合读多写少，数据量比较小，但是并发非常高的场景。\n\n## 线程通信\n### wait\nwait 和 sleep 区别：\n* wait 属于 Object 类，sleep 属于 Thread 类；\n* wait 会释放锁对象，而 sleep 不会；\n* 使用的位置不同，wait 需要在同步块中使用，sleep 可以在任意地方；\n* sleep 需要捕获异常，而 wait 不需要。\n\n### notify\n### notifyAll\n\n## 死锁\n产生条件：\n* 互斥\n* 请求并持有\n* 非剥夺\n* 循环等待\n死锁检测与防止\n竞争条件与临界区\n\n## 机制\n### ThreadLocal\n用来解决线程数据隔离的问题，底层使用ThreadLocalMap保存线程变量。\n**底层实现**\n每个线程都会有一个ThreadLocalMap变量，结构为：主干是一个数组，数组元素为Entry\n~~~java\nstatic class Entry extends WeakReference<ThreadLocal<?>> {\n    /** The value associated with this ThreadLocal. */\n    Object value;\n    Entry(ThreadLocal<?> k, Object v) {\n        super(k);\n        value = v;\n    }\n}\n~~~\nk为ThreadLocal实例对象，value为具体的值。\n**哈希冲突**\n线性探测：如果发现这个位置上已经有其他key值的元素被占用，则利用固定的算法寻找一定步长的下个位置，依次判断，直至找到能够存放的位置。\n\n### Fork/Join\n用于大任务的分割与汇总\n\n### Volatile\n对多线程数据可见性的保证\n \n### Interrupt\n线程的中断机制","slug":"20180630","published":1,"date":"2023-01-03T01:29:04.006Z","updated":"2023-01-03T01:29:04.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0p0007cwyufi4h1dvw","content":"<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>线程池通过复用线程，避免线程频繁地创建和销毁。</p>\n<h3 id=\"线程池任务执行流程\"><a href=\"#线程池任务执行流程\" class=\"headerlink\" title=\"线程池任务执行流程\"></a>线程池任务执行流程</h3><p>提交任务的方法<br>submit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。<br>execute：submit 最终也是通过 execute 执行的。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png\" alt=\"img\"></p>\n<ol>\n<li>向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。</li>\n<li>如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。</li>\n<li>如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。</li>\n<li>如果已经达到了最大线程数，则执行指定的拒绝策略</li>\n</ol>\n<h3 id=\"创建线程池\"><a href=\"#创建线程池\" class=\"headerlink\" title=\"创建线程池\"></a>创建线程池</h3><p>Java 的 Executors 工具类中提供了 5 种类型的线程池。</p>\n<ul>\n<li>FixedThreadPool<br>固定大小线程池，特点是线程数固定，使用无界队列。<br>适用于任务数量不均匀的场景、对内存压力不敏感但系统负载比较敏感的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>CachedThreadPool<br>Cached 线程池，特点是不限制线程数。<br>适用于要求低延迟的短期任务场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</div><div class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>SingleThreadExecutor<br>单线程线程池，就是一个线程的固定线程池。<br>适用于需要异步执行但需要保证任务顺序的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newSingleThreadScheduledExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DelegatedScheduledExecutorService</div><div class=\"line\">        (<span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>ScheduledThreadPool<br>Scheduled 线程池。<br>适用于定期执行任务场景，支持按固定频率定期执行和按固定延时定期执行两种方式。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, NANOSECONDS,</div><div class=\"line\">          <span class=\"keyword\">new</span> DelayedWorkQueue());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>WorkStealingPool<br>工作窃取线程池，使用的是 ForkJoinPool，是固定并行度的多任务队列。<br>适合任务执行时长不均匀的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newWorkStealingPool</span><span class=\"params\">(<span class=\"keyword\">int</span> parallelism)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForkJoinPool</div><div class=\"line\">         (parallelism,</div><div class=\"line\">          ForkJoinPool.defaultForkJoinWorkerThreadFactory,</div><div class=\"line\">          <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>另外还可以根据业务需要自定义线程池，可使用 ThreadPoolExecutor(JUC工具类) 或 ThreadPoolTaskExecutor(Spring封装类) 。</p>\n<h3 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h3><ul>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>线程空闲时间和空闲时间的单位<br>当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。</li>\n<li>缓存队列<br>ArrayBlockingQueue: 有界队列，队列有最大容量限制<br>LinkedBlockingQueue: 无界队列，队列不限制容量<br>SynchronousQueue: 同步队列，内部没有缓冲区。</li>\n<li>线程工厂<br>用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等，一般使用默认工厂类即可。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VehicleThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ThreadGroup group;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger threadNumber = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String prefix;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VehicleThreadFactory</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        SecurityManager s = System.getSecurityManager();</div><div class=\"line\">        group = (s != <span class=\"keyword\">null</span>) ? s.getThreadGroup() :</div><div class=\"line\">                Thread.currentThread().getThreadGroup();</div><div class=\"line\">        prefix = name + <span class=\"string\">\"-thread-\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</div><div class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(group, r,</div><div class=\"line\">                prefix + threadNumber.getAndIncrement(),</div><div class=\"line\">                <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (t.isDaemon()) &#123;</div><div class=\"line\">            t.setDaemon(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (t.getPriority() != Thread.NORM_PRIORITY) &#123;</div><div class=\"line\">            t.setPriority(Thread.NORM_PRIORITY);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> t;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>拒绝策略<br>Abort：默认策略，抛出 RejectedExecutionException 。<br>Discard：直接丢弃任务。<br>CallerRuns：由提交任务的线程直接执行。<br>DiscardOldest: 会丢弃最早提交的任务。<br>也可以自定义策略，例如：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(r, executor) -&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        executor.getQueue().put(r);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">        log.warn(<span class=\"string\">\"retry put task error,message:&#123;&#125;\"</span>, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"同步与互斥\"><a href=\"#同步与互斥\" class=\"headerlink\" title=\"同步与互斥\"></a>同步与互斥</h2><h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><p>synchronized 应用在方法上时，在字节码中是通过方法的 <strong>ACC_SYNCHRONIZED</strong> 标志来实现的；<br>synchronized 应用在同步块上时，在字节码中是通过 <strong>monitorenter</strong> 和 <strong>monitorexit</strong> 实现的。<br>最终都是通过对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，当 Monitor 被某个线程持有后，就会处于锁定状态，此时 Owner 会指向持有 Monitor 对象的线程。Monitor 还有两个队列，用来存放进入及等待获取锁的线程。<br>JVM对其进行了大量优化</p>\n<ul>\n<li>锁消除</li>\n<li>锁粗化</li>\n<li>自旋和自适应自旋</li>\n<li>锁升级<br>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3>AQS是实现Lock基础，AQS 有一个 state 标记位，值为1时表示有线程占用，其他线程需要进入到同步队列等待。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ANLfHAAA3fj0S8po403.png\" alt=\"img\"></li>\n</ul>\n<ol>\n<li>当获得锁的线程需要等待某个条件时，会进入 condition 的等待队列，等待队列可以有多个。</li>\n<li>当 condition 条件满足时，线程会从等待队列重新进入同步队列进行获取锁的竞争</li>\n</ol>\n<ul>\n<li>ReentrantLock<br>基于AQS实现，内部有公平锁和非公平锁两种实现，<strong>差别就在于新来的线程是否比已经在同步队列中的等待线程更早获得锁</strong>。</li>\n<li>Semaphore<br>基于AQS实现，差别在于 ReentrantLock 是独占锁，Semaphore 是共享锁。</li>\n</ul>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><p>乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS。它认为并发操作并不总会发生。<br>操作流程如下：其中比较并写回的操作是通过操作系统原语实现的，保证执行过程中不会被中断。</p>\n<ol>\n<li>线程在读取数据时不进行加锁；</li>\n<li>在准备写回数据时，比较原值是否修改；</li>\n<li>若未被其他线程修改则写回；</li>\n<li>若已被修改，则重新执行读取流程。</li>\n</ol>\n<p>缺点：容易出现ABA问题，不一定会影响结果，但还是需要防范，可以通过增加额外的标志位或者时间戳解决。JUC 工具包中提供了这样的类。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6AB5XwAAAWMnENBjk562.png\" alt=\"img\"></p>\n<ol>\n<li>线程 T1 读取值 A 之后，发生两次写入。</li>\n<li>先由线程 T2 写回了 B</li>\n<li>又由 T3 写回了 A</li>\n<li>此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。</li>\n</ol>\n<p>synchronized 和 ReentrantLock 的区别：<br>相同点：都是可重入、重量级锁。<br>不同点：</p>\n<ol>\n<li>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API。</li>\n<li>ReentrantLock 比 synchronized 增加了一些高级功能。例如：等待可中断、可实现公平锁、可绑定多个条件。<br>使用场景：</li>\n</ol>\n<h2 id=\"线程状态转换\"><a href=\"#线程状态转换\" class=\"headerlink\" title=\"线程状态转换\"></a>线程状态转换</h2><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI2Ab8rJAACvTREK08g324.png\" alt=\"img\"></p>\n<ol>\n<li>当创建一个线程时，线程处在 NEW 状态。</li>\n<li>运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态，但线程此时是 READY 状态，就绪状态等待线程调度，在获取 CPU 后才能进入 RUNNING 运行状态。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。</li>\n<li>线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态，当获取到锁后，会从 BLOCKED 状态恢复到 RUNNABLE 可运行状态。</li>\n<li>调用 Object.wait、Thread.join等，进入 TIMED_WAITING 有超时时间的等待状态。调用 Thread.join 或者 Locksupport.park 等，进入 WAITING 无超时的等待状态。均可以通过 notify 或 unpark 结束等待状态并恢复到RUNNABLE 可运行状态。</li>\n<li>线程运行完成结束，进入 TERMINATED 状态。</li>\n</ol>\n<h2 id=\"JUC\"><a href=\"#JUC\" class=\"headerlink\" title=\"JUC\"></a>JUC</h2><h3 id=\"原子类\"><a href=\"#原子类\" class=\"headerlink\" title=\"原子类\"></a>原子类</h3><p>例如：AtomicBoolean、AtomicLong、AtomicInteger、LongAdder、LongAccumulator等。<br>AtomicLong：通过 unsafe 类实现，基于CAS。<br>LongAdder：基于Cell，分段锁思想，空间换时间，更适合高并发场景。<br>LongAccumulator：提供了比LongAdder更强大的功能，能够指定对数据的操作规则，例如可以把对数据的相加操作改成相乘操作。</p>\n<h3 id=\"锁类\"><a href=\"#锁类\" class=\"headerlink\" title=\"锁类\"></a>锁类</h3><p>ReentrantLock<br>ReentrantReadWriteLock<br>StampedLock：JDK 1.8 改进的读写锁，是使用一种 CLH 的乐观锁，能够有效防止写饥饿。所谓写饥饿就是在多线程读写时，读线程访问非常频繁，导致总是有读线程占用资源，写线程很难加上写锁。<br>LockSupport</p>\n<h3 id=\"异步执行类\"><a href=\"#异步执行类\" class=\"headerlink\" title=\"异步执行类\"></a>异步执行类</h3><p>Executors：用于创建线程池<br>ForkJoinPool：1.7提供，采用分治思想，将大任务分解成多个小任务处理，然后在合并处理结果。特点是使用工作窃取算法，可以有效平衡多任务时间长短不一的场景。<br>FutureTask<br>CompletableFuture：可以支持流式调用，可以方便的进行多 future 的组合使用，例如可以同时执行两个异步任务，然后对执行结果进行合并处理。还可以很方便地设置完成时间。</p>\n<h3 id=\"阻塞队列类\"><a href=\"#阻塞队列类\" class=\"headerlink\" title=\"阻塞队列类\"></a>阻塞队列类</h3><p>LinkedBlockingDeque：双端队列，也就是可以分别从队头和队尾操作入队、出队。<br>ArrayBlockingQueue：单端队列，只能从队尾入队，队头出队。</p>\n<h3 id=\"多线程协作类\"><a href=\"#多线程协作类\" class=\"headerlink\" title=\"多线程协作类\"></a>多线程协作类</h3><p>CountDownLatch<br><strong>底层原理</strong><br><strong>多线程执行任务后汇总</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</div><div class=\"line\">CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(count);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"线程：\"</span> + index);</div><div class=\"line\">        latch.countDown();</div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">latch.await();</div><div class=\"line\">System.out.println(<span class=\"string\">\"主线程\"</span>);</div></pre></td></tr></table></figure></p>\n<p><strong>模拟线程并发</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            latch.await();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"线程：\"</span> + index);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">latch.countDown();</div></pre></td></tr></table></figure></p>\n<p>CyclicBarrier<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">CyclicBarrier barrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">10</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            barrier.await();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"线程：\"</span> + index);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Semaphore<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"车辆\"</span> + index + <span class=\"string\">\"到达停车场\"</span>);</div><div class=\"line\">            semaphore.acquire();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"车辆\"</span> + index + <span class=\"string\">\"进停车场\"</span>);</div><div class=\"line\">            semaphore.release();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"车辆\"</span> + index + <span class=\"string\">\"出停车场\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"集合类\"><a href=\"#集合类\" class=\"headerlink\" title=\"集合类\"></a>集合类</h3><p>ConcurrentHashMap：线程安全的HashMap。<br>CopyOnWriteArrayList：通过写入数据时进行 copy 修改，然后更新引用的方式，来消除并行读写中的锁使用，比较适合读多写少，数据量比较小，但是并发非常高的场景。</p>\n<h2 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h2><h3 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h3><p>wait 和 sleep 区别：</p>\n<ul>\n<li>wait 属于 Object 类，sleep 属于 Thread 类；</li>\n<li>wait 会释放锁对象，而 sleep 不会；</li>\n<li>使用的位置不同，wait 需要在同步块中使用，sleep 可以在任意地方；</li>\n<li>sleep 需要捕获异常，而 wait 不需要。</li>\n</ul>\n<h3 id=\"notify\"><a href=\"#notify\" class=\"headerlink\" title=\"notify\"></a>notify</h3><h3 id=\"notifyAll\"><a href=\"#notifyAll\" class=\"headerlink\" title=\"notifyAll\"></a>notifyAll</h3><h2 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h2><p>产生条件：</p>\n<ul>\n<li>互斥</li>\n<li>请求并持有</li>\n<li>非剥夺</li>\n<li>循环等待<br>死锁检测与防止<br>竞争条件与临界区</li>\n</ul>\n<h2 id=\"机制\"><a href=\"#机制\" class=\"headerlink\" title=\"机制\"></a>机制</h2><h3 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h3><p>用来解决线程数据隔离的问题，底层使用ThreadLocalMap保存线程变量。<br><strong>底层实现</strong><br>每个线程都会有一个ThreadLocalMap变量，结构为：主干是一个数组，数组元素为Entry<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span> <span class=\"keyword\">extends</span> <span class=\"title\">WeakReference</span>&lt;<span class=\"title\">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/** The value associated with this ThreadLocal. */</span></div><div class=\"line\">    Object value;</div><div class=\"line\">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(k);</div><div class=\"line\">        value = v;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>k为ThreadLocal实例对象，value为具体的值。<br><strong>哈希冲突</strong><br>线性探测：如果发现这个位置上已经有其他key值的元素被占用，则利用固定的算法寻找一定步长的下个位置，依次判断，直至找到能够存放的位置。</p>\n<h3 id=\"Fork-Join\"><a href=\"#Fork-Join\" class=\"headerlink\" title=\"Fork/Join\"></a>Fork/Join</h3><p>用于大任务的分割与汇总</p>\n<h3 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h3><p>对多线程数据可见性的保证</p>\n<h3 id=\"Interrupt\"><a href=\"#Interrupt\" class=\"headerlink\" title=\"Interrupt\"></a>Interrupt</h3><p>线程的中断机制</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>线程池通过复用线程，避免线程频繁地创建和销毁。</p>\n<h3 id=\"线程池任务执行流程\"><a href=\"#线程池任务执行流程\" class=\"headerlink\" title=\"线程池任务执行流程\"></a>线程池任务执行流程</h3><p>提交任务的方法<br>submit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。<br>execute：submit 最终也是通过 execute 执行的。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png\" alt=\"img\"></p>\n<ol>\n<li>向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。</li>\n<li>如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。</li>\n<li>如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。</li>\n<li>如果已经达到了最大线程数，则执行指定的拒绝策略</li>\n</ol>\n<h3 id=\"创建线程池\"><a href=\"#创建线程池\" class=\"headerlink\" title=\"创建线程池\"></a>创建线程池</h3><p>Java 的 Executors 工具类中提供了 5 种类型的线程池。</p>\n<ul>\n<li>FixedThreadPool<br>固定大小线程池，特点是线程数固定，使用无界队列。<br>适用于任务数量不均匀的场景、对内存压力不敏感但系统负载比较敏感的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>CachedThreadPool<br>Cached 线程池，特点是不限制线程数。<br>适用于要求低延迟的短期任务场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</div><div class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</div><div class=\"line\">                                  <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>SingleThreadExecutor<br>单线程线程池，就是一个线程的固定线程池。<br>适用于需要异步执行但需要保证任务顺序的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newSingleThreadScheduledExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DelegatedScheduledExecutorService</div><div class=\"line\">        (<span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>ScheduledThreadPool<br>Scheduled 线程池。<br>适用于定期执行任务场景，支持按固定频率定期执行和按固定延时定期执行两种方式。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, NANOSECONDS,</div><div class=\"line\">          <span class=\"keyword\">new</span> DelayedWorkQueue());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>WorkStealingPool<br>工作窃取线程池，使用的是 ForkJoinPool，是固定并行度的多任务队列。<br>适合任务执行时长不均匀的场景。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newWorkStealingPool</span><span class=\"params\">(<span class=\"keyword\">int</span> parallelism)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForkJoinPool</div><div class=\"line\">         (parallelism,</div><div class=\"line\">          ForkJoinPool.defaultForkJoinWorkerThreadFactory,</div><div class=\"line\">          <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>另外还可以根据业务需要自定义线程池，可使用 ThreadPoolExecutor(JUC工具类) 或 ThreadPoolTaskExecutor(Spring封装类) 。</p>\n<h3 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h3><ul>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>线程空闲时间和空闲时间的单位<br>当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。</li>\n<li>缓存队列<br>ArrayBlockingQueue: 有界队列，队列有最大容量限制<br>LinkedBlockingQueue: 无界队列，队列不限制容量<br>SynchronousQueue: 同步队列，内部没有缓冲区。</li>\n<li>线程工厂<br>用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等，一般使用默认工厂类即可。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VehicleThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ThreadGroup group;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger threadNumber = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String prefix;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VehicleThreadFactory</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        SecurityManager s = System.getSecurityManager();</div><div class=\"line\">        group = (s != <span class=\"keyword\">null</span>) ? s.getThreadGroup() :</div><div class=\"line\">                Thread.currentThread().getThreadGroup();</div><div class=\"line\">        prefix = name + <span class=\"string\">\"-thread-\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</div><div class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(group, r,</div><div class=\"line\">                prefix + threadNumber.getAndIncrement(),</div><div class=\"line\">                <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (t.isDaemon()) &#123;</div><div class=\"line\">            t.setDaemon(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (t.getPriority() != Thread.NORM_PRIORITY) &#123;</div><div class=\"line\">            t.setPriority(Thread.NORM_PRIORITY);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> t;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>拒绝策略<br>Abort：默认策略，抛出 RejectedExecutionException 。<br>Discard：直接丢弃任务。<br>CallerRuns：由提交任务的线程直接执行。<br>DiscardOldest: 会丢弃最早提交的任务。<br>也可以自定义策略，例如：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(r, executor) -&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        executor.getQueue().put(r);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">        log.warn(<span class=\"string\">\"retry put task error,message:&#123;&#125;\"</span>, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"同步与互斥\"><a href=\"#同步与互斥\" class=\"headerlink\" title=\"同步与互斥\"></a>同步与互斥</h2><h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><p>synchronized 应用在方法上时，在字节码中是通过方法的 <strong>ACC_SYNCHRONIZED</strong> 标志来实现的；<br>synchronized 应用在同步块上时，在字节码中是通过 <strong>monitorenter</strong> 和 <strong>monitorexit</strong> 实现的。<br>最终都是通过对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，当 Monitor 被某个线程持有后，就会处于锁定状态，此时 Owner 会指向持有 Monitor 对象的线程。Monitor 还有两个队列，用来存放进入及等待获取锁的线程。<br>JVM对其进行了大量优化</p>\n<ul>\n<li>锁消除</li>\n<li>锁粗化</li>\n<li>自旋和自适应自旋</li>\n<li>锁升级<br>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3>AQS是实现Lock基础，AQS 有一个 state 标记位，值为1时表示有线程占用，其他线程需要进入到同步队列等待。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ANLfHAAA3fj0S8po403.png\" alt=\"img\"></li>\n</ul>\n<ol>\n<li>当获得锁的线程需要等待某个条件时，会进入 condition 的等待队列，等待队列可以有多个。</li>\n<li>当 condition 条件满足时，线程会从等待队列重新进入同步队列进行获取锁的竞争</li>\n</ol>\n<ul>\n<li>ReentrantLock<br>基于AQS实现，内部有公平锁和非公平锁两种实现，<strong>差别就在于新来的线程是否比已经在同步队列中的等待线程更早获得锁</strong>。</li>\n<li>Semaphore<br>基于AQS实现，差别在于 ReentrantLock 是独占锁，Semaphore 是共享锁。</li>\n</ul>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><p>乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS。它认为并发操作并不总会发生。<br>操作流程如下：其中比较并写回的操作是通过操作系统原语实现的，保证执行过程中不会被中断。</p>\n<ol>\n<li>线程在读取数据时不进行加锁；</li>\n<li>在准备写回数据时，比较原值是否修改；</li>\n<li>若未被其他线程修改则写回；</li>\n<li>若已被修改，则重新执行读取流程。</li>\n</ol>\n<p>缺点：容易出现ABA问题，不一定会影响结果，但还是需要防范，可以通过增加额外的标志位或者时间戳解决。JUC 工具包中提供了这样的类。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6AB5XwAAAWMnENBjk562.png\" alt=\"img\"></p>\n<ol>\n<li>线程 T1 读取值 A 之后，发生两次写入。</li>\n<li>先由线程 T2 写回了 B</li>\n<li>又由 T3 写回了 A</li>\n<li>此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。</li>\n</ol>\n<p>synchronized 和 ReentrantLock 的区别：<br>相同点：都是可重入、重量级锁。<br>不同点：</p>\n<ol>\n<li>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API。</li>\n<li>ReentrantLock 比 synchronized 增加了一些高级功能。例如：等待可中断、可实现公平锁、可绑定多个条件。<br>使用场景：</li>\n</ol>\n<h2 id=\"线程状态转换\"><a href=\"#线程状态转换\" class=\"headerlink\" title=\"线程状态转换\"></a>线程状态转换</h2><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI2Ab8rJAACvTREK08g324.png\" alt=\"img\"></p>\n<ol>\n<li>当创建一个线程时，线程处在 NEW 状态。</li>\n<li>运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态，但线程此时是 READY 状态，就绪状态等待线程调度，在获取 CPU 后才能进入 RUNNING 运行状态。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。</li>\n<li>线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态，当获取到锁后，会从 BLOCKED 状态恢复到 RUNNABLE 可运行状态。</li>\n<li>调用 Object.wait、Thread.join等，进入 TIMED_WAITING 有超时时间的等待状态。调用 Thread.join 或者 Locksupport.park 等，进入 WAITING 无超时的等待状态。均可以通过 notify 或 unpark 结束等待状态并恢复到RUNNABLE 可运行状态。</li>\n<li>线程运行完成结束，进入 TERMINATED 状态。</li>\n</ol>\n<h2 id=\"JUC\"><a href=\"#JUC\" class=\"headerlink\" title=\"JUC\"></a>JUC</h2><h3 id=\"原子类\"><a href=\"#原子类\" class=\"headerlink\" title=\"原子类\"></a>原子类</h3><p>例如：AtomicBoolean、AtomicLong、AtomicInteger、LongAdder、LongAccumulator等。<br>AtomicLong：通过 unsafe 类实现，基于CAS。<br>LongAdder：基于Cell，分段锁思想，空间换时间，更适合高并发场景。<br>LongAccumulator：提供了比LongAdder更强大的功能，能够指定对数据的操作规则，例如可以把对数据的相加操作改成相乘操作。</p>\n<h3 id=\"锁类\"><a href=\"#锁类\" class=\"headerlink\" title=\"锁类\"></a>锁类</h3><p>ReentrantLock<br>ReentrantReadWriteLock<br>StampedLock：JDK 1.8 改进的读写锁，是使用一种 CLH 的乐观锁，能够有效防止写饥饿。所谓写饥饿就是在多线程读写时，读线程访问非常频繁，导致总是有读线程占用资源，写线程很难加上写锁。<br>LockSupport</p>\n<h3 id=\"异步执行类\"><a href=\"#异步执行类\" class=\"headerlink\" title=\"异步执行类\"></a>异步执行类</h3><p>Executors：用于创建线程池<br>ForkJoinPool：1.7提供，采用分治思想，将大任务分解成多个小任务处理，然后在合并处理结果。特点是使用工作窃取算法，可以有效平衡多任务时间长短不一的场景。<br>FutureTask<br>CompletableFuture：可以支持流式调用，可以方便的进行多 future 的组合使用，例如可以同时执行两个异步任务，然后对执行结果进行合并处理。还可以很方便地设置完成时间。</p>\n<h3 id=\"阻塞队列类\"><a href=\"#阻塞队列类\" class=\"headerlink\" title=\"阻塞队列类\"></a>阻塞队列类</h3><p>LinkedBlockingDeque：双端队列，也就是可以分别从队头和队尾操作入队、出队。<br>ArrayBlockingQueue：单端队列，只能从队尾入队，队头出队。</p>\n<h3 id=\"多线程协作类\"><a href=\"#多线程协作类\" class=\"headerlink\" title=\"多线程协作类\"></a>多线程协作类</h3><p>CountDownLatch<br><strong>底层原理</strong><br><strong>多线程执行任务后汇总</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</div><div class=\"line\">CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(count);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"线程：\"</span> + index);</div><div class=\"line\">        latch.countDown();</div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">latch.await();</div><div class=\"line\">System.out.println(<span class=\"string\">\"主线程\"</span>);</div></pre></td></tr></table></figure></p>\n<p><strong>模拟线程并发</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            latch.await();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"线程：\"</span> + index);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">latch.countDown();</div></pre></td></tr></table></figure></p>\n<p>CyclicBarrier<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">CyclicBarrier barrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">10</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            barrier.await();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"线程：\"</span> + index);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Semaphore<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"车辆\"</span> + index + <span class=\"string\">\"到达停车场\"</span>);</div><div class=\"line\">            semaphore.acquire();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"车辆\"</span> + index + <span class=\"string\">\"进停车场\"</span>);</div><div class=\"line\">            semaphore.release();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"车辆\"</span> + index + <span class=\"string\">\"出停车场\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"集合类\"><a href=\"#集合类\" class=\"headerlink\" title=\"集合类\"></a>集合类</h3><p>ConcurrentHashMap：线程安全的HashMap。<br>CopyOnWriteArrayList：通过写入数据时进行 copy 修改，然后更新引用的方式，来消除并行读写中的锁使用，比较适合读多写少，数据量比较小，但是并发非常高的场景。</p>\n<h2 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h2><h3 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h3><p>wait 和 sleep 区别：</p>\n<ul>\n<li>wait 属于 Object 类，sleep 属于 Thread 类；</li>\n<li>wait 会释放锁对象，而 sleep 不会；</li>\n<li>使用的位置不同，wait 需要在同步块中使用，sleep 可以在任意地方；</li>\n<li>sleep 需要捕获异常，而 wait 不需要。</li>\n</ul>\n<h3 id=\"notify\"><a href=\"#notify\" class=\"headerlink\" title=\"notify\"></a>notify</h3><h3 id=\"notifyAll\"><a href=\"#notifyAll\" class=\"headerlink\" title=\"notifyAll\"></a>notifyAll</h3><h2 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h2><p>产生条件：</p>\n<ul>\n<li>互斥</li>\n<li>请求并持有</li>\n<li>非剥夺</li>\n<li>循环等待<br>死锁检测与防止<br>竞争条件与临界区</li>\n</ul>\n<h2 id=\"机制\"><a href=\"#机制\" class=\"headerlink\" title=\"机制\"></a>机制</h2><h3 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h3><p>用来解决线程数据隔离的问题，底层使用ThreadLocalMap保存线程变量。<br><strong>底层实现</strong><br>每个线程都会有一个ThreadLocalMap变量，结构为：主干是一个数组，数组元素为Entry<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span> <span class=\"keyword\">extends</span> <span class=\"title\">WeakReference</span>&lt;<span class=\"title\">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/** The value associated with this ThreadLocal. */</span></div><div class=\"line\">    Object value;</div><div class=\"line\">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(k);</div><div class=\"line\">        value = v;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>k为ThreadLocal实例对象，value为具体的值。<br><strong>哈希冲突</strong><br>线性探测：如果发现这个位置上已经有其他key值的元素被占用，则利用固定的算法寻找一定步长的下个位置，依次判断，直至找到能够存放的位置。</p>\n<h3 id=\"Fork-Join\"><a href=\"#Fork-Join\" class=\"headerlink\" title=\"Fork/Join\"></a>Fork/Join</h3><p>用于大任务的分割与汇总</p>\n<h3 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h3><p>对多线程数据可见性的保证</p>\n<h3 id=\"Interrupt\"><a href=\"#Interrupt\" class=\"headerlink\" title=\"Interrupt\"></a>Interrupt</h3><p>线程的中断机制</p>\n"},{"title":"常用工具集","_content":"\n## 团队协作\n### Git\n\n#### MAC SSH Key\n一台电脑可以配置多个ssh key，方便push到不同的代码平台。\n\n1. 生成：ssh-keygen -t rsa -C \"代码平台上的邮箱\", 输入之后第一步确认保存文件地址(例如：/*/id_rsa)，第二步和第三步为密码（可不输入）。\n2. 复制：pbcopy < ~/.ssh/id_rsa.pub\n3. 验证：ssh -T git@github.com\n\n#### 版本回退\n1. 找到目标版本的id ：git log\n2. 本地回退到目标版本 : git reset \\--hard id\n3. 推送到远程仓库 ：git push origin HEAD \\--force\n\n### SVN\n\n## 质量保证\n\n## 压测\n### JMeter\n\n## 容器与代理\n\n## 文档管理\n### confluence\n\n## 网络\n\n## IDEA\n以下快捷键均为MAC版本\n### 跳转快捷键\n\n菜单 -> Navigate\n* Back/Forward\n* Last/Next Edit Location\n* Bookmarks\n\n### 编辑多行\nEdit -> Find -> Select All Occurrences  选中多行  ⌃ + ⌘ + G\n\n### 配置导入导出\n\n### 常用插件\n\n- Lombok: 自动生成Get、Set等方法\n- Alibaba Java Coding Guidelines: 代码规范检查\n- CodeGlance: 代码缩略图\n- Sequence Diagram: 时序图生成\n- Statistic: 代码统计\n- Translation: 翻译\n- Maven Helper: 依赖冲突分析\n- MyBatisCodeHelperPro: 生成MyBatis代码\n- Free-idea-mybatis: Java 与 XML 跳转\n- RestfulToolKit: Restful接口预览\n- SonarLint: 集成Sonar服务器\n\n### 激活地址\n一个月的有效期：http://idea.songshuhezi.com/\n永久：需破解\n\n### 模板（live template）\n\n缩写：模板的触发命令\n \n说明：模板的用途\n\n编辑模板\n\n编辑变量: $VAR$\n\n光标最后的位置：$END$\n\n内置函数：\n1. decapitalize：首字母转小写\n\n","source":"_posts/20180725.md","raw":"---\ntitle: 常用工具集\ncategory: 应用模块\n---\n\n## 团队协作\n### Git\n\n#### MAC SSH Key\n一台电脑可以配置多个ssh key，方便push到不同的代码平台。\n\n1. 生成：ssh-keygen -t rsa -C \"代码平台上的邮箱\", 输入之后第一步确认保存文件地址(例如：/*/id_rsa)，第二步和第三步为密码（可不输入）。\n2. 复制：pbcopy < ~/.ssh/id_rsa.pub\n3. 验证：ssh -T git@github.com\n\n#### 版本回退\n1. 找到目标版本的id ：git log\n2. 本地回退到目标版本 : git reset \\--hard id\n3. 推送到远程仓库 ：git push origin HEAD \\--force\n\n### SVN\n\n## 质量保证\n\n## 压测\n### JMeter\n\n## 容器与代理\n\n## 文档管理\n### confluence\n\n## 网络\n\n## IDEA\n以下快捷键均为MAC版本\n### 跳转快捷键\n\n菜单 -> Navigate\n* Back/Forward\n* Last/Next Edit Location\n* Bookmarks\n\n### 编辑多行\nEdit -> Find -> Select All Occurrences  选中多行  ⌃ + ⌘ + G\n\n### 配置导入导出\n\n### 常用插件\n\n- Lombok: 自动生成Get、Set等方法\n- Alibaba Java Coding Guidelines: 代码规范检查\n- CodeGlance: 代码缩略图\n- Sequence Diagram: 时序图生成\n- Statistic: 代码统计\n- Translation: 翻译\n- Maven Helper: 依赖冲突分析\n- MyBatisCodeHelperPro: 生成MyBatis代码\n- Free-idea-mybatis: Java 与 XML 跳转\n- RestfulToolKit: Restful接口预览\n- SonarLint: 集成Sonar服务器\n\n### 激活地址\n一个月的有效期：http://idea.songshuhezi.com/\n永久：需破解\n\n### 模板（live template）\n\n缩写：模板的触发命令\n \n说明：模板的用途\n\n编辑模板\n\n编辑变量: $VAR$\n\n光标最后的位置：$END$\n\n内置函数：\n1. decapitalize：首字母转小写\n\n","slug":"20180725","published":1,"date":"2023-01-03T01:29:04.006Z","updated":"2023-01-03T01:29:04.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0p0009cwyuzp65uzdn","content":"<h2 id=\"团队协作\"><a href=\"#团队协作\" class=\"headerlink\" title=\"团队协作\"></a>团队协作</h2><h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><h4 id=\"MAC-SSH-Key\"><a href=\"#MAC-SSH-Key\" class=\"headerlink\" title=\"MAC SSH Key\"></a>MAC SSH Key</h4><p>一台电脑可以配置多个ssh key，方便push到不同的代码平台。</p>\n<ol>\n<li>生成：ssh-keygen -t rsa -C “代码平台上的邮箱”, 输入之后第一步确认保存文件地址(例如：/*/id_rsa)，第二步和第三步为密码（可不输入）。</li>\n<li>复制：pbcopy &lt; ~/.ssh/id_rsa.pub</li>\n<li>验证：ssh -T git@github.com</li>\n</ol>\n<h4 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h4><ol>\n<li>找到目标版本的id ：git log</li>\n<li>本地回退到目标版本 : git reset --hard id</li>\n<li>推送到远程仓库 ：git push origin HEAD --force</li>\n</ol>\n<h3 id=\"SVN\"><a href=\"#SVN\" class=\"headerlink\" title=\"SVN\"></a>SVN</h3><h2 id=\"质量保证\"><a href=\"#质量保证\" class=\"headerlink\" title=\"质量保证\"></a>质量保证</h2><h2 id=\"压测\"><a href=\"#压测\" class=\"headerlink\" title=\"压测\"></a>压测</h2><h3 id=\"JMeter\"><a href=\"#JMeter\" class=\"headerlink\" title=\"JMeter\"></a>JMeter</h3><h2 id=\"容器与代理\"><a href=\"#容器与代理\" class=\"headerlink\" title=\"容器与代理\"></a>容器与代理</h2><h2 id=\"文档管理\"><a href=\"#文档管理\" class=\"headerlink\" title=\"文档管理\"></a>文档管理</h2><h3 id=\"confluence\"><a href=\"#confluence\" class=\"headerlink\" title=\"confluence\"></a>confluence</h3><h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h2 id=\"IDEA\"><a href=\"#IDEA\" class=\"headerlink\" title=\"IDEA\"></a>IDEA</h2><p>以下快捷键均为MAC版本</p>\n<h3 id=\"跳转快捷键\"><a href=\"#跳转快捷键\" class=\"headerlink\" title=\"跳转快捷键\"></a>跳转快捷键</h3><p>菜单 -&gt; Navigate</p>\n<ul>\n<li>Back/Forward</li>\n<li>Last/Next Edit Location</li>\n<li>Bookmarks</li>\n</ul>\n<h3 id=\"编辑多行\"><a href=\"#编辑多行\" class=\"headerlink\" title=\"编辑多行\"></a>编辑多行</h3><p>Edit -&gt; Find -&gt; Select All Occurrences  选中多行  ⌃ + ⌘ + G</p>\n<h3 id=\"配置导入导出\"><a href=\"#配置导入导出\" class=\"headerlink\" title=\"配置导入导出\"></a>配置导入导出</h3><h3 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h3><ul>\n<li>Lombok: 自动生成Get、Set等方法</li>\n<li>Alibaba Java Coding Guidelines: 代码规范检查</li>\n<li>CodeGlance: 代码缩略图</li>\n<li>Sequence Diagram: 时序图生成</li>\n<li>Statistic: 代码统计</li>\n<li>Translation: 翻译</li>\n<li>Maven Helper: 依赖冲突分析</li>\n<li>MyBatisCodeHelperPro: 生成MyBatis代码</li>\n<li>Free-idea-mybatis: Java 与 XML 跳转</li>\n<li>RestfulToolKit: Restful接口预览</li>\n<li>SonarLint: 集成Sonar服务器</li>\n</ul>\n<h3 id=\"激活地址\"><a href=\"#激活地址\" class=\"headerlink\" title=\"激活地址\"></a>激活地址</h3><p>一个月的有效期：<a href=\"http://idea.songshuhezi.com/\" target=\"_blank\" rel=\"external\">http://idea.songshuhezi.com/</a><br>永久：需破解</p>\n<h3 id=\"模板（live-template）\"><a href=\"#模板（live-template）\" class=\"headerlink\" title=\"模板（live template）\"></a>模板（live template）</h3><p>缩写：模板的触发命令</p>\n<p>说明：模板的用途</p>\n<p>编辑模板</p>\n<p>编辑变量: $VAR$</p>\n<p>光标最后的位置：$END$</p>\n<p>内置函数：</p>\n<ol>\n<li>decapitalize：首字母转小写</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"团队协作\"><a href=\"#团队协作\" class=\"headerlink\" title=\"团队协作\"></a>团队协作</h2><h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><h4 id=\"MAC-SSH-Key\"><a href=\"#MAC-SSH-Key\" class=\"headerlink\" title=\"MAC SSH Key\"></a>MAC SSH Key</h4><p>一台电脑可以配置多个ssh key，方便push到不同的代码平台。</p>\n<ol>\n<li>生成：ssh-keygen -t rsa -C “代码平台上的邮箱”, 输入之后第一步确认保存文件地址(例如：/*/id_rsa)，第二步和第三步为密码（可不输入）。</li>\n<li>复制：pbcopy &lt; ~/.ssh/id_rsa.pub</li>\n<li>验证：ssh -T git@github.com</li>\n</ol>\n<h4 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h4><ol>\n<li>找到目标版本的id ：git log</li>\n<li>本地回退到目标版本 : git reset --hard id</li>\n<li>推送到远程仓库 ：git push origin HEAD --force</li>\n</ol>\n<h3 id=\"SVN\"><a href=\"#SVN\" class=\"headerlink\" title=\"SVN\"></a>SVN</h3><h2 id=\"质量保证\"><a href=\"#质量保证\" class=\"headerlink\" title=\"质量保证\"></a>质量保证</h2><h2 id=\"压测\"><a href=\"#压测\" class=\"headerlink\" title=\"压测\"></a>压测</h2><h3 id=\"JMeter\"><a href=\"#JMeter\" class=\"headerlink\" title=\"JMeter\"></a>JMeter</h3><h2 id=\"容器与代理\"><a href=\"#容器与代理\" class=\"headerlink\" title=\"容器与代理\"></a>容器与代理</h2><h2 id=\"文档管理\"><a href=\"#文档管理\" class=\"headerlink\" title=\"文档管理\"></a>文档管理</h2><h3 id=\"confluence\"><a href=\"#confluence\" class=\"headerlink\" title=\"confluence\"></a>confluence</h3><h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h2 id=\"IDEA\"><a href=\"#IDEA\" class=\"headerlink\" title=\"IDEA\"></a>IDEA</h2><p>以下快捷键均为MAC版本</p>\n<h3 id=\"跳转快捷键\"><a href=\"#跳转快捷键\" class=\"headerlink\" title=\"跳转快捷键\"></a>跳转快捷键</h3><p>菜单 -&gt; Navigate</p>\n<ul>\n<li>Back/Forward</li>\n<li>Last/Next Edit Location</li>\n<li>Bookmarks</li>\n</ul>\n<h3 id=\"编辑多行\"><a href=\"#编辑多行\" class=\"headerlink\" title=\"编辑多行\"></a>编辑多行</h3><p>Edit -&gt; Find -&gt; Select All Occurrences  选中多行  ⌃ + ⌘ + G</p>\n<h3 id=\"配置导入导出\"><a href=\"#配置导入导出\" class=\"headerlink\" title=\"配置导入导出\"></a>配置导入导出</h3><h3 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h3><ul>\n<li>Lombok: 自动生成Get、Set等方法</li>\n<li>Alibaba Java Coding Guidelines: 代码规范检查</li>\n<li>CodeGlance: 代码缩略图</li>\n<li>Sequence Diagram: 时序图生成</li>\n<li>Statistic: 代码统计</li>\n<li>Translation: 翻译</li>\n<li>Maven Helper: 依赖冲突分析</li>\n<li>MyBatisCodeHelperPro: 生成MyBatis代码</li>\n<li>Free-idea-mybatis: Java 与 XML 跳转</li>\n<li>RestfulToolKit: Restful接口预览</li>\n<li>SonarLint: 集成Sonar服务器</li>\n</ul>\n<h3 id=\"激活地址\"><a href=\"#激活地址\" class=\"headerlink\" title=\"激活地址\"></a>激活地址</h3><p>一个月的有效期：<a href=\"http://idea.songshuhezi.com/\" target=\"_blank\" rel=\"external\">http://idea.songshuhezi.com/</a><br>永久：需破解</p>\n<h3 id=\"模板（live-template）\"><a href=\"#模板（live-template）\" class=\"headerlink\" title=\"模板（live template）\"></a>模板（live template）</h3><p>缩写：模板的触发命令</p>\n<p>说明：模板的用途</p>\n<p>编辑模板</p>\n<p>编辑变量: $VAR$</p>\n<p>光标最后的位置：$END$</p>\n<p>内置函数：</p>\n<ol>\n<li>decapitalize：首字母转小写</li>\n</ol>\n"},{"title":"数据结构与算法","_content":"\n## 数据结构\n\n### 二叉搜索树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6AIEwmAAAW0UV9vPM694.png)\n\n- 每个节点包含一个值。\n- 每个节点至多有两个子树。\n- 每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。\n\n二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。\n\n### 平衡二叉树\n\n平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，比较适合插入、删除比较少的场景。\n\n### 红黑树\n\n红黑树是一种更加实用的非严格的平衡二叉树，更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AeAxdAAAmJsTBAww115.png)\n\n- 每个节点不是红色就是黑色。\n- 根节点是黑色。\n- 每个叶子节点都是黑色的空节点，如图中的黑色三角。\n- 红色节点的两个子节点都是黑色的。\n- 任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。    \n\n### B树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6APZerAAAkJXd9qEE912.png)\n\nB 树是一种多叉树，也叫多路搜索树，\n\n- B 树中每个节点可以存储多个元素。\n- 关键字分布在整颗树中，一个关键字只出现在一个节点中。\n- 搜索可能在非叶节点停止。\n- 非常适合用在文件索引上，可以有效减少磁盘 IO 次数。\n\nB 树中所有结点的最大子节点数称为 B 树的阶，如上图所示是一棵 3 阶 B 树，也叫 2-3 树。\n\n一个 m 阶 B 树有如下特点：\n\n1. 非叶节点最多有 m 棵子树。\n2. 根节点最少有两个子树，非根、非叶节点最少有 m/2 棵子树。\n3. 非叶子结点中保存的关键字个数，等于该节点子树个数−1。\n4. 非叶子节点中的关键字大小有序。\n5. 节点中每个关键字的左子树中的关键字都小于该关键字，右子树中的关键字都大于该关键字。\n6. 所有叶节点都在同一层。\n7. B 树在查找时，从根结点开始，对结点内的有序的关键字序列进行二分查找，如果找到就结束，没有找到就进入查询关键字所属范围的子树进行查找，直到叶节点。\n\n\n\n\n\n\n\n### B+树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AUR7GAAAe0Dk9-gg936.png)\n\n1. 节点中的关键字与子树数目相同。\n2. 关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身。\n3. 所有关键字都出现在叶子节点中。\n4. 所有叶子节点都有指向下一个叶子节点的指针。\n5. 在搜索时不会在非叶子节点命中，一定会查询到叶子节点。\n6. 叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据。\n\nB+ 树更适合索引系统的原因\n\n1. 由于叶节点之间有指针相连，B+ 树更适合范围检索；\n2. 由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；\n3. B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。\n\n### B*树\n\n## 算法\n\n## 复杂度\n\n## 排序\n\n## 查找\n\n## 字符串匹配\n\n## 常用算法思路\n\n## 参考文章\n\n- [重学数据结构及算法](https://www.kancloud.cn/alex_wsc/datastrcalg/1853997)\n- [300分钟搞定数据结构与算法](https://www.kancloud.cn/alex_wsc/dataalg/1853982)\n- [数据结构精讲：从原理到实战](https://www.kancloud.cn/alex_wsc/datastructure/1852329)\n- 算法导论\n","source":"_posts/20180720.md","raw":"---\ntitle: 数据结构与算法\ncategory: 基础模块\n---\n\n## 数据结构\n\n### 二叉搜索树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6AIEwmAAAW0UV9vPM694.png)\n\n- 每个节点包含一个值。\n- 每个节点至多有两个子树。\n- 每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。\n\n二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。\n\n### 平衡二叉树\n\n平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，比较适合插入、删除比较少的场景。\n\n### 红黑树\n\n红黑树是一种更加实用的非严格的平衡二叉树，更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AeAxdAAAmJsTBAww115.png)\n\n- 每个节点不是红色就是黑色。\n- 根节点是黑色。\n- 每个叶子节点都是黑色的空节点，如图中的黑色三角。\n- 红色节点的两个子节点都是黑色的。\n- 任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。    \n\n### B树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6APZerAAAkJXd9qEE912.png)\n\nB 树是一种多叉树，也叫多路搜索树，\n\n- B 树中每个节点可以存储多个元素。\n- 关键字分布在整颗树中，一个关键字只出现在一个节点中。\n- 搜索可能在非叶节点停止。\n- 非常适合用在文件索引上，可以有效减少磁盘 IO 次数。\n\nB 树中所有结点的最大子节点数称为 B 树的阶，如上图所示是一棵 3 阶 B 树，也叫 2-3 树。\n\n一个 m 阶 B 树有如下特点：\n\n1. 非叶节点最多有 m 棵子树。\n2. 根节点最少有两个子树，非根、非叶节点最少有 m/2 棵子树。\n3. 非叶子结点中保存的关键字个数，等于该节点子树个数−1。\n4. 非叶子节点中的关键字大小有序。\n5. 节点中每个关键字的左子树中的关键字都小于该关键字，右子树中的关键字都大于该关键字。\n6. 所有叶节点都在同一层。\n7. B 树在查找时，从根结点开始，对结点内的有序的关键字序列进行二分查找，如果找到就结束，没有找到就进入查询关键字所属范围的子树进行查找，直到叶节点。\n\n\n\n\n\n\n\n### B+树\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AUR7GAAAe0Dk9-gg936.png)\n\n1. 节点中的关键字与子树数目相同。\n2. 关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身。\n3. 所有关键字都出现在叶子节点中。\n4. 所有叶子节点都有指向下一个叶子节点的指针。\n5. 在搜索时不会在非叶子节点命中，一定会查询到叶子节点。\n6. 叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据。\n\nB+ 树更适合索引系统的原因\n\n1. 由于叶节点之间有指针相连，B+ 树更适合范围检索；\n2. 由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；\n3. B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。\n\n### B*树\n\n## 算法\n\n## 复杂度\n\n## 排序\n\n## 查找\n\n## 字符串匹配\n\n## 常用算法思路\n\n## 参考文章\n\n- [重学数据结构及算法](https://www.kancloud.cn/alex_wsc/datastrcalg/1853997)\n- [300分钟搞定数据结构与算法](https://www.kancloud.cn/alex_wsc/dataalg/1853982)\n- [数据结构精讲：从原理到实战](https://www.kancloud.cn/alex_wsc/datastructure/1852329)\n- 算法导论\n","slug":"20180720","published":1,"date":"2023-01-03T01:29:04.006Z","updated":"2023-01-03T01:29:04.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0q000bcwyuwhoikee5","content":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6AIEwmAAAW0UV9vPM694.png\" alt=\"img\"></p>\n<ul>\n<li>每个节点包含一个值。</li>\n<li>每个节点至多有两个子树。</li>\n<li>每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。</li>\n</ul>\n<p>二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。</p>\n<h3 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h3><p>平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，比较适合插入、删除比较少的场景。</p>\n<h3 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h3><p>红黑树是一种更加实用的非严格的平衡二叉树，更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。</p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AeAxdAAAmJsTBAww115.png\" alt=\"img\"></p>\n<ul>\n<li>每个节点不是红色就是黑色。</li>\n<li>根节点是黑色。</li>\n<li>每个叶子节点都是黑色的空节点，如图中的黑色三角。</li>\n<li>红色节点的两个子节点都是黑色的。</li>\n<li>任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。    </li>\n</ul>\n<h3 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6APZerAAAkJXd9qEE912.png\" alt=\"img\"></p>\n<p>B 树是一种多叉树，也叫多路搜索树，</p>\n<ul>\n<li>B 树中每个节点可以存储多个元素。</li>\n<li>关键字分布在整颗树中，一个关键字只出现在一个节点中。</li>\n<li>搜索可能在非叶节点停止。</li>\n<li>非常适合用在文件索引上，可以有效减少磁盘 IO 次数。</li>\n</ul>\n<p>B 树中所有结点的最大子节点数称为 B 树的阶，如上图所示是一棵 3 阶 B 树，也叫 2-3 树。</p>\n<p>一个 m 阶 B 树有如下特点：</p>\n<ol>\n<li>非叶节点最多有 m 棵子树。</li>\n<li>根节点最少有两个子树，非根、非叶节点最少有 m/2 棵子树。</li>\n<li>非叶子结点中保存的关键字个数，等于该节点子树个数−1。</li>\n<li>非叶子节点中的关键字大小有序。</li>\n<li>节点中每个关键字的左子树中的关键字都小于该关键字，右子树中的关键字都大于该关键字。</li>\n<li>所有叶节点都在同一层。</li>\n<li>B 树在查找时，从根结点开始，对结点内的有序的关键字序列进行二分查找，如果找到就结束，没有找到就进入查询关键字所属范围的子树进行查找，直到叶节点。</li>\n</ol>\n<h3 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AUR7GAAAe0Dk9-gg936.png\" alt=\"img\"></p>\n<ol>\n<li>节点中的关键字与子树数目相同。</li>\n<li>关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身。</li>\n<li>所有关键字都出现在叶子节点中。</li>\n<li>所有叶子节点都有指向下一个叶子节点的指针。</li>\n<li>在搜索时不会在非叶子节点命中，一定会查询到叶子节点。</li>\n<li>叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据。</li>\n</ol>\n<p>B+ 树更适合索引系统的原因</p>\n<ol>\n<li>由于叶节点之间有指针相连，B+ 树更适合范围检索；</li>\n<li>由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；</li>\n<li>B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。</li>\n</ol>\n<h3 id=\"B-树-1\"><a href=\"#B-树-1\" class=\"headerlink\" title=\"B*树\"></a>B*树</h3><h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h2 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h2><h2 id=\"常用算法思路\"><a href=\"#常用算法思路\" class=\"headerlink\" title=\"常用算法思路\"></a>常用算法思路</h2><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://www.kancloud.cn/alex_wsc/datastrcalg/1853997\" target=\"_blank\" rel=\"external\">重学数据结构及算法</a></li>\n<li><a href=\"https://www.kancloud.cn/alex_wsc/dataalg/1853982\" target=\"_blank\" rel=\"external\">300分钟搞定数据结构与算法</a></li>\n<li><a href=\"https://www.kancloud.cn/alex_wsc/datastructure/1852329\" target=\"_blank\" rel=\"external\">数据结构精讲：从原理到实战</a></li>\n<li>算法导论</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6AIEwmAAAW0UV9vPM694.png\" alt=\"img\"></p>\n<ul>\n<li>每个节点包含一个值。</li>\n<li>每个节点至多有两个子树。</li>\n<li>每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。</li>\n</ul>\n<p>二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。</p>\n<h3 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h3><p>平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，比较适合插入、删除比较少的场景。</p>\n<h3 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h3><p>红黑树是一种更加实用的非严格的平衡二叉树，更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。</p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AeAxdAAAmJsTBAww115.png\" alt=\"img\"></p>\n<ul>\n<li>每个节点不是红色就是黑色。</li>\n<li>根节点是黑色。</li>\n<li>每个叶子节点都是黑色的空节点，如图中的黑色三角。</li>\n<li>红色节点的两个子节点都是黑色的。</li>\n<li>任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。    </li>\n</ul>\n<h3 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E1/CgotOV14oT6APZerAAAkJXd9qEE912.png\" alt=\"img\"></p>\n<p>B 树是一种多叉树，也叫多路搜索树，</p>\n<ul>\n<li>B 树中每个节点可以存储多个元素。</li>\n<li>关键字分布在整颗树中，一个关键字只出现在一个节点中。</li>\n<li>搜索可能在非叶节点停止。</li>\n<li>非常适合用在文件索引上，可以有效减少磁盘 IO 次数。</li>\n</ul>\n<p>B 树中所有结点的最大子节点数称为 B 树的阶，如上图所示是一棵 3 阶 B 树，也叫 2-3 树。</p>\n<p>一个 m 阶 B 树有如下特点：</p>\n<ol>\n<li>非叶节点最多有 m 棵子树。</li>\n<li>根节点最少有两个子树，非根、非叶节点最少有 m/2 棵子树。</li>\n<li>非叶子结点中保存的关键字个数，等于该节点子树个数−1。</li>\n<li>非叶子节点中的关键字大小有序。</li>\n<li>节点中每个关键字的左子树中的关键字都小于该关键字，右子树中的关键字都大于该关键字。</li>\n<li>所有叶节点都在同一层。</li>\n<li>B 树在查找时，从根结点开始，对结点内的有序的关键字序列进行二分查找，如果找到就结束，没有找到就进入查询关键字所属范围的子树进行查找，直到叶节点。</li>\n</ol>\n<h3 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h3><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C2/CgoB5l14oT6AUR7GAAAe0Dk9-gg936.png\" alt=\"img\"></p>\n<ol>\n<li>节点中的关键字与子树数目相同。</li>\n<li>关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身。</li>\n<li>所有关键字都出现在叶子节点中。</li>\n<li>所有叶子节点都有指向下一个叶子节点的指针。</li>\n<li>在搜索时不会在非叶子节点命中，一定会查询到叶子节点。</li>\n<li>叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据。</li>\n</ol>\n<p>B+ 树更适合索引系统的原因</p>\n<ol>\n<li>由于叶节点之间有指针相连，B+ 树更适合范围检索；</li>\n<li>由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；</li>\n<li>B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。</li>\n</ol>\n<h3 id=\"B-树-1\"><a href=\"#B-树-1\" class=\"headerlink\" title=\"B*树\"></a>B*树</h3><h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h2 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h2><h2 id=\"常用算法思路\"><a href=\"#常用算法思路\" class=\"headerlink\" title=\"常用算法思路\"></a>常用算法思路</h2><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://www.kancloud.cn/alex_wsc/datastrcalg/1853997\" target=\"_blank\" rel=\"external\">重学数据结构及算法</a></li>\n<li><a href=\"https://www.kancloud.cn/alex_wsc/dataalg/1853982\" target=\"_blank\" rel=\"external\">300分钟搞定数据结构与算法</a></li>\n<li><a href=\"https://www.kancloud.cn/alex_wsc/datastructure/1852329\" target=\"_blank\" rel=\"external\">数据结构精讲：从原理到实战</a></li>\n<li>算法导论</li>\n</ul>\n"},{"title":"Spring","_content":"\n## Spring Framework\n\n### Context初始化流程\n\n~~~java\n// AbstractApplicationContext\npublic void refresh() throws BeansException, IllegalStateException {\n    synchronized (this.startupShutdownMonitor) {\n        // 刷新前的预处理，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符等。\n        prepareRefresh();\n        // 获取 beanFactory，即前面创建的【DefaultListableBeanFactory】\n        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n        // 预处理 beanFactory，向容器中添加一些组件\n        prepareBeanFactory(beanFactory);\n        try {\n            postProcessBeanFactory(beanFactory);\n            // PostProcessorRegistrationDelegate\n            invokeBeanFactoryPostProcessors(beanFactory);\n            // PostProcessorRegistrationDelegate\n            registerBeanPostProcessors(beanFactory);\n            // 初始化 MessageSource 组件（做国际化功能；消息绑定，消息解析）\n            initMessageSource();\n            // 初始化事件派发器，在注册监听器时会用到\n            initApplicationEventMulticaster();\n            // 留给子容器（子类），子类重写这个方法，在容器刷新的时候可以自定义逻辑，web 场景下会使用\n            onRefresh();\n            // 注册监听器，派发之前步骤产生的一些事件（可能没有）\n            registerListeners();\n            // 初始化所有的非单实例 bean\n            finishBeanFactoryInitialization(beanFactory);\n            // 发布容器刷新完成事件\n            finishRefresh();\n        }\n    }\n}\n~~~\n\n重要的类：\nBean BeanPostProcessors\nBeanFactory BeanFactoryPostProcessor\nBeanDefinitionRegistry BeanDefinitionRegistryPostProcessor\n\n### Bean生命周期\n\n```java\n// AbstractAutowireCapableBeanFactory\nprotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)\n    throws BeanCreationException {\n  // 1. 实例化\n  BeanWrapper instanceWrapper = null;\n  if (instanceWrapper == null) {\n      instanceWrapper = createBeanInstance(beanName, mbd, args);\n  }\n  Object exposedObject = bean;\n  try {\n      // 2. 属性赋值\n      populateBean(beanName, mbd, instanceWrapper);\n      // 3. 初始化\n      exposedObject = initializeBean(beanName, exposedObject, mbd);\n  }\n  // 4. 销毁-注册回调接口\n  try {\n      registerDisposableBeanIfNecessary(beanName, bean, mbd);\n  }\n  return exposedObject;\n}\n```\n创建 Bean 的时候默认是按照自然排序来进行创建的，其过程主要分为4 个阶段\n\n1. 实例化（Instantiation），调用构造方法创建一个对象。\n2. 属性注入（Populate），通过反射为这个对象填充属性。\n3. 初始化（Initialization），进行初始化，并实现 Spring AOP 代理。\n   1. 检查 Aware 的相关接口（BeanNameAware、BeanFactoryAware、ApplicationContextAware）并设置相关依赖。\n   2. BeanPostProcessor 前置处理。\n   3. 若实现了 InitializingBean 接口，执行 afterPropertiesSet 方法；\n   4. 执行自定义的 init 方法；\n   5. BeanPostProcessor 后置处理。\n   6. 注册 Destruction 相关回调接口。\n4. 销毁（Destruction），若实现 DisposableBean 接口，执行 destroy 方法，然后执行自定义的 destroy 方法。\n\n#### 循环依赖\n\n```java\n// 初始化后的 Bean\nprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);\n// 完成实例化后的，但是还未进行属性注入及初始化的对象\nprivate final Map<String, Object> earlySingletonObjects = new HashMap<String, Object>(16);\n// 提前暴露的一个单例工厂，二级缓存中存储的就是从这个工厂中获取到的对象\nprivate final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>(16);\n```\n\n```java\n// DefaultSingletonBeanRegistry.getSingleton\nprotected Object getSingleton(String beanName, boolean allowEarlyReference) {\n  // 首先从一级缓存 singletonObjects 中获取。\n  Object singletonObject = this.singletonObjects.get(beanName);\n  if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n    // 走到这说明出现循环依赖了\n    synchronized (this.singletonObjects) {\n      // 如果获取不到，并且对象正在创建中，就从二级缓存 earlySingletonObjects 中获取。\n      singletonObject = this.earlySingletonObjects.get(beanName);\n      if (singletonObject == null && allowEarlyReference) {\n        // 如果还是获取不到且允许通过 singletonFactories 获取，就从三级缓存 singletonFactory 获取\n        ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n        if (singletonFactory != null) {\n          singletonObject = singletonFactory.getObject();\n          this.earlySingletonObjects.put(beanName, singletonObject);\n          this.singletonFactories.remove(beanName);\n        }\n      }\n    }\n  }\n  return singletonObject;\n}\n```\n\n循环依赖解决的核心是通过 **提前曝光** 机制，使用 三级缓存 。\n\n二级缓存其实就可以解决循环依赖，但是为了完成 **Spring AOP 中的后置处理** Spring使用了三级缓存。\n\n参考文章：[Spring 循环依赖的“常见”面试问题](https://blog.csdn.net/BigBug_500/article/details/109050337)\n\n### AOP\n@Aspect：定义切面类\n@Pointcut：定义切面\n@Before、@AfterReturning：定义处理逻辑\n\n### 事务\n\n使用注解：@Transactional\n\n1. 注解只有作用到 public 方法上事务才生效，不推荐在接口上使用；\n2. 避免同一个类中调用注解的方法即自身调用，这样会导致事务失效；\n\n#### 传播类型\n\n- REQUIRED：如果当前存在事务，就加入该事务；**如果当前不存在事务，就创建一个新事务**。默认类型。\n- SUPPORTS：如果当前存在事务，就加入该事务；**如果当前不存在事务，就以非事务执行**。\n- MANDATORY：如果当前存在事务，就加入该事务；**如果当前不存在事务，就抛出异常**。\n- REQUIRES_NEW：无论当前存不存在事务，都**创建一个新事务**。\n- NOT_SUPPORTED：以非事务执行，**如果当前存在事务，就把当前事务挂起**。\n- NEVER：以非事务执行，**如果当前存在事务，则抛出异常**。\n- NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 REQUIRED 类似的操作。\n\n## Spring Boot\n\n目标是简化 Spring 应用和服务的创建、开发与部署。\n\n- 简化了配置文件。\n- 使用嵌入式 Web 服务器。\n- 含有诸多开箱即用的微服务功能，\n- 可以和 Spring Cloud 联合部署。\n\nSpring Boot 的核心思想是约定大于配置，应用只需要很少的配置即可，简化了应用开发模式。\n\n### 自动装配\n\nSpring Boot 通过`@EnableAutoConfiguration`开启自动装配，通过 SpringFactoriesLoader 最终加载`META-INF/spring.factories`中的自动配置类实现自动装配，自动配置类其实就是通过`@Conditional`按需加载的配置类，想要其生效必须引入`spring-boot-starter-xxx`包实现起步依赖。\n\n@Conditional：Bean 或 Class 存在、不存在时进行配置，当存在某个属性时进行配置\n\n参考文章：[[淘宝一面：“说一下 Spring Boot 自动装配原理呗？”](https://www.cnblogs.com/javaguide/p/springboot-auto-config.html)](https://www.cnblogs.com/javaguide/p/springboot-auto-config.html)\n\n### 启动流程\n~~~java\npublic ConfigurableApplicationContext run(String... args) {\n    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConfigurableApplicationContext context = null;\n    Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n    configureHeadlessProperty();\n    SpringApplicationRunListeners listeners = getRunListeners(args);\n    listeners.starting();\n    try {\n        ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n                args);\n        ConfigurableEnvironment environment = prepareEnvironment(listeners,\n                applicationArguments);\n        configureIgnoreBeanInfo(environment);\n        Banner printedBanner = printBanner(environment);\n        context = createApplicationContext();\n        exceptionReporters = getSpringFactoriesInstances(\n                SpringBootExceptionReporter.class,\n                new Class[] { ConfigurableApplicationContext.class }, context);\n        prepareContext(context, environment, listeners, applicationArguments,\n                printedBanner);\n        refreshContext(context);\n        afterRefresh(context, applicationArguments);\n        stopWatch.stop();\n    }\n    return context;\n}\n~~~\n1. 配置Environment。\n2. 准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。\n3. 执行 refreshContext。\n\n## Spring Data\n\n## Spring Security","source":"_posts/20180727.md","raw":"---\ntitle: Spring\ncategory: 应用模块\ntag: 框架\n---\n\n## Spring Framework\n\n### Context初始化流程\n\n~~~java\n// AbstractApplicationContext\npublic void refresh() throws BeansException, IllegalStateException {\n    synchronized (this.startupShutdownMonitor) {\n        // 刷新前的预处理，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符等。\n        prepareRefresh();\n        // 获取 beanFactory，即前面创建的【DefaultListableBeanFactory】\n        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n        // 预处理 beanFactory，向容器中添加一些组件\n        prepareBeanFactory(beanFactory);\n        try {\n            postProcessBeanFactory(beanFactory);\n            // PostProcessorRegistrationDelegate\n            invokeBeanFactoryPostProcessors(beanFactory);\n            // PostProcessorRegistrationDelegate\n            registerBeanPostProcessors(beanFactory);\n            // 初始化 MessageSource 组件（做国际化功能；消息绑定，消息解析）\n            initMessageSource();\n            // 初始化事件派发器，在注册监听器时会用到\n            initApplicationEventMulticaster();\n            // 留给子容器（子类），子类重写这个方法，在容器刷新的时候可以自定义逻辑，web 场景下会使用\n            onRefresh();\n            // 注册监听器，派发之前步骤产生的一些事件（可能没有）\n            registerListeners();\n            // 初始化所有的非单实例 bean\n            finishBeanFactoryInitialization(beanFactory);\n            // 发布容器刷新完成事件\n            finishRefresh();\n        }\n    }\n}\n~~~\n\n重要的类：\nBean BeanPostProcessors\nBeanFactory BeanFactoryPostProcessor\nBeanDefinitionRegistry BeanDefinitionRegistryPostProcessor\n\n### Bean生命周期\n\n```java\n// AbstractAutowireCapableBeanFactory\nprotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)\n    throws BeanCreationException {\n  // 1. 实例化\n  BeanWrapper instanceWrapper = null;\n  if (instanceWrapper == null) {\n      instanceWrapper = createBeanInstance(beanName, mbd, args);\n  }\n  Object exposedObject = bean;\n  try {\n      // 2. 属性赋值\n      populateBean(beanName, mbd, instanceWrapper);\n      // 3. 初始化\n      exposedObject = initializeBean(beanName, exposedObject, mbd);\n  }\n  // 4. 销毁-注册回调接口\n  try {\n      registerDisposableBeanIfNecessary(beanName, bean, mbd);\n  }\n  return exposedObject;\n}\n```\n创建 Bean 的时候默认是按照自然排序来进行创建的，其过程主要分为4 个阶段\n\n1. 实例化（Instantiation），调用构造方法创建一个对象。\n2. 属性注入（Populate），通过反射为这个对象填充属性。\n3. 初始化（Initialization），进行初始化，并实现 Spring AOP 代理。\n   1. 检查 Aware 的相关接口（BeanNameAware、BeanFactoryAware、ApplicationContextAware）并设置相关依赖。\n   2. BeanPostProcessor 前置处理。\n   3. 若实现了 InitializingBean 接口，执行 afterPropertiesSet 方法；\n   4. 执行自定义的 init 方法；\n   5. BeanPostProcessor 后置处理。\n   6. 注册 Destruction 相关回调接口。\n4. 销毁（Destruction），若实现 DisposableBean 接口，执行 destroy 方法，然后执行自定义的 destroy 方法。\n\n#### 循环依赖\n\n```java\n// 初始化后的 Bean\nprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);\n// 完成实例化后的，但是还未进行属性注入及初始化的对象\nprivate final Map<String, Object> earlySingletonObjects = new HashMap<String, Object>(16);\n// 提前暴露的一个单例工厂，二级缓存中存储的就是从这个工厂中获取到的对象\nprivate final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>(16);\n```\n\n```java\n// DefaultSingletonBeanRegistry.getSingleton\nprotected Object getSingleton(String beanName, boolean allowEarlyReference) {\n  // 首先从一级缓存 singletonObjects 中获取。\n  Object singletonObject = this.singletonObjects.get(beanName);\n  if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n    // 走到这说明出现循环依赖了\n    synchronized (this.singletonObjects) {\n      // 如果获取不到，并且对象正在创建中，就从二级缓存 earlySingletonObjects 中获取。\n      singletonObject = this.earlySingletonObjects.get(beanName);\n      if (singletonObject == null && allowEarlyReference) {\n        // 如果还是获取不到且允许通过 singletonFactories 获取，就从三级缓存 singletonFactory 获取\n        ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n        if (singletonFactory != null) {\n          singletonObject = singletonFactory.getObject();\n          this.earlySingletonObjects.put(beanName, singletonObject);\n          this.singletonFactories.remove(beanName);\n        }\n      }\n    }\n  }\n  return singletonObject;\n}\n```\n\n循环依赖解决的核心是通过 **提前曝光** 机制，使用 三级缓存 。\n\n二级缓存其实就可以解决循环依赖，但是为了完成 **Spring AOP 中的后置处理** Spring使用了三级缓存。\n\n参考文章：[Spring 循环依赖的“常见”面试问题](https://blog.csdn.net/BigBug_500/article/details/109050337)\n\n### AOP\n@Aspect：定义切面类\n@Pointcut：定义切面\n@Before、@AfterReturning：定义处理逻辑\n\n### 事务\n\n使用注解：@Transactional\n\n1. 注解只有作用到 public 方法上事务才生效，不推荐在接口上使用；\n2. 避免同一个类中调用注解的方法即自身调用，这样会导致事务失效；\n\n#### 传播类型\n\n- REQUIRED：如果当前存在事务，就加入该事务；**如果当前不存在事务，就创建一个新事务**。默认类型。\n- SUPPORTS：如果当前存在事务，就加入该事务；**如果当前不存在事务，就以非事务执行**。\n- MANDATORY：如果当前存在事务，就加入该事务；**如果当前不存在事务，就抛出异常**。\n- REQUIRES_NEW：无论当前存不存在事务，都**创建一个新事务**。\n- NOT_SUPPORTED：以非事务执行，**如果当前存在事务，就把当前事务挂起**。\n- NEVER：以非事务执行，**如果当前存在事务，则抛出异常**。\n- NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 REQUIRED 类似的操作。\n\n## Spring Boot\n\n目标是简化 Spring 应用和服务的创建、开发与部署。\n\n- 简化了配置文件。\n- 使用嵌入式 Web 服务器。\n- 含有诸多开箱即用的微服务功能，\n- 可以和 Spring Cloud 联合部署。\n\nSpring Boot 的核心思想是约定大于配置，应用只需要很少的配置即可，简化了应用开发模式。\n\n### 自动装配\n\nSpring Boot 通过`@EnableAutoConfiguration`开启自动装配，通过 SpringFactoriesLoader 最终加载`META-INF/spring.factories`中的自动配置类实现自动装配，自动配置类其实就是通过`@Conditional`按需加载的配置类，想要其生效必须引入`spring-boot-starter-xxx`包实现起步依赖。\n\n@Conditional：Bean 或 Class 存在、不存在时进行配置，当存在某个属性时进行配置\n\n参考文章：[[淘宝一面：“说一下 Spring Boot 自动装配原理呗？”](https://www.cnblogs.com/javaguide/p/springboot-auto-config.html)](https://www.cnblogs.com/javaguide/p/springboot-auto-config.html)\n\n### 启动流程\n~~~java\npublic ConfigurableApplicationContext run(String... args) {\n    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConfigurableApplicationContext context = null;\n    Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n    configureHeadlessProperty();\n    SpringApplicationRunListeners listeners = getRunListeners(args);\n    listeners.starting();\n    try {\n        ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n                args);\n        ConfigurableEnvironment environment = prepareEnvironment(listeners,\n                applicationArguments);\n        configureIgnoreBeanInfo(environment);\n        Banner printedBanner = printBanner(environment);\n        context = createApplicationContext();\n        exceptionReporters = getSpringFactoriesInstances(\n                SpringBootExceptionReporter.class,\n                new Class[] { ConfigurableApplicationContext.class }, context);\n        prepareContext(context, environment, listeners, applicationArguments,\n                printedBanner);\n        refreshContext(context);\n        afterRefresh(context, applicationArguments);\n        stopWatch.stop();\n    }\n    return context;\n}\n~~~\n1. 配置Environment。\n2. 准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。\n3. 执行 refreshContext。\n\n## Spring Data\n\n## Spring Security","slug":"20180727","published":1,"date":"2023-01-03T01:29:04.006Z","updated":"2023-01-03T01:29:04.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0q000dcwyumywg7dpj","content":"<h2 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h2><h3 id=\"Context初始化流程\"><a href=\"#Context初始化流程\" class=\"headerlink\" title=\"Context初始化流程\"></a>Context初始化流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// AbstractApplicationContext</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</div><div class=\"line\">        <span class=\"comment\">// 刷新前的预处理，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符等。</span></div><div class=\"line\">        prepareRefresh();</div><div class=\"line\">        <span class=\"comment\">// 获取 beanFactory，即前面创建的【DefaultListableBeanFactory】</span></div><div class=\"line\">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class=\"line\">        <span class=\"comment\">// 预处理 beanFactory，向容器中添加一些组件</span></div><div class=\"line\">        prepareBeanFactory(beanFactory);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            postProcessBeanFactory(beanFactory);</div><div class=\"line\">            <span class=\"comment\">// PostProcessorRegistrationDelegate</span></div><div class=\"line\">            invokeBeanFactoryPostProcessors(beanFactory);</div><div class=\"line\">            <span class=\"comment\">// PostProcessorRegistrationDelegate</span></div><div class=\"line\">            registerBeanPostProcessors(beanFactory);</div><div class=\"line\">            <span class=\"comment\">// 初始化 MessageSource 组件（做国际化功能；消息绑定，消息解析）</span></div><div class=\"line\">            initMessageSource();</div><div class=\"line\">            <span class=\"comment\">// 初始化事件派发器，在注册监听器时会用到</span></div><div class=\"line\">            initApplicationEventMulticaster();</div><div class=\"line\">            <span class=\"comment\">// 留给子容器（子类），子类重写这个方法，在容器刷新的时候可以自定义逻辑，web 场景下会使用</span></div><div class=\"line\">            onRefresh();</div><div class=\"line\">            <span class=\"comment\">// 注册监听器，派发之前步骤产生的一些事件（可能没有）</span></div><div class=\"line\">            registerListeners();</div><div class=\"line\">            <span class=\"comment\">// 初始化所有的非单实例 bean</span></div><div class=\"line\">            finishBeanFactoryInitialization(beanFactory);</div><div class=\"line\">            <span class=\"comment\">// 发布容器刷新完成事件</span></div><div class=\"line\">            finishRefresh();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重要的类：<br>Bean BeanPostProcessors<br>BeanFactory BeanFactoryPostProcessor<br>BeanDefinitionRegistry BeanDefinitionRegistryPostProcessor</p>\n<h3 id=\"Bean生命周期\"><a href=\"#Bean生命周期\" class=\"headerlink\" title=\"Bean生命周期\"></a>Bean生命周期</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// AbstractAutowireCapableBeanFactory</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> RootBeanDefinition mbd, <span class=\"keyword\">final</span> @Nullable Object[] args)</span></span></div><div class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> BeanCreationException </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 1. 实例化</span></div><div class=\"line\">  BeanWrapper instanceWrapper = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (instanceWrapper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      instanceWrapper = createBeanInstance(beanName, mbd, args);</div><div class=\"line\">  &#125;</div><div class=\"line\">  Object exposedObject = bean;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 2. 属性赋值</span></div><div class=\"line\">      populateBean(beanName, mbd, instanceWrapper);</div><div class=\"line\">      <span class=\"comment\">// 3. 初始化</span></div><div class=\"line\">      exposedObject = initializeBean(beanName, exposedObject, mbd);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 4. 销毁-注册回调接口</span></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      registerDisposableBeanIfNecessary(beanName, bean, mbd);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> exposedObject;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建 Bean 的时候默认是按照自然排序来进行创建的，其过程主要分为4 个阶段</p>\n<ol>\n<li>实例化（Instantiation），调用构造方法创建一个对象。</li>\n<li>属性注入（Populate），通过反射为这个对象填充属性。</li>\n<li>初始化（Initialization），进行初始化，并实现 Spring AOP 代理。<ol>\n<li>检查 Aware 的相关接口（BeanNameAware、BeanFactoryAware、ApplicationContextAware）并设置相关依赖。</li>\n<li>BeanPostProcessor 前置处理。</li>\n<li>若实现了 InitializingBean 接口，执行 afterPropertiesSet 方法；</li>\n<li>执行自定义的 init 方法；</li>\n<li>BeanPostProcessor 后置处理。</li>\n<li>注册 Destruction 相关回调接口。</li>\n</ol>\n</li>\n<li>销毁（Destruction），若实现 DisposableBean 接口，执行 destroy 方法，然后执行自定义的 destroy 方法。</li>\n</ol>\n<h4 id=\"循环依赖\"><a href=\"#循环依赖\" class=\"headerlink\" title=\"循环依赖\"></a>循环依赖</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 初始化后的 Bean</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; singletonObjects = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, Object&gt;(<span class=\"number\">256</span>);</div><div class=\"line\"><span class=\"comment\">// 完成实例化后的，但是还未进行属性注入及初始化的对象</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\"><span class=\"comment\">// 提前暴露的一个单例工厂，二级缓存中存储的就是从这个工厂中获取到的对象</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class=\"keyword\">new</span> HashMap&lt;String, ObjectFactory&lt;?&gt;&gt;(<span class=\"number\">16</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// DefaultSingletonBeanRegistry.getSingleton</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">getSingleton</span><span class=\"params\">(String beanName, <span class=\"keyword\">boolean</span> allowEarlyReference)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 首先从一级缓存 singletonObjects 中获取。</span></div><div class=\"line\">  Object singletonObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</div><div class=\"line\">  <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 走到这说明出现循环依赖了</span></div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果获取不到，并且对象正在创建中，就从二级缓存 earlySingletonObjects 中获取。</span></div><div class=\"line\">      singletonObject = <span class=\"keyword\">this</span>.earlySingletonObjects.get(beanName);</div><div class=\"line\">      <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; allowEarlyReference) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果还是获取不到且允许通过 singletonFactories 获取，就从三级缓存 singletonFactory 获取</span></div><div class=\"line\">        ObjectFactory&lt;?&gt; singletonFactory = <span class=\"keyword\">this</span>.singletonFactories.get(beanName);</div><div class=\"line\">        <span class=\"keyword\">if</span> (singletonFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          singletonObject = singletonFactory.getObject();</div><div class=\"line\">          <span class=\"keyword\">this</span>.earlySingletonObjects.put(beanName, singletonObject);</div><div class=\"line\">          <span class=\"keyword\">this</span>.singletonFactories.remove(beanName);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> singletonObject;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>循环依赖解决的核心是通过 <strong>提前曝光</strong> 机制，使用 三级缓存 。</p>\n<p>二级缓存其实就可以解决循环依赖，但是为了完成 <strong>Spring AOP 中的后置处理</strong> Spring使用了三级缓存。</p>\n<p>参考文章：<a href=\"https://blog.csdn.net/BigBug_500/article/details/109050337\" target=\"_blank\" rel=\"external\">Spring 循环依赖的“常见”面试问题</a></p>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><p>@Aspect：定义切面类<br>@Pointcut：定义切面<br>@Before、@AfterReturning：定义处理逻辑</p>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>使用注解：@Transactional</p>\n<ol>\n<li>注解只有作用到 public 方法上事务才生效，不推荐在接口上使用；</li>\n<li>避免同一个类中调用注解的方法即自身调用，这样会导致事务失效；</li>\n</ol>\n<h4 id=\"传播类型\"><a href=\"#传播类型\" class=\"headerlink\" title=\"传播类型\"></a>传播类型</h4><ul>\n<li>REQUIRED：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就创建一个新事务</strong>。默认类型。</li>\n<li>SUPPORTS：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就以非事务执行</strong>。</li>\n<li>MANDATORY：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就抛出异常</strong>。</li>\n<li>REQUIRES_NEW：无论当前存不存在事务，都<strong>创建一个新事务</strong>。</li>\n<li>NOT_SUPPORTED：以非事务执行，<strong>如果当前存在事务，就把当前事务挂起</strong>。</li>\n<li>NEVER：以非事务执行，<strong>如果当前存在事务，则抛出异常</strong>。</li>\n<li>NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 REQUIRED 类似的操作。</li>\n</ul>\n<h2 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h2><p>目标是简化 Spring 应用和服务的创建、开发与部署。</p>\n<ul>\n<li>简化了配置文件。</li>\n<li>使用嵌入式 Web 服务器。</li>\n<li>含有诸多开箱即用的微服务功能，</li>\n<li>可以和 Spring Cloud 联合部署。</li>\n</ul>\n<p>Spring Boot 的核心思想是约定大于配置，应用只需要很少的配置即可，简化了应用开发模式。</p>\n<h3 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h3><p>Spring Boot 通过<code>@EnableAutoConfiguration</code>开启自动装配，通过 SpringFactoriesLoader 最终加载<code>META-INF/spring.factories</code>中的自动配置类实现自动装配，自动配置类其实就是通过<code>@Conditional</code>按需加载的配置类，想要其生效必须引入<code>spring-boot-starter-xxx</code>包实现起步依赖。</p>\n<p>@Conditional：Bean 或 Class 存在、不存在时进行配置，当存在某个属性时进行配置</p>\n<p>参考文章：<a href=\"https://www.cnblogs.com/javaguide/p/springboot-auto-config.html\" target=\"_blank\" rel=\"external\"><a href=\"https://www.cnblogs.com/javaguide/p/springboot-auto-config.html\" target=\"_blank\" rel=\"external\">淘宝一面：“说一下 Spring Boot 自动装配原理呗？”</a></a></p>\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">    StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</div><div class=\"line\">    stopWatch.start();</div><div class=\"line\">    ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    configureHeadlessProperty();</div><div class=\"line\">    SpringApplicationRunListeners listeners = getRunListeners(args);</div><div class=\"line\">    listeners.starting();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</div><div class=\"line\">                args);</div><div class=\"line\">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</div><div class=\"line\">                applicationArguments);</div><div class=\"line\">        configureIgnoreBeanInfo(environment);</div><div class=\"line\">        Banner printedBanner = printBanner(environment);</div><div class=\"line\">        context = createApplicationContext();</div><div class=\"line\">        exceptionReporters = getSpringFactoriesInstances(</div><div class=\"line\">                SpringBootExceptionReporter.class,</div><div class=\"line\">                <span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</div><div class=\"line\">        prepareContext(context, environment, listeners, applicationArguments,</div><div class=\"line\">                printedBanner);</div><div class=\"line\">        refreshContext(context);</div><div class=\"line\">        afterRefresh(context, applicationArguments);</div><div class=\"line\">        stopWatch.stop();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> context;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>配置Environment。</li>\n<li>准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。</li>\n<li>执行 refreshContext。</li>\n</ol>\n<h2 id=\"Spring-Data\"><a href=\"#Spring-Data\" class=\"headerlink\" title=\"Spring Data\"></a>Spring Data</h2><h2 id=\"Spring-Security\"><a href=\"#Spring-Security\" class=\"headerlink\" title=\"Spring Security\"></a>Spring Security</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h2><h3 id=\"Context初始化流程\"><a href=\"#Context初始化流程\" class=\"headerlink\" title=\"Context初始化流程\"></a>Context初始化流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// AbstractApplicationContext</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</div><div class=\"line\">        <span class=\"comment\">// 刷新前的预处理，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符等。</span></div><div class=\"line\">        prepareRefresh();</div><div class=\"line\">        <span class=\"comment\">// 获取 beanFactory，即前面创建的【DefaultListableBeanFactory】</span></div><div class=\"line\">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class=\"line\">        <span class=\"comment\">// 预处理 beanFactory，向容器中添加一些组件</span></div><div class=\"line\">        prepareBeanFactory(beanFactory);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            postProcessBeanFactory(beanFactory);</div><div class=\"line\">            <span class=\"comment\">// PostProcessorRegistrationDelegate</span></div><div class=\"line\">            invokeBeanFactoryPostProcessors(beanFactory);</div><div class=\"line\">            <span class=\"comment\">// PostProcessorRegistrationDelegate</span></div><div class=\"line\">            registerBeanPostProcessors(beanFactory);</div><div class=\"line\">            <span class=\"comment\">// 初始化 MessageSource 组件（做国际化功能；消息绑定，消息解析）</span></div><div class=\"line\">            initMessageSource();</div><div class=\"line\">            <span class=\"comment\">// 初始化事件派发器，在注册监听器时会用到</span></div><div class=\"line\">            initApplicationEventMulticaster();</div><div class=\"line\">            <span class=\"comment\">// 留给子容器（子类），子类重写这个方法，在容器刷新的时候可以自定义逻辑，web 场景下会使用</span></div><div class=\"line\">            onRefresh();</div><div class=\"line\">            <span class=\"comment\">// 注册监听器，派发之前步骤产生的一些事件（可能没有）</span></div><div class=\"line\">            registerListeners();</div><div class=\"line\">            <span class=\"comment\">// 初始化所有的非单实例 bean</span></div><div class=\"line\">            finishBeanFactoryInitialization(beanFactory);</div><div class=\"line\">            <span class=\"comment\">// 发布容器刷新完成事件</span></div><div class=\"line\">            finishRefresh();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重要的类：<br>Bean BeanPostProcessors<br>BeanFactory BeanFactoryPostProcessor<br>BeanDefinitionRegistry BeanDefinitionRegistryPostProcessor</p>\n<h3 id=\"Bean生命周期\"><a href=\"#Bean生命周期\" class=\"headerlink\" title=\"Bean生命周期\"></a>Bean生命周期</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// AbstractAutowireCapableBeanFactory</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> RootBeanDefinition mbd, <span class=\"keyword\">final</span> @Nullable Object[] args)</span></span></div><div class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> BeanCreationException </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 1. 实例化</span></div><div class=\"line\">  BeanWrapper instanceWrapper = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (instanceWrapper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      instanceWrapper = createBeanInstance(beanName, mbd, args);</div><div class=\"line\">  &#125;</div><div class=\"line\">  Object exposedObject = bean;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 2. 属性赋值</span></div><div class=\"line\">      populateBean(beanName, mbd, instanceWrapper);</div><div class=\"line\">      <span class=\"comment\">// 3. 初始化</span></div><div class=\"line\">      exposedObject = initializeBean(beanName, exposedObject, mbd);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 4. 销毁-注册回调接口</span></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      registerDisposableBeanIfNecessary(beanName, bean, mbd);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> exposedObject;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建 Bean 的时候默认是按照自然排序来进行创建的，其过程主要分为4 个阶段</p>\n<ol>\n<li>实例化（Instantiation），调用构造方法创建一个对象。</li>\n<li>属性注入（Populate），通过反射为这个对象填充属性。</li>\n<li>初始化（Initialization），进行初始化，并实现 Spring AOP 代理。<ol>\n<li>检查 Aware 的相关接口（BeanNameAware、BeanFactoryAware、ApplicationContextAware）并设置相关依赖。</li>\n<li>BeanPostProcessor 前置处理。</li>\n<li>若实现了 InitializingBean 接口，执行 afterPropertiesSet 方法；</li>\n<li>执行自定义的 init 方法；</li>\n<li>BeanPostProcessor 后置处理。</li>\n<li>注册 Destruction 相关回调接口。</li>\n</ol>\n</li>\n<li>销毁（Destruction），若实现 DisposableBean 接口，执行 destroy 方法，然后执行自定义的 destroy 方法。</li>\n</ol>\n<h4 id=\"循环依赖\"><a href=\"#循环依赖\" class=\"headerlink\" title=\"循环依赖\"></a>循环依赖</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 初始化后的 Bean</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; singletonObjects = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, Object&gt;(<span class=\"number\">256</span>);</div><div class=\"line\"><span class=\"comment\">// 完成实例化后的，但是还未进行属性注入及初始化的对象</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\"><span class=\"comment\">// 提前暴露的一个单例工厂，二级缓存中存储的就是从这个工厂中获取到的对象</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class=\"keyword\">new</span> HashMap&lt;String, ObjectFactory&lt;?&gt;&gt;(<span class=\"number\">16</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// DefaultSingletonBeanRegistry.getSingleton</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">getSingleton</span><span class=\"params\">(String beanName, <span class=\"keyword\">boolean</span> allowEarlyReference)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 首先从一级缓存 singletonObjects 中获取。</span></div><div class=\"line\">  Object singletonObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</div><div class=\"line\">  <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 走到这说明出现循环依赖了</span></div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果获取不到，并且对象正在创建中，就从二级缓存 earlySingletonObjects 中获取。</span></div><div class=\"line\">      singletonObject = <span class=\"keyword\">this</span>.earlySingletonObjects.get(beanName);</div><div class=\"line\">      <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; allowEarlyReference) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果还是获取不到且允许通过 singletonFactories 获取，就从三级缓存 singletonFactory 获取</span></div><div class=\"line\">        ObjectFactory&lt;?&gt; singletonFactory = <span class=\"keyword\">this</span>.singletonFactories.get(beanName);</div><div class=\"line\">        <span class=\"keyword\">if</span> (singletonFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          singletonObject = singletonFactory.getObject();</div><div class=\"line\">          <span class=\"keyword\">this</span>.earlySingletonObjects.put(beanName, singletonObject);</div><div class=\"line\">          <span class=\"keyword\">this</span>.singletonFactories.remove(beanName);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> singletonObject;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>循环依赖解决的核心是通过 <strong>提前曝光</strong> 机制，使用 三级缓存 。</p>\n<p>二级缓存其实就可以解决循环依赖，但是为了完成 <strong>Spring AOP 中的后置处理</strong> Spring使用了三级缓存。</p>\n<p>参考文章：<a href=\"https://blog.csdn.net/BigBug_500/article/details/109050337\" target=\"_blank\" rel=\"external\">Spring 循环依赖的“常见”面试问题</a></p>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><p>@Aspect：定义切面类<br>@Pointcut：定义切面<br>@Before、@AfterReturning：定义处理逻辑</p>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>使用注解：@Transactional</p>\n<ol>\n<li>注解只有作用到 public 方法上事务才生效，不推荐在接口上使用；</li>\n<li>避免同一个类中调用注解的方法即自身调用，这样会导致事务失效；</li>\n</ol>\n<h4 id=\"传播类型\"><a href=\"#传播类型\" class=\"headerlink\" title=\"传播类型\"></a>传播类型</h4><ul>\n<li>REQUIRED：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就创建一个新事务</strong>。默认类型。</li>\n<li>SUPPORTS：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就以非事务执行</strong>。</li>\n<li>MANDATORY：如果当前存在事务，就加入该事务；<strong>如果当前不存在事务，就抛出异常</strong>。</li>\n<li>REQUIRES_NEW：无论当前存不存在事务，都<strong>创建一个新事务</strong>。</li>\n<li>NOT_SUPPORTED：以非事务执行，<strong>如果当前存在事务，就把当前事务挂起</strong>。</li>\n<li>NEVER：以非事务执行，<strong>如果当前存在事务，则抛出异常</strong>。</li>\n<li>NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 REQUIRED 类似的操作。</li>\n</ul>\n<h2 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h2><p>目标是简化 Spring 应用和服务的创建、开发与部署。</p>\n<ul>\n<li>简化了配置文件。</li>\n<li>使用嵌入式 Web 服务器。</li>\n<li>含有诸多开箱即用的微服务功能，</li>\n<li>可以和 Spring Cloud 联合部署。</li>\n</ul>\n<p>Spring Boot 的核心思想是约定大于配置，应用只需要很少的配置即可，简化了应用开发模式。</p>\n<h3 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h3><p>Spring Boot 通过<code>@EnableAutoConfiguration</code>开启自动装配，通过 SpringFactoriesLoader 最终加载<code>META-INF/spring.factories</code>中的自动配置类实现自动装配，自动配置类其实就是通过<code>@Conditional</code>按需加载的配置类，想要其生效必须引入<code>spring-boot-starter-xxx</code>包实现起步依赖。</p>\n<p>@Conditional：Bean 或 Class 存在、不存在时进行配置，当存在某个属性时进行配置</p>\n<p>参考文章：<a href=\"https://www.cnblogs.com/javaguide/p/springboot-auto-config.html\" target=\"_blank\" rel=\"external\"><a href=\"https://www.cnblogs.com/javaguide/p/springboot-auto-config.html\" target=\"_blank\" rel=\"external\">淘宝一面：“说一下 Spring Boot 自动装配原理呗？”</a></a></p>\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">    StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</div><div class=\"line\">    stopWatch.start();</div><div class=\"line\">    ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    configureHeadlessProperty();</div><div class=\"line\">    SpringApplicationRunListeners listeners = getRunListeners(args);</div><div class=\"line\">    listeners.starting();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</div><div class=\"line\">                args);</div><div class=\"line\">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</div><div class=\"line\">                applicationArguments);</div><div class=\"line\">        configureIgnoreBeanInfo(environment);</div><div class=\"line\">        Banner printedBanner = printBanner(environment);</div><div class=\"line\">        context = createApplicationContext();</div><div class=\"line\">        exceptionReporters = getSpringFactoriesInstances(</div><div class=\"line\">                SpringBootExceptionReporter.class,</div><div class=\"line\">                <span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</div><div class=\"line\">        prepareContext(context, environment, listeners, applicationArguments,</div><div class=\"line\">                printedBanner);</div><div class=\"line\">        refreshContext(context);</div><div class=\"line\">        afterRefresh(context, applicationArguments);</div><div class=\"line\">        stopWatch.stop();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> context;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>配置Environment。</li>\n<li>准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。</li>\n<li>执行 refreshContext。</li>\n</ol>\n<h2 id=\"Spring-Data\"><a href=\"#Spring-Data\" class=\"headerlink\" title=\"Spring Data\"></a>Spring Data</h2><h2 id=\"Spring-Security\"><a href=\"#Spring-Security\" class=\"headerlink\" title=\"Spring Security\"></a>Spring Security</h2>"},{"title":"MyBatis","_content":"\nMyBatis 的优点：\n\n1. MyBatis 是原生SQL，不像 Hibernate 的 HQL 需要额外的学习成本。\n2. MyBatis 的 SQL 语句与代码进行了解耦合。\n3. MyBatis 功能简单，学习成本比较低，使用的门槛也非常低，可以快速上手。\n4. MyBatis SQL调优比较灵活，而 Hibernate，SQL 语句是自动生成的，当有复杂语句需要进行优化时就比较难处理。 \n\nMyBatis 的缺点：\n\n1. 相比 Hibernate 这样的全自动 ORM 框架，不能自动生成 SQL 语句，编写 SQL 的工作量比较大，尤其是字段多、关联表多的情况下；\n2. SQL 语句依赖于具体数据库，导致数据库迁移性差，而 Hibernate 则拥有良好的数据库可移植性。\n\n官方文档：[MyBatis3](https://mybatis.org/mybatis-3/zh/index.html)\n\n<!-- more -->\n\n## 处理流程\n\n![MyBatis处理流程](/img/posts/MyBatis.png)\n\n1. 在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。\n2. SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。\n3. StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。\n4. 最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。\n\n\n\n## 缓存\n\n\n\n\n\n## 经验\n\n","source":"_posts/20180802.md","raw":"---\ntitle: MyBatis\ncategory: 应用模块\ntag: 框架\n---\n\nMyBatis 的优点：\n\n1. MyBatis 是原生SQL，不像 Hibernate 的 HQL 需要额外的学习成本。\n2. MyBatis 的 SQL 语句与代码进行了解耦合。\n3. MyBatis 功能简单，学习成本比较低，使用的门槛也非常低，可以快速上手。\n4. MyBatis SQL调优比较灵活，而 Hibernate，SQL 语句是自动生成的，当有复杂语句需要进行优化时就比较难处理。 \n\nMyBatis 的缺点：\n\n1. 相比 Hibernate 这样的全自动 ORM 框架，不能自动生成 SQL 语句，编写 SQL 的工作量比较大，尤其是字段多、关联表多的情况下；\n2. SQL 语句依赖于具体数据库，导致数据库迁移性差，而 Hibernate 则拥有良好的数据库可移植性。\n\n官方文档：[MyBatis3](https://mybatis.org/mybatis-3/zh/index.html)\n\n<!-- more -->\n\n## 处理流程\n\n![MyBatis处理流程](/img/posts/MyBatis.png)\n\n1. 在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。\n2. SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。\n3. StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。\n4. 最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。\n\n\n\n## 缓存\n\n\n\n\n\n## 经验\n\n","slug":"20180802","published":1,"date":"2023-01-03T01:29:04.006Z","updated":"2023-01-03T01:29:04.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0r000gcwyuyneab1hh","content":"<p>MyBatis 的优点：</p>\n<ol>\n<li>MyBatis 是原生SQL，不像 Hibernate 的 HQL 需要额外的学习成本。</li>\n<li>MyBatis 的 SQL 语句与代码进行了解耦合。</li>\n<li>MyBatis 功能简单，学习成本比较低，使用的门槛也非常低，可以快速上手。</li>\n<li>MyBatis SQL调优比较灵活，而 Hibernate，SQL 语句是自动生成的，当有复杂语句需要进行优化时就比较难处理。 </li>\n</ol>\n<p>MyBatis 的缺点：</p>\n<ol>\n<li>相比 Hibernate 这样的全自动 ORM 框架，不能自动生成 SQL 语句，编写 SQL 的工作量比较大，尤其是字段多、关联表多的情况下；</li>\n<li>SQL 语句依赖于具体数据库，导致数据库迁移性差，而 Hibernate 则拥有良好的数据库可移植性。</li>\n</ol>\n<p>官方文档：<a href=\"https://mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"external\">MyBatis3</a></p>\n<a id=\"more\"></a>\n<h2 id=\"处理流程\"><a href=\"#处理流程\" class=\"headerlink\" title=\"处理流程\"></a>处理流程</h2><p><img src=\"/img/posts/MyBatis.png\" alt=\"MyBatis处理流程\"></p>\n<ol>\n<li>在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。</li>\n<li>SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。</li>\n<li>StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。</li>\n<li>最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。</li>\n</ol>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2>","site":{"data":{}},"excerpt":"<p>MyBatis 的优点：</p>\n<ol>\n<li>MyBatis 是原生SQL，不像 Hibernate 的 HQL 需要额外的学习成本。</li>\n<li>MyBatis 的 SQL 语句与代码进行了解耦合。</li>\n<li>MyBatis 功能简单，学习成本比较低，使用的门槛也非常低，可以快速上手。</li>\n<li>MyBatis SQL调优比较灵活，而 Hibernate，SQL 语句是自动生成的，当有复杂语句需要进行优化时就比较难处理。 </li>\n</ol>\n<p>MyBatis 的缺点：</p>\n<ol>\n<li>相比 Hibernate 这样的全自动 ORM 框架，不能自动生成 SQL 语句，编写 SQL 的工作量比较大，尤其是字段多、关联表多的情况下；</li>\n<li>SQL 语句依赖于具体数据库，导致数据库迁移性差，而 Hibernate 则拥有良好的数据库可移植性。</li>\n</ol>\n<p>官方文档：<a href=\"https://mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"external\">MyBatis3</a></p>","more":"<h2 id=\"处理流程\"><a href=\"#处理流程\" class=\"headerlink\" title=\"处理流程\"></a>处理流程</h2><p><img src=\"/img/posts/MyBatis.png\" alt=\"MyBatis处理流程\"></p>\n<ol>\n<li>在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。</li>\n<li>SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。</li>\n<li>StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。</li>\n<li>最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。</li>\n</ol>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2>"},{"title":"RPC","_content":"\nRPC 是远程过程调用的简写，RPC 与 HTTP 一样都可以实现远程服务的调用，但是使用方式上有很大的区别。它能够像使用本地方法一样调用远程的方法。\n<!--more-->\n\n## 交互流程\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRCAD22_AAAwyeZIb9A096.png)\n\n- Client端：请求的发起方，也称 Consumer 或者 Referer。\n- Server 端：服务实现提供方，也称 Provider。\n\n为了保持较高的性能，Client 端一般都是直接请求远端的 Server 节点。因此，RPC 框架需要自动的服务注册与发现的能力，上方的绿色的注册中心就是用来动态维护可用服务节点信息的模块。\n\n**当 Server 提供服务时**，向注册中心注册服务信息，告诉注册中心可以提供哪些服务。同时与注册中心保持心跳或者维持长链接，来维持 Server 可用状态，具体方式与注册中心的实现有关。例如 ZK 使用长链接推送方式而 Consul 使用心跳方式。\n\n**当 Client 需要使用服务时**，会先向注册中心订阅服务，获得可用的 Server 节点，并保存在 Client 本地。当 Server 节点发生变更时会通知 Client 更新本地 Server 节点信息。Client 按某种负载均衡策略直接请求 Server 使用服务。\n\n注意：注册中心只参与服务节点的注册与变更通知，并不会参与具体请求的处理。另外一般的 RPC 框架都提供了完整的服务治理能力，因此会有额外的管理模块和信息采集模块来监控、管理服务。\n\n\n\n## 开源框架\n\n### Dubbo\n\n- 阿里开源的 RPC 框架，提供完善的服务治理能力。\n- 可以快速为 Java 服务提供 RPC 能力。\n- 提供了随机、轮询、最少调用优先等多种负载均衡策略。\n- 提供对 ZK 等多种注册中心等支持，能够自动完成服务的注册与发现。\n- 提供可视化的管理后台，方便对服务状态进行监控和管理。\n\n### Motan\n\n- 微博开源的轻量级服务治理框架，提供强大灵活的扩展能力。\n- 提供了多语言支持，目前支持 Java、PHP、Lua、Golang 等多语言交互，目前 Python 和 C++ 的客户端也在研发中。\n- 通过 Agent 代理方式，实现了的跨语言 ServiceMesh 的支持。\n- Java 版本的通信层也是通过 Netty 来实现的，基于 TCP 的私有协议进行通信。\n\n### gPRC\n\n- Google 开源的框架，本身支持的服务治理能力并不强，但拥有非常灵活的插件扩展能力，可以方便的实现自定义的服务治理能力。\n- 默认使用 Protobuf 进行消息序列化，非常适合多语言服务之间进行交互。\n- 基于 HTTP2 协议，能够支持链接复用。\n- 提供了流式调用能力。\n- 支持从服务端进行推送消息的能力。\n\n","source":"_posts/20180815.md","raw":"---\ntitle: RPC \ncategory: 应用模块\n---\n\nRPC 是远程过程调用的简写，RPC 与 HTTP 一样都可以实现远程服务的调用，但是使用方式上有很大的区别。它能够像使用本地方法一样调用远程的方法。\n<!--more-->\n\n## 交互流程\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRCAD22_AAAwyeZIb9A096.png)\n\n- Client端：请求的发起方，也称 Consumer 或者 Referer。\n- Server 端：服务实现提供方，也称 Provider。\n\n为了保持较高的性能，Client 端一般都是直接请求远端的 Server 节点。因此，RPC 框架需要自动的服务注册与发现的能力，上方的绿色的注册中心就是用来动态维护可用服务节点信息的模块。\n\n**当 Server 提供服务时**，向注册中心注册服务信息，告诉注册中心可以提供哪些服务。同时与注册中心保持心跳或者维持长链接，来维持 Server 可用状态，具体方式与注册中心的实现有关。例如 ZK 使用长链接推送方式而 Consul 使用心跳方式。\n\n**当 Client 需要使用服务时**，会先向注册中心订阅服务，获得可用的 Server 节点，并保存在 Client 本地。当 Server 节点发生变更时会通知 Client 更新本地 Server 节点信息。Client 按某种负载均衡策略直接请求 Server 使用服务。\n\n注意：注册中心只参与服务节点的注册与变更通知，并不会参与具体请求的处理。另外一般的 RPC 框架都提供了完整的服务治理能力，因此会有额外的管理模块和信息采集模块来监控、管理服务。\n\n\n\n## 开源框架\n\n### Dubbo\n\n- 阿里开源的 RPC 框架，提供完善的服务治理能力。\n- 可以快速为 Java 服务提供 RPC 能力。\n- 提供了随机、轮询、最少调用优先等多种负载均衡策略。\n- 提供对 ZK 等多种注册中心等支持，能够自动完成服务的注册与发现。\n- 提供可视化的管理后台，方便对服务状态进行监控和管理。\n\n### Motan\n\n- 微博开源的轻量级服务治理框架，提供强大灵活的扩展能力。\n- 提供了多语言支持，目前支持 Java、PHP、Lua、Golang 等多语言交互，目前 Python 和 C++ 的客户端也在研发中。\n- 通过 Agent 代理方式，实现了的跨语言 ServiceMesh 的支持。\n- Java 版本的通信层也是通过 Netty 来实现的，基于 TCP 的私有协议进行通信。\n\n### gPRC\n\n- Google 开源的框架，本身支持的服务治理能力并不强，但拥有非常灵活的插件扩展能力，可以方便的实现自定义的服务治理能力。\n- 默认使用 Protobuf 进行消息序列化，非常适合多语言服务之间进行交互。\n- 基于 HTTP2 协议，能够支持链接复用。\n- 提供了流式调用能力。\n- 支持从服务端进行推送消息的能力。\n\n","slug":"20180815","published":1,"date":"2023-01-03T01:29:04.006Z","updated":"2023-01-03T01:29:04.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0r000jcwyu8e0kb2to","content":"<p>RPC 是远程过程调用的简写，RPC 与 HTTP 一样都可以实现远程服务的调用，但是使用方式上有很大的区别。它能够像使用本地方法一样调用远程的方法。<br><a id=\"more\"></a></p>\n<h2 id=\"交互流程\"><a href=\"#交互流程\" class=\"headerlink\" title=\"交互流程\"></a>交互流程</h2><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRCAD22_AAAwyeZIb9A096.png\" alt=\"img\"></p>\n<ul>\n<li>Client端：请求的发起方，也称 Consumer 或者 Referer。</li>\n<li>Server 端：服务实现提供方，也称 Provider。</li>\n</ul>\n<p>为了保持较高的性能，Client 端一般都是直接请求远端的 Server 节点。因此，RPC 框架需要自动的服务注册与发现的能力，上方的绿色的注册中心就是用来动态维护可用服务节点信息的模块。</p>\n<p><strong>当 Server 提供服务时</strong>，向注册中心注册服务信息，告诉注册中心可以提供哪些服务。同时与注册中心保持心跳或者维持长链接，来维持 Server 可用状态，具体方式与注册中心的实现有关。例如 ZK 使用长链接推送方式而 Consul 使用心跳方式。</p>\n<p><strong>当 Client 需要使用服务时</strong>，会先向注册中心订阅服务，获得可用的 Server 节点，并保存在 Client 本地。当 Server 节点发生变更时会通知 Client 更新本地 Server 节点信息。Client 按某种负载均衡策略直接请求 Server 使用服务。</p>\n<p>注意：注册中心只参与服务节点的注册与变更通知，并不会参与具体请求的处理。另外一般的 RPC 框架都提供了完整的服务治理能力，因此会有额外的管理模块和信息采集模块来监控、管理服务。</p>\n<h2 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h2><h3 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h3><ul>\n<li>阿里开源的 RPC 框架，提供完善的服务治理能力。</li>\n<li>可以快速为 Java 服务提供 RPC 能力。</li>\n<li>提供了随机、轮询、最少调用优先等多种负载均衡策略。</li>\n<li>提供对 ZK 等多种注册中心等支持，能够自动完成服务的注册与发现。</li>\n<li>提供可视化的管理后台，方便对服务状态进行监控和管理。</li>\n</ul>\n<h3 id=\"Motan\"><a href=\"#Motan\" class=\"headerlink\" title=\"Motan\"></a>Motan</h3><ul>\n<li>微博开源的轻量级服务治理框架，提供强大灵活的扩展能力。</li>\n<li>提供了多语言支持，目前支持 Java、PHP、Lua、Golang 等多语言交互，目前 Python 和 C++ 的客户端也在研发中。</li>\n<li>通过 Agent 代理方式，实现了的跨语言 ServiceMesh 的支持。</li>\n<li>Java 版本的通信层也是通过 Netty 来实现的，基于 TCP 的私有协议进行通信。</li>\n</ul>\n<h3 id=\"gPRC\"><a href=\"#gPRC\" class=\"headerlink\" title=\"gPRC\"></a>gPRC</h3><ul>\n<li>Google 开源的框架，本身支持的服务治理能力并不强，但拥有非常灵活的插件扩展能力，可以方便的实现自定义的服务治理能力。</li>\n<li>默认使用 Protobuf 进行消息序列化，非常适合多语言服务之间进行交互。</li>\n<li>基于 HTTP2 协议，能够支持链接复用。</li>\n<li>提供了流式调用能力。</li>\n<li>支持从服务端进行推送消息的能力。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>RPC 是远程过程调用的简写，RPC 与 HTTP 一样都可以实现远程服务的调用，但是使用方式上有很大的区别。它能够像使用本地方法一样调用远程的方法。<br>","more":"</p>\n<h2 id=\"交互流程\"><a href=\"#交互流程\" class=\"headerlink\" title=\"交互流程\"></a>交互流程</h2><p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRCAD22_AAAwyeZIb9A096.png\" alt=\"img\"></p>\n<ul>\n<li>Client端：请求的发起方，也称 Consumer 或者 Referer。</li>\n<li>Server 端：服务实现提供方，也称 Provider。</li>\n</ul>\n<p>为了保持较高的性能，Client 端一般都是直接请求远端的 Server 节点。因此，RPC 框架需要自动的服务注册与发现的能力，上方的绿色的注册中心就是用来动态维护可用服务节点信息的模块。</p>\n<p><strong>当 Server 提供服务时</strong>，向注册中心注册服务信息，告诉注册中心可以提供哪些服务。同时与注册中心保持心跳或者维持长链接，来维持 Server 可用状态，具体方式与注册中心的实现有关。例如 ZK 使用长链接推送方式而 Consul 使用心跳方式。</p>\n<p><strong>当 Client 需要使用服务时</strong>，会先向注册中心订阅服务，获得可用的 Server 节点，并保存在 Client 本地。当 Server 节点发生变更时会通知 Client 更新本地 Server 节点信息。Client 按某种负载均衡策略直接请求 Server 使用服务。</p>\n<p>注意：注册中心只参与服务节点的注册与变更通知，并不会参与具体请求的处理。另外一般的 RPC 框架都提供了完整的服务治理能力，因此会有额外的管理模块和信息采集模块来监控、管理服务。</p>\n<h2 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h2><h3 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h3><ul>\n<li>阿里开源的 RPC 框架，提供完善的服务治理能力。</li>\n<li>可以快速为 Java 服务提供 RPC 能力。</li>\n<li>提供了随机、轮询、最少调用优先等多种负载均衡策略。</li>\n<li>提供对 ZK 等多种注册中心等支持，能够自动完成服务的注册与发现。</li>\n<li>提供可视化的管理后台，方便对服务状态进行监控和管理。</li>\n</ul>\n<h3 id=\"Motan\"><a href=\"#Motan\" class=\"headerlink\" title=\"Motan\"></a>Motan</h3><ul>\n<li>微博开源的轻量级服务治理框架，提供强大灵活的扩展能力。</li>\n<li>提供了多语言支持，目前支持 Java、PHP、Lua、Golang 等多语言交互，目前 Python 和 C++ 的客户端也在研发中。</li>\n<li>通过 Agent 代理方式，实现了的跨语言 ServiceMesh 的支持。</li>\n<li>Java 版本的通信层也是通过 Netty 来实现的，基于 TCP 的私有协议进行通信。</li>\n</ul>\n<h3 id=\"gPRC\"><a href=\"#gPRC\" class=\"headerlink\" title=\"gPRC\"></a>gPRC</h3><ul>\n<li>Google 开源的框架，本身支持的服务治理能力并不强，但拥有非常灵活的插件扩展能力，可以方便的实现自定义的服务治理能力。</li>\n<li>默认使用 Protobuf 进行消息序列化，非常适合多语言服务之间进行交互。</li>\n<li>基于 HTTP2 协议，能够支持链接复用。</li>\n<li>提供了流式调用能力。</li>\n<li>支持从服务端进行推送消息的能力。</li>\n</ul>"},{"title":"缓存","_content":"\n缓存是高并发场景下提高热点数据访问性能的一个有效手段，使用内存来保存数据。\n<!--more-->\n\n## 类型\n* 本地缓存\n    * Caffeine\n    * Guava Cache\n* 分布式缓存\n    * [Redis](/2021/07/29/20181111/) ：codis\n    * Memcache: EVCache\n    * Tair\n    * Aerospike\n    * Hazelcast\n    * Pika\n* 多级缓存：本地缓存 + 分布式缓存\n实际业务中一般采用多级缓存，本地缓存只保存访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。\n\n## 淘汰策略\n由于成本和内存限制，当存储的数据超过缓存容量时，需要对缓存的数据进行剔除。\n* FIFO：淘汰最早数据。\n* LRU：剔除最近最少使用。\n* LFU：剔除最近使用频率最低。\n\n## 缓存常见问题\n### 缓存更新方式\n在数据源（可能是 DB，也可能是远程服务）发生变更时需要对缓存进行更新。\n**DB：**\n\n在更新完 DB 后就直接更新缓存\n\n**远程服务**\n\n- 对缓存数据设置失效期（数据不一致的最大容忍时间），key 不存在或失效时先请求数据源获取最新数据，然后再次缓存，并更新失效期。\n- 定时对数据进行分批更新。\n\n### 缓存不一致\n主动更新失败，例如更新 DB 后，更新 Redis 因为网络原因请求超时；或者是异步更新失败导致。\n\n- 服务对耗时不是特别敏感：可以增加重试。\n- 服务对耗时不是特别敏感：可以通过异步补偿任务来处理失败的更新。\n- 短期的数据不一致不会影响业务：那么只要下次更新时可以成功，能保证最终一致性就可以。\n\n### 缓存穿透\n缓存和数据库都没有的数据，而用户不断发起请求。可能是外部的恶意攻击。\n* 对不存在的数据，在缓存中保存一个空对象进行标记，防止相同 ID 再次访问 DB。不过有时这个方法并不能很好解决问题，可能导致缓存中存储大量无用数据。\n* 使用 BloomFilter 过滤器，BloomFilter 的特点是存在性检测，如果 BloomFilter 中不存在，那么数据一定不存在；如果 BloomFilter 中存在，实际数据也有可能会不存在。非常适合解决这类的问题。\n\n### 缓存击穿\n某个热点数据失效时，大量针对这个数据的请求会穿透到数据源。\n* 可以使用互斥锁更新，保证同一个进程中针对同一个数据不会并发请求到 DB，减小 DB 压力。\n* 使用随机退避方式，失效时随机 sleep 一个很短的时间，再次查询，如果失败再执行更新。\n\n\n\n### 缓存雪崩\n多个热点数据同时失效，大量请求会穿透到数据源。\n* 可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。","source":"_posts/20180916.md","raw":"---\ntitle: 缓存\ncategory: 应用模块\ntag: [缓存,中间件]\n---\n\n缓存是高并发场景下提高热点数据访问性能的一个有效手段，使用内存来保存数据。\n<!--more-->\n\n## 类型\n* 本地缓存\n    * Caffeine\n    * Guava Cache\n* 分布式缓存\n    * [Redis](/2021/07/29/20181111/) ：codis\n    * Memcache: EVCache\n    * Tair\n    * Aerospike\n    * Hazelcast\n    * Pika\n* 多级缓存：本地缓存 + 分布式缓存\n实际业务中一般采用多级缓存，本地缓存只保存访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。\n\n## 淘汰策略\n由于成本和内存限制，当存储的数据超过缓存容量时，需要对缓存的数据进行剔除。\n* FIFO：淘汰最早数据。\n* LRU：剔除最近最少使用。\n* LFU：剔除最近使用频率最低。\n\n## 缓存常见问题\n### 缓存更新方式\n在数据源（可能是 DB，也可能是远程服务）发生变更时需要对缓存进行更新。\n**DB：**\n\n在更新完 DB 后就直接更新缓存\n\n**远程服务**\n\n- 对缓存数据设置失效期（数据不一致的最大容忍时间），key 不存在或失效时先请求数据源获取最新数据，然后再次缓存，并更新失效期。\n- 定时对数据进行分批更新。\n\n### 缓存不一致\n主动更新失败，例如更新 DB 后，更新 Redis 因为网络原因请求超时；或者是异步更新失败导致。\n\n- 服务对耗时不是特别敏感：可以增加重试。\n- 服务对耗时不是特别敏感：可以通过异步补偿任务来处理失败的更新。\n- 短期的数据不一致不会影响业务：那么只要下次更新时可以成功，能保证最终一致性就可以。\n\n### 缓存穿透\n缓存和数据库都没有的数据，而用户不断发起请求。可能是外部的恶意攻击。\n* 对不存在的数据，在缓存中保存一个空对象进行标记，防止相同 ID 再次访问 DB。不过有时这个方法并不能很好解决问题，可能导致缓存中存储大量无用数据。\n* 使用 BloomFilter 过滤器，BloomFilter 的特点是存在性检测，如果 BloomFilter 中不存在，那么数据一定不存在；如果 BloomFilter 中存在，实际数据也有可能会不存在。非常适合解决这类的问题。\n\n### 缓存击穿\n某个热点数据失效时，大量针对这个数据的请求会穿透到数据源。\n* 可以使用互斥锁更新，保证同一个进程中针对同一个数据不会并发请求到 DB，减小 DB 压力。\n* 使用随机退避方式，失效时随机 sleep 一个很短的时间，再次查询，如果失败再执行更新。\n\n\n\n### 缓存雪崩\n多个热点数据同时失效，大量请求会穿透到数据源。\n* 可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。","slug":"20180916","published":1,"date":"2023-01-03T01:29:04.006Z","updated":"2023-01-03T01:29:04.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0r000mcwyuzaop7mrx","content":"<p>缓存是高并发场景下提高热点数据访问性能的一个有效手段，使用内存来保存数据。<br><a id=\"more\"></a></p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>本地缓存<ul>\n<li>Caffeine</li>\n<li>Guava Cache</li>\n</ul>\n</li>\n<li>分布式缓存<ul>\n<li><a href=\"/2021/07/29/20181111/\">Redis</a> ：codis</li>\n<li>Memcache: EVCache</li>\n<li>Tair</li>\n<li>Aerospike</li>\n<li>Hazelcast</li>\n<li>Pika</li>\n</ul>\n</li>\n<li>多级缓存：本地缓存 + 分布式缓存<br>实际业务中一般采用多级缓存，本地缓存只保存访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。</li>\n</ul>\n<h2 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h2><p>由于成本和内存限制，当存储的数据超过缓存容量时，需要对缓存的数据进行剔除。</p>\n<ul>\n<li>FIFO：淘汰最早数据。</li>\n<li>LRU：剔除最近最少使用。</li>\n<li>LFU：剔除最近使用频率最低。</li>\n</ul>\n<h2 id=\"缓存常见问题\"><a href=\"#缓存常见问题\" class=\"headerlink\" title=\"缓存常见问题\"></a>缓存常见问题</h2><h3 id=\"缓存更新方式\"><a href=\"#缓存更新方式\" class=\"headerlink\" title=\"缓存更新方式\"></a>缓存更新方式</h3><p>在数据源（可能是 DB，也可能是远程服务）发生变更时需要对缓存进行更新。<br><strong>DB：</strong></p>\n<p>在更新完 DB 后就直接更新缓存</p>\n<p><strong>远程服务</strong></p>\n<ul>\n<li>对缓存数据设置失效期（数据不一致的最大容忍时间），key 不存在或失效时先请求数据源获取最新数据，然后再次缓存，并更新失效期。</li>\n<li>定时对数据进行分批更新。</li>\n</ul>\n<h3 id=\"缓存不一致\"><a href=\"#缓存不一致\" class=\"headerlink\" title=\"缓存不一致\"></a>缓存不一致</h3><p>主动更新失败，例如更新 DB 后，更新 Redis 因为网络原因请求超时；或者是异步更新失败导致。</p>\n<ul>\n<li>服务对耗时不是特别敏感：可以增加重试。</li>\n<li>服务对耗时不是特别敏感：可以通过异步补偿任务来处理失败的更新。</li>\n<li>短期的数据不一致不会影响业务：那么只要下次更新时可以成功，能保证最终一致性就可以。</li>\n</ul>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>缓存和数据库都没有的数据，而用户不断发起请求。可能是外部的恶意攻击。</p>\n<ul>\n<li>对不存在的数据，在缓存中保存一个空对象进行标记，防止相同 ID 再次访问 DB。不过有时这个方法并不能很好解决问题，可能导致缓存中存储大量无用数据。</li>\n<li>使用 BloomFilter 过滤器，BloomFilter 的特点是存在性检测，如果 BloomFilter 中不存在，那么数据一定不存在；如果 BloomFilter 中存在，实际数据也有可能会不存在。非常适合解决这类的问题。</li>\n</ul>\n<h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h3><p>某个热点数据失效时，大量针对这个数据的请求会穿透到数据源。</p>\n<ul>\n<li>可以使用互斥锁更新，保证同一个进程中针对同一个数据不会并发请求到 DB，减小 DB 压力。</li>\n<li>使用随机退避方式，失效时随机 sleep 一个很短的时间，再次查询，如果失败再执行更新。</li>\n</ul>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>多个热点数据同时失效，大量请求会穿透到数据源。</p>\n<ul>\n<li>可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>缓存是高并发场景下提高热点数据访问性能的一个有效手段，使用内存来保存数据。<br>","more":"</p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>本地缓存<ul>\n<li>Caffeine</li>\n<li>Guava Cache</li>\n</ul>\n</li>\n<li>分布式缓存<ul>\n<li><a href=\"/2021/07/29/20181111/\">Redis</a> ：codis</li>\n<li>Memcache: EVCache</li>\n<li>Tair</li>\n<li>Aerospike</li>\n<li>Hazelcast</li>\n<li>Pika</li>\n</ul>\n</li>\n<li>多级缓存：本地缓存 + 分布式缓存<br>实际业务中一般采用多级缓存，本地缓存只保存访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。</li>\n</ul>\n<h2 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h2><p>由于成本和内存限制，当存储的数据超过缓存容量时，需要对缓存的数据进行剔除。</p>\n<ul>\n<li>FIFO：淘汰最早数据。</li>\n<li>LRU：剔除最近最少使用。</li>\n<li>LFU：剔除最近使用频率最低。</li>\n</ul>\n<h2 id=\"缓存常见问题\"><a href=\"#缓存常见问题\" class=\"headerlink\" title=\"缓存常见问题\"></a>缓存常见问题</h2><h3 id=\"缓存更新方式\"><a href=\"#缓存更新方式\" class=\"headerlink\" title=\"缓存更新方式\"></a>缓存更新方式</h3><p>在数据源（可能是 DB，也可能是远程服务）发生变更时需要对缓存进行更新。<br><strong>DB：</strong></p>\n<p>在更新完 DB 后就直接更新缓存</p>\n<p><strong>远程服务</strong></p>\n<ul>\n<li>对缓存数据设置失效期（数据不一致的最大容忍时间），key 不存在或失效时先请求数据源获取最新数据，然后再次缓存，并更新失效期。</li>\n<li>定时对数据进行分批更新。</li>\n</ul>\n<h3 id=\"缓存不一致\"><a href=\"#缓存不一致\" class=\"headerlink\" title=\"缓存不一致\"></a>缓存不一致</h3><p>主动更新失败，例如更新 DB 后，更新 Redis 因为网络原因请求超时；或者是异步更新失败导致。</p>\n<ul>\n<li>服务对耗时不是特别敏感：可以增加重试。</li>\n<li>服务对耗时不是特别敏感：可以通过异步补偿任务来处理失败的更新。</li>\n<li>短期的数据不一致不会影响业务：那么只要下次更新时可以成功，能保证最终一致性就可以。</li>\n</ul>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>缓存和数据库都没有的数据，而用户不断发起请求。可能是外部的恶意攻击。</p>\n<ul>\n<li>对不存在的数据，在缓存中保存一个空对象进行标记，防止相同 ID 再次访问 DB。不过有时这个方法并不能很好解决问题，可能导致缓存中存储大量无用数据。</li>\n<li>使用 BloomFilter 过滤器，BloomFilter 的特点是存在性检测，如果 BloomFilter 中不存在，那么数据一定不存在；如果 BloomFilter 中存在，实际数据也有可能会不存在。非常适合解决这类的问题。</li>\n</ul>\n<h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h3><p>某个热点数据失效时，大量针对这个数据的请求会穿透到数据源。</p>\n<ul>\n<li>可以使用互斥锁更新，保证同一个进程中针对同一个数据不会并发请求到 DB，减小 DB 压力。</li>\n<li>使用随机退避方式，失效时随机 sleep 一个很短的时间，再次查询，如果失败再执行更新。</li>\n</ul>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>多个热点数据同时失效，大量请求会穿透到数据源。</p>\n<ul>\n<li>可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。</li>\n</ul>"},{"title":"消息队列","_content":"\n## 应用场景\n解耦合、削峰填谷、异步\n\n## 消息协议\nAMQP\nJMS\n\n## 常用队列对比\n| 特性       | Kafka            | RabbitMQ   | RocketMQ | ActiveMQ   | ZeroMQ |\n| :--------- | ---------------- | ---------- | -------- | ---------- | ------ |\n| 开发语言   | Scala            | Erlang     |          |            |        |\n| 单机吞吐量 | 十五级           | 万级       | 十五级   | 万级       |        |\n| 发布订阅   | 支持             | 支持       | 支持     |            |        |\n| 消息延迟   | 毫秒级           | 微秒级     |          |            |        |\n| 可用性     | 非常高（分布式） | 高（主从） |          | 高（主从） |        |\n| 消息丢失   | 理论上不会丢失   | 低         |          |            |        |\n| 消息重复   |                  |            |          |            |        |\n\n","source":"_posts/20181010.md","raw":"---\ntitle: 消息队列\ncategory: 应用模块\ntag: [消息队列,中间件]\n---\n\n## 应用场景\n解耦合、削峰填谷、异步\n\n## 消息协议\nAMQP\nJMS\n\n## 常用队列对比\n| 特性       | Kafka            | RabbitMQ   | RocketMQ | ActiveMQ   | ZeroMQ |\n| :--------- | ---------------- | ---------- | -------- | ---------- | ------ |\n| 开发语言   | Scala            | Erlang     |          |            |        |\n| 单机吞吐量 | 十五级           | 万级       | 十五级   | 万级       |        |\n| 发布订阅   | 支持             | 支持       | 支持     |            |        |\n| 消息延迟   | 毫秒级           | 微秒级     |          |            |        |\n| 可用性     | 非常高（分布式） | 高（主从） |          | 高（主从） |        |\n| 消息丢失   | 理论上不会丢失   | 低         |          |            |        |\n| 消息重复   |                  |            |          |            |        |\n\n","slug":"20181010","published":1,"date":"2023-01-03T01:29:04.006Z","updated":"2023-01-03T01:29:04.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0s000ncwyutzp6ok70","content":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>解耦合、削峰填谷、异步</p>\n<h2 id=\"消息协议\"><a href=\"#消息协议\" class=\"headerlink\" title=\"消息协议\"></a>消息协议</h2><p>AMQP<br>JMS</p>\n<h2 id=\"常用队列对比\"><a href=\"#常用队列对比\" class=\"headerlink\" title=\"常用队列对比\"></a>常用队列对比</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th>Kafka</th>\n<th>RabbitMQ</th>\n<th>RocketMQ</th>\n<th>ActiveMQ</th>\n<th>ZeroMQ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">开发语言</td>\n<td>Scala</td>\n<td>Erlang</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单机吞吐量</td>\n<td>十五级</td>\n<td>万级</td>\n<td>十五级</td>\n<td>万级</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">发布订阅</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消息延迟</td>\n<td>毫秒级</td>\n<td>微秒级</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">可用性</td>\n<td>非常高（分布式）</td>\n<td>高（主从）</td>\n<td></td>\n<td>高（主从）</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消息丢失</td>\n<td>理论上不会丢失</td>\n<td>低</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消息重复</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>解耦合、削峰填谷、异步</p>\n<h2 id=\"消息协议\"><a href=\"#消息协议\" class=\"headerlink\" title=\"消息协议\"></a>消息协议</h2><p>AMQP<br>JMS</p>\n<h2 id=\"常用队列对比\"><a href=\"#常用队列对比\" class=\"headerlink\" title=\"常用队列对比\"></a>常用队列对比</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th>Kafka</th>\n<th>RabbitMQ</th>\n<th>RocketMQ</th>\n<th>ActiveMQ</th>\n<th>ZeroMQ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">开发语言</td>\n<td>Scala</td>\n<td>Erlang</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单机吞吐量</td>\n<td>十五级</td>\n<td>万级</td>\n<td>十五级</td>\n<td>万级</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">发布订阅</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消息延迟</td>\n<td>毫秒级</td>\n<td>微秒级</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">可用性</td>\n<td>非常高（分布式）</td>\n<td>高（主从）</td>\n<td></td>\n<td>高（主从）</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消息丢失</td>\n<td>理论上不会丢失</td>\n<td>低</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消息重复</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"数据库与事务","_content":"\n## 数据库\n\n* 关系型数据库\n    * MySQL\n* NoSQL\n    * MongoDB\n* 宽列数据库\n    * HBase\n    * Cassandra\n* 时序数据库\n    * InfluxDB\n    * TDEngine\n\n\n## 事务\n### 事务特性\nA(Atomicity)C(Consistency)I(Isolation)D(Durability)\n\n- 原子性：指事务由原子的操作序列组成，所有操作要么全部成功，要么全部失败回滚。\n- 一致性：指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处以一致性状态。比如在做多表操作时，多个表要么都是事务后新的值，要么都是事务前的旧值。\n- 隔离性：指多个用户并发访问数据库时，数据库为每个用户执行的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n- 持久性：指一个事务一旦提交并执行成功，那么对数据库中数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n### 并发问题\n\n脏读：指在一个事务处理过程里读取了另一个未提交的事务中的数据。\n\n不可重复读：指对于数据库中某个数据，一个事务范围内多次查询返回了不同的数据值，这是由于在多次查询之间，有其他事务修改了数据并进行了提交。\n\n幻读：指一个事务中执行两次完全相同的查询时，第二次查询所返回的结果集跟第一个查询不相同。与不可重复读的区别在于，不可重复读是对同一条记录，两次读取的值不同。而幻读是记录的增加或删除，导致两次相同条件获取的结果记录数不同。\n\n### 隔离级别\n* 读未提交：最低的隔离级别，可以读取到其他事务未提交的内容。所有并发问题都有可能发生。\n* 读已提交：就是只能读取到其他事务已经提交的数据。可以解决脏读问题。\n* 可重复读：MySQL默认隔离级别，可以保证整个事务过程中，对同数据的多次读取结果是相同的。这个级别可以解决脏读和不可重复读的问题。\n* 串行化：最高的隔离级别，所有事务操作都依次顺序执行。这个级别会导致并发度下降，性能最差。不过这个级别可以解决前面提到的所有并发问题。\n\n### 事务分类\n* 扁平化事务：使用最多，所有的操作都在同一层次，不能提交或者回滚事务的某一部分，要么都成功，要么都回滚。\n* 带保存点的扁平化事务：允许事务在执行过程中回滚到较早的状态，而不是全部回滚。通过在事务中插入保存点，当操作失败后，可以选择回滚到最近的保存点处。\n* 链事务：在事务提交时，会将必要的上下文隐式传递给下一个事务，当事务失败时就可以回滚到最近的事务。不过，链事务只能回滚到最近的保存点，而带保存点的扁平化事务是可以回滚到任意的保存点。\n* 嵌套事务：由顶层事务和子事务构成，类似于树的结构。一般顶层事务负责逻辑管理，子事务负责具体的工作，子事务可以提交，但真正提交要等到父事务提交，如果上层事务回滚，那么所有的子事务都会回滚。\n\n### 分布式事务解决方案\n\n* XA协议：是保证强一致性的刚性事务。实现方式有两段式提交和三段式提交。两段式提交需要有一个事务协调者来保证所有的事务参与者都完成了第一阶段的准备工作。如果协调者收到所有参与者都准备好的消息，就会通知所有的事务执行第二阶段提交。一般场景下两段式提交已经能够很好得解决分布式事务了，然而两阶段在即使只有一个进程发生故障时，也会导致整个系统存在较长时间的阻塞。三段式提交通过增加 pre-commit 阶段来减少前面提到的系统阻塞的时间。三段式提交很少在实际中使用，简单了解就可以了。\n* TCC：是满足最终一致性的柔性事务方案。TCC 采用补偿机制，核心思想是对每个操作，都要注册对应的确认和补偿操作。它分为三个阶段：Try 阶段主要对业务系统进行检测及资源预留；Confirm 阶段对业务系统做确认提交；Cancel 阶段是在业务执行错误，执行回滚，释放预留的资源。\n* 消息一致性：是将本地操作和发送消息放在一个事务中，保证本地操作和消息发送要么都成功要么都失败。下游应用订阅消息，收到消息后执行对应操作。\n* GTS：阿里云中的全局事务服务 GTS，对应的开源版本是 Fescar。Fescar 基于两段式提交进行改良，剥离了分布式事务方案对数据库在协议支持上的要求。使用 Fescar 的前提是分支事务中涉及的资源，必须是支持 ACID 事务的关系型数据库。分支的提交和回滚机制，都依赖于本地事务来保障。 Fescar 的实现目前还存在一些局限，比如事务隔离级别最高支持到读已提交级别。\n\n框架：Seata","source":"_posts/20181023.md","raw":"---\ntitle: 数据库与事务\ncategory: 应用模块\ntag: 数据库\n---\n\n## 数据库\n\n* 关系型数据库\n    * MySQL\n* NoSQL\n    * MongoDB\n* 宽列数据库\n    * HBase\n    * Cassandra\n* 时序数据库\n    * InfluxDB\n    * TDEngine\n\n\n## 事务\n### 事务特性\nA(Atomicity)C(Consistency)I(Isolation)D(Durability)\n\n- 原子性：指事务由原子的操作序列组成，所有操作要么全部成功，要么全部失败回滚。\n- 一致性：指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处以一致性状态。比如在做多表操作时，多个表要么都是事务后新的值，要么都是事务前的旧值。\n- 隔离性：指多个用户并发访问数据库时，数据库为每个用户执行的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n- 持久性：指一个事务一旦提交并执行成功，那么对数据库中数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n### 并发问题\n\n脏读：指在一个事务处理过程里读取了另一个未提交的事务中的数据。\n\n不可重复读：指对于数据库中某个数据，一个事务范围内多次查询返回了不同的数据值，这是由于在多次查询之间，有其他事务修改了数据并进行了提交。\n\n幻读：指一个事务中执行两次完全相同的查询时，第二次查询所返回的结果集跟第一个查询不相同。与不可重复读的区别在于，不可重复读是对同一条记录，两次读取的值不同。而幻读是记录的增加或删除，导致两次相同条件获取的结果记录数不同。\n\n### 隔离级别\n* 读未提交：最低的隔离级别，可以读取到其他事务未提交的内容。所有并发问题都有可能发生。\n* 读已提交：就是只能读取到其他事务已经提交的数据。可以解决脏读问题。\n* 可重复读：MySQL默认隔离级别，可以保证整个事务过程中，对同数据的多次读取结果是相同的。这个级别可以解决脏读和不可重复读的问题。\n* 串行化：最高的隔离级别，所有事务操作都依次顺序执行。这个级别会导致并发度下降，性能最差。不过这个级别可以解决前面提到的所有并发问题。\n\n### 事务分类\n* 扁平化事务：使用最多，所有的操作都在同一层次，不能提交或者回滚事务的某一部分，要么都成功，要么都回滚。\n* 带保存点的扁平化事务：允许事务在执行过程中回滚到较早的状态，而不是全部回滚。通过在事务中插入保存点，当操作失败后，可以选择回滚到最近的保存点处。\n* 链事务：在事务提交时，会将必要的上下文隐式传递给下一个事务，当事务失败时就可以回滚到最近的事务。不过，链事务只能回滚到最近的保存点，而带保存点的扁平化事务是可以回滚到任意的保存点。\n* 嵌套事务：由顶层事务和子事务构成，类似于树的结构。一般顶层事务负责逻辑管理，子事务负责具体的工作，子事务可以提交，但真正提交要等到父事务提交，如果上层事务回滚，那么所有的子事务都会回滚。\n\n### 分布式事务解决方案\n\n* XA协议：是保证强一致性的刚性事务。实现方式有两段式提交和三段式提交。两段式提交需要有一个事务协调者来保证所有的事务参与者都完成了第一阶段的准备工作。如果协调者收到所有参与者都准备好的消息，就会通知所有的事务执行第二阶段提交。一般场景下两段式提交已经能够很好得解决分布式事务了，然而两阶段在即使只有一个进程发生故障时，也会导致整个系统存在较长时间的阻塞。三段式提交通过增加 pre-commit 阶段来减少前面提到的系统阻塞的时间。三段式提交很少在实际中使用，简单了解就可以了。\n* TCC：是满足最终一致性的柔性事务方案。TCC 采用补偿机制，核心思想是对每个操作，都要注册对应的确认和补偿操作。它分为三个阶段：Try 阶段主要对业务系统进行检测及资源预留；Confirm 阶段对业务系统做确认提交；Cancel 阶段是在业务执行错误，执行回滚，释放预留的资源。\n* 消息一致性：是将本地操作和发送消息放在一个事务中，保证本地操作和消息发送要么都成功要么都失败。下游应用订阅消息，收到消息后执行对应操作。\n* GTS：阿里云中的全局事务服务 GTS，对应的开源版本是 Fescar。Fescar 基于两段式提交进行改良，剥离了分布式事务方案对数据库在协议支持上的要求。使用 Fescar 的前提是分支事务中涉及的资源，必须是支持 ACID 事务的关系型数据库。分支的提交和回滚机制，都依赖于本地事务来保障。 Fescar 的实现目前还存在一些局限，比如事务隔离级别最高支持到读已提交级别。\n\n框架：Seata","slug":"20181023","published":1,"date":"2023-01-03T01:29:04.006Z","updated":"2023-01-03T01:29:04.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0s000scwyuatsfz6me","content":"<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><ul>\n<li>关系型数据库<ul>\n<li>MySQL</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB</li>\n</ul>\n</li>\n<li>宽列数据库<ul>\n<li>HBase</li>\n<li>Cassandra</li>\n</ul>\n</li>\n<li>时序数据库<ul>\n<li>InfluxDB</li>\n<li>TDEngine</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h3 id=\"事务特性\"><a href=\"#事务特性\" class=\"headerlink\" title=\"事务特性\"></a>事务特性</h3><p>A(Atomicity)C(Consistency)I(Isolation)D(Durability)</p>\n<ul>\n<li>原子性：指事务由原子的操作序列组成，所有操作要么全部成功，要么全部失败回滚。</li>\n<li>一致性：指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处以一致性状态。比如在做多表操作时，多个表要么都是事务后新的值，要么都是事务前的旧值。</li>\n<li>隔离性：指多个用户并发访问数据库时，数据库为每个用户执行的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li>\n<li>持久性：指一个事务一旦提交并执行成功，那么对数据库中数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li>\n</ul>\n<h3 id=\"并发问题\"><a href=\"#并发问题\" class=\"headerlink\" title=\"并发问题\"></a>并发问题</h3><p>脏读：指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p>\n<p>不可重复读：指对于数据库中某个数据，一个事务范围内多次查询返回了不同的数据值，这是由于在多次查询之间，有其他事务修改了数据并进行了提交。</p>\n<p>幻读：指一个事务中执行两次完全相同的查询时，第二次查询所返回的结果集跟第一个查询不相同。与不可重复读的区别在于，不可重复读是对同一条记录，两次读取的值不同。而幻读是记录的增加或删除，导致两次相同条件获取的结果记录数不同。</p>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><ul>\n<li>读未提交：最低的隔离级别，可以读取到其他事务未提交的内容。所有并发问题都有可能发生。</li>\n<li>读已提交：就是只能读取到其他事务已经提交的数据。可以解决脏读问题。</li>\n<li>可重复读：MySQL默认隔离级别，可以保证整个事务过程中，对同数据的多次读取结果是相同的。这个级别可以解决脏读和不可重复读的问题。</li>\n<li>串行化：最高的隔离级别，所有事务操作都依次顺序执行。这个级别会导致并发度下降，性能最差。不过这个级别可以解决前面提到的所有并发问题。</li>\n</ul>\n<h3 id=\"事务分类\"><a href=\"#事务分类\" class=\"headerlink\" title=\"事务分类\"></a>事务分类</h3><ul>\n<li>扁平化事务：使用最多，所有的操作都在同一层次，不能提交或者回滚事务的某一部分，要么都成功，要么都回滚。</li>\n<li>带保存点的扁平化事务：允许事务在执行过程中回滚到较早的状态，而不是全部回滚。通过在事务中插入保存点，当操作失败后，可以选择回滚到最近的保存点处。</li>\n<li>链事务：在事务提交时，会将必要的上下文隐式传递给下一个事务，当事务失败时就可以回滚到最近的事务。不过，链事务只能回滚到最近的保存点，而带保存点的扁平化事务是可以回滚到任意的保存点。</li>\n<li>嵌套事务：由顶层事务和子事务构成，类似于树的结构。一般顶层事务负责逻辑管理，子事务负责具体的工作，子事务可以提交，但真正提交要等到父事务提交，如果上层事务回滚，那么所有的子事务都会回滚。</li>\n</ul>\n<h3 id=\"分布式事务解决方案\"><a href=\"#分布式事务解决方案\" class=\"headerlink\" title=\"分布式事务解决方案\"></a>分布式事务解决方案</h3><ul>\n<li>XA协议：是保证强一致性的刚性事务。实现方式有两段式提交和三段式提交。两段式提交需要有一个事务协调者来保证所有的事务参与者都完成了第一阶段的准备工作。如果协调者收到所有参与者都准备好的消息，就会通知所有的事务执行第二阶段提交。一般场景下两段式提交已经能够很好得解决分布式事务了，然而两阶段在即使只有一个进程发生故障时，也会导致整个系统存在较长时间的阻塞。三段式提交通过增加 pre-commit 阶段来减少前面提到的系统阻塞的时间。三段式提交很少在实际中使用，简单了解就可以了。</li>\n<li>TCC：是满足最终一致性的柔性事务方案。TCC 采用补偿机制，核心思想是对每个操作，都要注册对应的确认和补偿操作。它分为三个阶段：Try 阶段主要对业务系统进行检测及资源预留；Confirm 阶段对业务系统做确认提交；Cancel 阶段是在业务执行错误，执行回滚，释放预留的资源。</li>\n<li>消息一致性：是将本地操作和发送消息放在一个事务中，保证本地操作和消息发送要么都成功要么都失败。下游应用订阅消息，收到消息后执行对应操作。</li>\n<li>GTS：阿里云中的全局事务服务 GTS，对应的开源版本是 Fescar。Fescar 基于两段式提交进行改良，剥离了分布式事务方案对数据库在协议支持上的要求。使用 Fescar 的前提是分支事务中涉及的资源，必须是支持 ACID 事务的关系型数据库。分支的提交和回滚机制，都依赖于本地事务来保障。 Fescar 的实现目前还存在一些局限，比如事务隔离级别最高支持到读已提交级别。</li>\n</ul>\n<p>框架：Seata</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><ul>\n<li>关系型数据库<ul>\n<li>MySQL</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB</li>\n</ul>\n</li>\n<li>宽列数据库<ul>\n<li>HBase</li>\n<li>Cassandra</li>\n</ul>\n</li>\n<li>时序数据库<ul>\n<li>InfluxDB</li>\n<li>TDEngine</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h3 id=\"事务特性\"><a href=\"#事务特性\" class=\"headerlink\" title=\"事务特性\"></a>事务特性</h3><p>A(Atomicity)C(Consistency)I(Isolation)D(Durability)</p>\n<ul>\n<li>原子性：指事务由原子的操作序列组成，所有操作要么全部成功，要么全部失败回滚。</li>\n<li>一致性：指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处以一致性状态。比如在做多表操作时，多个表要么都是事务后新的值，要么都是事务前的旧值。</li>\n<li>隔离性：指多个用户并发访问数据库时，数据库为每个用户执行的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li>\n<li>持久性：指一个事务一旦提交并执行成功，那么对数据库中数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li>\n</ul>\n<h3 id=\"并发问题\"><a href=\"#并发问题\" class=\"headerlink\" title=\"并发问题\"></a>并发问题</h3><p>脏读：指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p>\n<p>不可重复读：指对于数据库中某个数据，一个事务范围内多次查询返回了不同的数据值，这是由于在多次查询之间，有其他事务修改了数据并进行了提交。</p>\n<p>幻读：指一个事务中执行两次完全相同的查询时，第二次查询所返回的结果集跟第一个查询不相同。与不可重复读的区别在于，不可重复读是对同一条记录，两次读取的值不同。而幻读是记录的增加或删除，导致两次相同条件获取的结果记录数不同。</p>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><ul>\n<li>读未提交：最低的隔离级别，可以读取到其他事务未提交的内容。所有并发问题都有可能发生。</li>\n<li>读已提交：就是只能读取到其他事务已经提交的数据。可以解决脏读问题。</li>\n<li>可重复读：MySQL默认隔离级别，可以保证整个事务过程中，对同数据的多次读取结果是相同的。这个级别可以解决脏读和不可重复读的问题。</li>\n<li>串行化：最高的隔离级别，所有事务操作都依次顺序执行。这个级别会导致并发度下降，性能最差。不过这个级别可以解决前面提到的所有并发问题。</li>\n</ul>\n<h3 id=\"事务分类\"><a href=\"#事务分类\" class=\"headerlink\" title=\"事务分类\"></a>事务分类</h3><ul>\n<li>扁平化事务：使用最多，所有的操作都在同一层次，不能提交或者回滚事务的某一部分，要么都成功，要么都回滚。</li>\n<li>带保存点的扁平化事务：允许事务在执行过程中回滚到较早的状态，而不是全部回滚。通过在事务中插入保存点，当操作失败后，可以选择回滚到最近的保存点处。</li>\n<li>链事务：在事务提交时，会将必要的上下文隐式传递给下一个事务，当事务失败时就可以回滚到最近的事务。不过，链事务只能回滚到最近的保存点，而带保存点的扁平化事务是可以回滚到任意的保存点。</li>\n<li>嵌套事务：由顶层事务和子事务构成，类似于树的结构。一般顶层事务负责逻辑管理，子事务负责具体的工作，子事务可以提交，但真正提交要等到父事务提交，如果上层事务回滚，那么所有的子事务都会回滚。</li>\n</ul>\n<h3 id=\"分布式事务解决方案\"><a href=\"#分布式事务解决方案\" class=\"headerlink\" title=\"分布式事务解决方案\"></a>分布式事务解决方案</h3><ul>\n<li>XA协议：是保证强一致性的刚性事务。实现方式有两段式提交和三段式提交。两段式提交需要有一个事务协调者来保证所有的事务参与者都完成了第一阶段的准备工作。如果协调者收到所有参与者都准备好的消息，就会通知所有的事务执行第二阶段提交。一般场景下两段式提交已经能够很好得解决分布式事务了，然而两阶段在即使只有一个进程发生故障时，也会导致整个系统存在较长时间的阻塞。三段式提交通过增加 pre-commit 阶段来减少前面提到的系统阻塞的时间。三段式提交很少在实际中使用，简单了解就可以了。</li>\n<li>TCC：是满足最终一致性的柔性事务方案。TCC 采用补偿机制，核心思想是对每个操作，都要注册对应的确认和补偿操作。它分为三个阶段：Try 阶段主要对业务系统进行检测及资源预留；Confirm 阶段对业务系统做确认提交；Cancel 阶段是在业务执行错误，执行回滚，释放预留的资源。</li>\n<li>消息一致性：是将本地操作和发送消息放在一个事务中，保证本地操作和消息发送要么都成功要么都失败。下游应用订阅消息，收到消息后执行对应操作。</li>\n<li>GTS：阿里云中的全局事务服务 GTS，对应的开源版本是 Fescar。Fescar 基于两段式提交进行改良，剥离了分布式事务方案对数据库在协议支持上的要求。使用 Fescar 的前提是分支事务中涉及的资源，必须是支持 ACID 事务的关系型数据库。分支的提交和回滚机制，都依赖于本地事务来保障。 Fescar 的实现目前还存在一些局限，比如事务隔离级别最高支持到读已提交级别。</li>\n</ul>\n<p>框架：Seata</p>\n"},{"title":"Kafka","_content":"\n## 高性能原因\n\n### 网络层的Reactor设计模式\n\n### 顺序写\n\n### 页缓存\n\n### 零拷贝\n\n## 生产消息\n\n生产者根据规则选择一个Partition写入\n* 轮询策略（默认规则）\n* 指定Partition\n* 指定key来根据Hash值选择Partition\n\n消息发送方式\n* 同步：默认方式\n* 异步：允许批量\n* oneway：不需要返回结果\n\n## 消费消息\n* Consumer按照Group来消费消息，topic中的每一条消息可以被多个Consumer Group消费；\n* 每个Partition在一个Group中只能由一个Consumer消费，通过Group Coordinator来管理Consumer实际负责消费哪个Partiton，默认支持轮询和Range分配。\n* Kafka在zk中保存了每个Topic中每个Partition在不同Group的消费偏移量offset。\n  **注意**：分区数量一般要大于或等于消费者（同一Group）数量。否则，有的消费者会消费不到数据\n\n## 经验\n### 集成Spring Kafka\n~~~\n<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n</dependency>\n~~~\n生产：使用 KafkaTemplte 生产消息，多个Kafka实例需生产消息时配置不同的KafkaTemplate\n消费：单条消费时直接使用 @KafkaListener 注解即可，批量消费需先配置containerFactory\n\n### 可视化\n[可视化工具下载地址](https://www.kafkatool.com/download.html)\n\n## 参考文章\n[CKafka常用参数配置指南](https://cloud.tencent.com/document/product/597/30203)\n[发布者最佳实践](https://help.aliyun.com/document_detail/68165.html?spm=a2c4g.11186623.6.761.1615358bafQjos)\n[订阅者最佳实践](https://help.aliyun.com/document_detail/68166.html?spm=a2c4g.11186623.6.762.4297203abkfLec)\n","source":"_posts/20181112.md","raw":"---\ntitle: Kafka\ncategory: 应用模块\ntag: [消息队列,中间件]\n---\n\n## 高性能原因\n\n### 网络层的Reactor设计模式\n\n### 顺序写\n\n### 页缓存\n\n### 零拷贝\n\n## 生产消息\n\n生产者根据规则选择一个Partition写入\n* 轮询策略（默认规则）\n* 指定Partition\n* 指定key来根据Hash值选择Partition\n\n消息发送方式\n* 同步：默认方式\n* 异步：允许批量\n* oneway：不需要返回结果\n\n## 消费消息\n* Consumer按照Group来消费消息，topic中的每一条消息可以被多个Consumer Group消费；\n* 每个Partition在一个Group中只能由一个Consumer消费，通过Group Coordinator来管理Consumer实际负责消费哪个Partiton，默认支持轮询和Range分配。\n* Kafka在zk中保存了每个Topic中每个Partition在不同Group的消费偏移量offset。\n  **注意**：分区数量一般要大于或等于消费者（同一Group）数量。否则，有的消费者会消费不到数据\n\n## 经验\n### 集成Spring Kafka\n~~~\n<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n</dependency>\n~~~\n生产：使用 KafkaTemplte 生产消息，多个Kafka实例需生产消息时配置不同的KafkaTemplate\n消费：单条消费时直接使用 @KafkaListener 注解即可，批量消费需先配置containerFactory\n\n### 可视化\n[可视化工具下载地址](https://www.kafkatool.com/download.html)\n\n## 参考文章\n[CKafka常用参数配置指南](https://cloud.tencent.com/document/product/597/30203)\n[发布者最佳实践](https://help.aliyun.com/document_detail/68165.html?spm=a2c4g.11186623.6.761.1615358bafQjos)\n[订阅者最佳实践](https://help.aliyun.com/document_detail/68166.html?spm=a2c4g.11186623.6.762.4297203abkfLec)\n","slug":"20181112","published":1,"date":"2023-01-03T01:29:04.007Z","updated":"2023-01-03T01:29:04.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0s000tcwyu16kbsl0q","content":"<h2 id=\"高性能原因\"><a href=\"#高性能原因\" class=\"headerlink\" title=\"高性能原因\"></a>高性能原因</h2><h3 id=\"网络层的Reactor设计模式\"><a href=\"#网络层的Reactor设计模式\" class=\"headerlink\" title=\"网络层的Reactor设计模式\"></a>网络层的Reactor设计模式</h3><h3 id=\"顺序写\"><a href=\"#顺序写\" class=\"headerlink\" title=\"顺序写\"></a>顺序写</h3><h3 id=\"页缓存\"><a href=\"#页缓存\" class=\"headerlink\" title=\"页缓存\"></a>页缓存</h3><h3 id=\"零拷贝\"><a href=\"#零拷贝\" class=\"headerlink\" title=\"零拷贝\"></a>零拷贝</h3><h2 id=\"生产消息\"><a href=\"#生产消息\" class=\"headerlink\" title=\"生产消息\"></a>生产消息</h2><p>生产者根据规则选择一个Partition写入</p>\n<ul>\n<li>轮询策略（默认规则）</li>\n<li>指定Partition</li>\n<li>指定key来根据Hash值选择Partition</li>\n</ul>\n<p>消息发送方式</p>\n<ul>\n<li>同步：默认方式</li>\n<li>异步：允许批量</li>\n<li>oneway：不需要返回结果</li>\n</ul>\n<h2 id=\"消费消息\"><a href=\"#消费消息\" class=\"headerlink\" title=\"消费消息\"></a>消费消息</h2><ul>\n<li>Consumer按照Group来消费消息，topic中的每一条消息可以被多个Consumer Group消费；</li>\n<li>每个Partition在一个Group中只能由一个Consumer消费，通过Group Coordinator来管理Consumer实际负责消费哪个Partiton，默认支持轮询和Range分配。</li>\n<li>Kafka在zk中保存了每个Topic中每个Partition在不同Group的消费偏移量offset。<br><strong>注意</strong>：分区数量一般要大于或等于消费者（同一Group）数量。否则，有的消费者会消费不到数据</li>\n</ul>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><h3 id=\"集成Spring-Kafka\"><a href=\"#集成Spring-Kafka\" class=\"headerlink\" title=\"集成Spring Kafka\"></a>集成Spring Kafka</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p>生产：使用 KafkaTemplte 生产消息，多个Kafka实例需生产消息时配置不同的KafkaTemplate<br>消费：单条消费时直接使用 @KafkaListener 注解即可，批量消费需先配置containerFactory</p>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p><a href=\"https://www.kafkatool.com/download.html\" target=\"_blank\" rel=\"external\">可视化工具下载地址</a></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://cloud.tencent.com/document/product/597/30203\" target=\"_blank\" rel=\"external\">CKafka常用参数配置指南</a><br><a href=\"https://help.aliyun.com/document_detail/68165.html?spm=a2c4g.11186623.6.761.1615358bafQjos\" target=\"_blank\" rel=\"external\">发布者最佳实践</a><br><a href=\"https://help.aliyun.com/document_detail/68166.html?spm=a2c4g.11186623.6.762.4297203abkfLec\" target=\"_blank\" rel=\"external\">订阅者最佳实践</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"高性能原因\"><a href=\"#高性能原因\" class=\"headerlink\" title=\"高性能原因\"></a>高性能原因</h2><h3 id=\"网络层的Reactor设计模式\"><a href=\"#网络层的Reactor设计模式\" class=\"headerlink\" title=\"网络层的Reactor设计模式\"></a>网络层的Reactor设计模式</h3><h3 id=\"顺序写\"><a href=\"#顺序写\" class=\"headerlink\" title=\"顺序写\"></a>顺序写</h3><h3 id=\"页缓存\"><a href=\"#页缓存\" class=\"headerlink\" title=\"页缓存\"></a>页缓存</h3><h3 id=\"零拷贝\"><a href=\"#零拷贝\" class=\"headerlink\" title=\"零拷贝\"></a>零拷贝</h3><h2 id=\"生产消息\"><a href=\"#生产消息\" class=\"headerlink\" title=\"生产消息\"></a>生产消息</h2><p>生产者根据规则选择一个Partition写入</p>\n<ul>\n<li>轮询策略（默认规则）</li>\n<li>指定Partition</li>\n<li>指定key来根据Hash值选择Partition</li>\n</ul>\n<p>消息发送方式</p>\n<ul>\n<li>同步：默认方式</li>\n<li>异步：允许批量</li>\n<li>oneway：不需要返回结果</li>\n</ul>\n<h2 id=\"消费消息\"><a href=\"#消费消息\" class=\"headerlink\" title=\"消费消息\"></a>消费消息</h2><ul>\n<li>Consumer按照Group来消费消息，topic中的每一条消息可以被多个Consumer Group消费；</li>\n<li>每个Partition在一个Group中只能由一个Consumer消费，通过Group Coordinator来管理Consumer实际负责消费哪个Partiton，默认支持轮询和Range分配。</li>\n<li>Kafka在zk中保存了每个Topic中每个Partition在不同Group的消费偏移量offset。<br><strong>注意</strong>：分区数量一般要大于或等于消费者（同一Group）数量。否则，有的消费者会消费不到数据</li>\n</ul>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><h3 id=\"集成Spring-Kafka\"><a href=\"#集成Spring-Kafka\" class=\"headerlink\" title=\"集成Spring Kafka\"></a>集成Spring Kafka</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p>生产：使用 KafkaTemplte 生产消息，多个Kafka实例需生产消息时配置不同的KafkaTemplate<br>消费：单条消费时直接使用 @KafkaListener 注解即可，批量消费需先配置containerFactory</p>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p><a href=\"https://www.kafkatool.com/download.html\" target=\"_blank\" rel=\"external\">可视化工具下载地址</a></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://cloud.tencent.com/document/product/597/30203\" target=\"_blank\" rel=\"external\">CKafka常用参数配置指南</a><br><a href=\"https://help.aliyun.com/document_detail/68165.html?spm=a2c4g.11186623.6.761.1615358bafQjos\" target=\"_blank\" rel=\"external\">发布者最佳实践</a><br><a href=\"https://help.aliyun.com/document_detail/68166.html?spm=a2c4g.11186623.6.762.4297203abkfLec\" target=\"_blank\" rel=\"external\">订阅者最佳实践</a></p>\n"},{"title":"Redis","_content":"\n采用单线程模式处理请求，支持持久化，支持多种数据格式，能够提供高可用服务。\n<!--more-->\n\n## Redisson\n1. 线程尝试去获取锁。\n2. 获取成功，则执行lua脚本。\n3. 获取失败，则通过while循环尝试获取锁。\n\n### 锁的数据类型\nHash类型\nkey: 锁名称\nhashKey: guid:线程ID\nvalue: 线程重入次数\n\n### Watch dog自动延期机制\n\n\n## 数据结构实现\n![Redis数据结构](/img/posts/Redis数据结构.png)\n在 Redis 中，所有的对象都被封装成了 redisObject，如图中浅绿的模块。redisObject 包括了对象的类型，就是 Redis 支持的 string、hash、list、set 和 sorted set 5种类型。另外 redisObject 还包括了具体对象的存储方式。\n\n### string\n最常使用的类型，底层使用 **SDS** 存储。\n\n### list\n\n3.2 版本前，当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用 **ZipList**，否则使用 **LinkedList**。\n\n3.2 版本后，基于 **QuickList** 实现。\n\n### hash\n当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用**ZipList**，否则使用 **HashTable**。\n\n### set\n当集合中元素小于 512 且所有的数据都是数值类型时使用 **IntSet**，否则会使用 **HashTable**。\n\n### sorted set\n当有序集合中元素数量小于 128 个并且所有元素长度都小于 64 字节时使用 **ZipList**，否则使用 **SkipList**。\n\n**注意**：Redis 的内存分配是使用 **jemalloc** 进行分配。jemalloc 将内存空间划分为小、大、巨大三个范围，并在范围中划分了小的内存块，当存储数据时，选择大小最合适的内存块进行分配，有利于减小内存碎片。\n\n## 底层数据结构详解\n\n### SDS\n\n动态字符串，类似于 Java 中的 ArrayList，可以通过预分配冗余空间的方式来减少内存的频繁分配。\n\n### ZipList\n\n结构为：数据长度+数据，存储在一段连续的内存上，存储效率高，但是它不利于修改操作，适用于数据较少的情况。\n\n### LinkedList\n\n结构为：双向链表，在插入节点上复杂度很低，但它的内存开销很大，每个节点的地址不连续，容易产生内存碎片。\n\n### QuickList\n\n结构为 LinkedList + ZipList。主体为 LinkedList，它的每一个节点都是一个 ZipList。\n\n### HashTable\n\n哈希表，采用渐进式rehash，需要扩容时不是一次性完成rehash，而是在 key 进行查询、更新时进行rehash。\n\n### IntSet\n\n整数集合\n\n### SkipList\n\n结构为：单链表+多级索引\n\n## 高可用\n\n### 主从同步\n读写分离\n\n### Cluster 集群\n横向扩展\nRedis Cluster 使用分片机制，在内部分为 16384 个 slot 插槽，分布在所有 master 节点上，每个 master 节点负责一部分 slot。数据操作时按 key 做 CRC16 来计算在哪个 slot，由哪个 master 进行处理。数据的冗余是通过 slave 节点来保障。\n\n### Sentinel 哨兵\n通过 Sentinel 哨兵来监控 Redis 主服务器的状态。当主挂掉时，在从节点中根据一定策略选出新主，并调整其他从 SlaveOf 到新主。\n选主策略：\n* slave 的 priority 设置的越低，优先级越高；\n* 同等情况下，slave 复制的数据越多优先级越高；\n* 相同的条件下 RunId 越小越容易被选中。\nsentinel 也会进行多实例部署，sentinel 之间通过 Raft 协议来保证自身的高可用。\n\n## 持久化\nRDB：把内存中的数据集以快照形式写入磁盘，实际操作是通过 fork 子进程执行，采用二进制压缩存储。适合用来做灾备。\nAOF：以文本日志的形式记录 Redis 处理的每一个写入或删除操作。AOF 要大于 RDB，AOF 在运行效率上往往会慢于 RDB。\n\n## 功能\n### Bitmap\n位图是支持按 bit 位来存储信息，可以用来实现 BloomFilter。\n\n### HyperLogLog\n提供不精确的去重计数功能，比较适合用来做大规模数据的去重统计，例如统计 UV。\n\n### Geospatial\n可以用来保存地理位置，并作位置距离计算或者根据半径计算位置等。这三个其实也可以算作一种数据结构。\n\n### pub/sub\n订阅发布功能，可以用作简单的消息队列。\n\n### Pipeline\n以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。\n\n### Lua脚本\n支持提交 Lua 脚本来执行一系列的功能。\n\n### 事务\nRedis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去。","source":"_posts/20181111.md","raw":"---\ntitle: Redis\ncategory: 应用模块\ntag: [缓存,中间件]\n---\n\n采用单线程模式处理请求，支持持久化，支持多种数据格式，能够提供高可用服务。\n<!--more-->\n\n## Redisson\n1. 线程尝试去获取锁。\n2. 获取成功，则执行lua脚本。\n3. 获取失败，则通过while循环尝试获取锁。\n\n### 锁的数据类型\nHash类型\nkey: 锁名称\nhashKey: guid:线程ID\nvalue: 线程重入次数\n\n### Watch dog自动延期机制\n\n\n## 数据结构实现\n![Redis数据结构](/img/posts/Redis数据结构.png)\n在 Redis 中，所有的对象都被封装成了 redisObject，如图中浅绿的模块。redisObject 包括了对象的类型，就是 Redis 支持的 string、hash、list、set 和 sorted set 5种类型。另外 redisObject 还包括了具体对象的存储方式。\n\n### string\n最常使用的类型，底层使用 **SDS** 存储。\n\n### list\n\n3.2 版本前，当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用 **ZipList**，否则使用 **LinkedList**。\n\n3.2 版本后，基于 **QuickList** 实现。\n\n### hash\n当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用**ZipList**，否则使用 **HashTable**。\n\n### set\n当集合中元素小于 512 且所有的数据都是数值类型时使用 **IntSet**，否则会使用 **HashTable**。\n\n### sorted set\n当有序集合中元素数量小于 128 个并且所有元素长度都小于 64 字节时使用 **ZipList**，否则使用 **SkipList**。\n\n**注意**：Redis 的内存分配是使用 **jemalloc** 进行分配。jemalloc 将内存空间划分为小、大、巨大三个范围，并在范围中划分了小的内存块，当存储数据时，选择大小最合适的内存块进行分配，有利于减小内存碎片。\n\n## 底层数据结构详解\n\n### SDS\n\n动态字符串，类似于 Java 中的 ArrayList，可以通过预分配冗余空间的方式来减少内存的频繁分配。\n\n### ZipList\n\n结构为：数据长度+数据，存储在一段连续的内存上，存储效率高，但是它不利于修改操作，适用于数据较少的情况。\n\n### LinkedList\n\n结构为：双向链表，在插入节点上复杂度很低，但它的内存开销很大，每个节点的地址不连续，容易产生内存碎片。\n\n### QuickList\n\n结构为 LinkedList + ZipList。主体为 LinkedList，它的每一个节点都是一个 ZipList。\n\n### HashTable\n\n哈希表，采用渐进式rehash，需要扩容时不是一次性完成rehash，而是在 key 进行查询、更新时进行rehash。\n\n### IntSet\n\n整数集合\n\n### SkipList\n\n结构为：单链表+多级索引\n\n## 高可用\n\n### 主从同步\n读写分离\n\n### Cluster 集群\n横向扩展\nRedis Cluster 使用分片机制，在内部分为 16384 个 slot 插槽，分布在所有 master 节点上，每个 master 节点负责一部分 slot。数据操作时按 key 做 CRC16 来计算在哪个 slot，由哪个 master 进行处理。数据的冗余是通过 slave 节点来保障。\n\n### Sentinel 哨兵\n通过 Sentinel 哨兵来监控 Redis 主服务器的状态。当主挂掉时，在从节点中根据一定策略选出新主，并调整其他从 SlaveOf 到新主。\n选主策略：\n* slave 的 priority 设置的越低，优先级越高；\n* 同等情况下，slave 复制的数据越多优先级越高；\n* 相同的条件下 RunId 越小越容易被选中。\nsentinel 也会进行多实例部署，sentinel 之间通过 Raft 协议来保证自身的高可用。\n\n## 持久化\nRDB：把内存中的数据集以快照形式写入磁盘，实际操作是通过 fork 子进程执行，采用二进制压缩存储。适合用来做灾备。\nAOF：以文本日志的形式记录 Redis 处理的每一个写入或删除操作。AOF 要大于 RDB，AOF 在运行效率上往往会慢于 RDB。\n\n## 功能\n### Bitmap\n位图是支持按 bit 位来存储信息，可以用来实现 BloomFilter。\n\n### HyperLogLog\n提供不精确的去重计数功能，比较适合用来做大规模数据的去重统计，例如统计 UV。\n\n### Geospatial\n可以用来保存地理位置，并作位置距离计算或者根据半径计算位置等。这三个其实也可以算作一种数据结构。\n\n### pub/sub\n订阅发布功能，可以用作简单的消息队列。\n\n### Pipeline\n以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。\n\n### Lua脚本\n支持提交 Lua 脚本来执行一系列的功能。\n\n### 事务\nRedis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去。","slug":"20181111","published":1,"date":"2023-01-03T01:29:04.006Z","updated":"2023-01-03T01:29:04.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0t000ycwyuao7bhwuf","content":"<p>采用单线程模式处理请求，支持持久化，支持多种数据格式，能够提供高可用服务。<br><a id=\"more\"></a></p>\n<h2 id=\"Redisson\"><a href=\"#Redisson\" class=\"headerlink\" title=\"Redisson\"></a>Redisson</h2><ol>\n<li>线程尝试去获取锁。</li>\n<li>获取成功，则执行lua脚本。</li>\n<li>获取失败，则通过while循环尝试获取锁。</li>\n</ol>\n<h3 id=\"锁的数据类型\"><a href=\"#锁的数据类型\" class=\"headerlink\" title=\"锁的数据类型\"></a>锁的数据类型</h3><p>Hash类型<br>key: 锁名称<br>hashKey: guid:线程ID<br>value: 线程重入次数</p>\n<h3 id=\"Watch-dog自动延期机制\"><a href=\"#Watch-dog自动延期机制\" class=\"headerlink\" title=\"Watch dog自动延期机制\"></a>Watch dog自动延期机制</h3><h2 id=\"数据结构实现\"><a href=\"#数据结构实现\" class=\"headerlink\" title=\"数据结构实现\"></a>数据结构实现</h2><p><img src=\"/img/posts/Redis数据结构.png\" alt=\"Redis数据结构\"><br>在 Redis 中，所有的对象都被封装成了 redisObject，如图中浅绿的模块。redisObject 包括了对象的类型，就是 Redis 支持的 string、hash、list、set 和 sorted set 5种类型。另外 redisObject 还包括了具体对象的存储方式。</p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>最常使用的类型，底层使用 <strong>SDS</strong> 存储。</p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>3.2 版本前，当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用 <strong>ZipList</strong>，否则使用 <strong>LinkedList</strong>。</p>\n<p>3.2 版本后，基于 <strong>QuickList</strong> 实现。</p>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用<strong>ZipList</strong>，否则使用 <strong>HashTable</strong>。</p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>当集合中元素小于 512 且所有的数据都是数值类型时使用 <strong>IntSet</strong>，否则会使用 <strong>HashTable</strong>。</p>\n<h3 id=\"sorted-set\"><a href=\"#sorted-set\" class=\"headerlink\" title=\"sorted set\"></a>sorted set</h3><p>当有序集合中元素数量小于 128 个并且所有元素长度都小于 64 字节时使用 <strong>ZipList</strong>，否则使用 <strong>SkipList</strong>。</p>\n<p><strong>注意</strong>：Redis 的内存分配是使用 <strong>jemalloc</strong> 进行分配。jemalloc 将内存空间划分为小、大、巨大三个范围，并在范围中划分了小的内存块，当存储数据时，选择大小最合适的内存块进行分配，有利于减小内存碎片。</p>\n<h2 id=\"底层数据结构详解\"><a href=\"#底层数据结构详解\" class=\"headerlink\" title=\"底层数据结构详解\"></a>底层数据结构详解</h2><h3 id=\"SDS\"><a href=\"#SDS\" class=\"headerlink\" title=\"SDS\"></a>SDS</h3><p>动态字符串，类似于 Java 中的 ArrayList，可以通过预分配冗余空间的方式来减少内存的频繁分配。</p>\n<h3 id=\"ZipList\"><a href=\"#ZipList\" class=\"headerlink\" title=\"ZipList\"></a>ZipList</h3><p>结构为：数据长度+数据，存储在一段连续的内存上，存储效率高，但是它不利于修改操作，适用于数据较少的情况。</p>\n<h3 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h3><p>结构为：双向链表，在插入节点上复杂度很低，但它的内存开销很大，每个节点的地址不连续，容易产生内存碎片。</p>\n<h3 id=\"QuickList\"><a href=\"#QuickList\" class=\"headerlink\" title=\"QuickList\"></a>QuickList</h3><p>结构为 LinkedList + ZipList。主体为 LinkedList，它的每一个节点都是一个 ZipList。</p>\n<h3 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h3><p>哈希表，采用渐进式rehash，需要扩容时不是一次性完成rehash，而是在 key 进行查询、更新时进行rehash。</p>\n<h3 id=\"IntSet\"><a href=\"#IntSet\" class=\"headerlink\" title=\"IntSet\"></a>IntSet</h3><p>整数集合</p>\n<h3 id=\"SkipList\"><a href=\"#SkipList\" class=\"headerlink\" title=\"SkipList\"></a>SkipList</h3><p>结构为：单链表+多级索引</p>\n<h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><h3 id=\"主从同步\"><a href=\"#主从同步\" class=\"headerlink\" title=\"主从同步\"></a>主从同步</h3><p>读写分离</p>\n<h3 id=\"Cluster-集群\"><a href=\"#Cluster-集群\" class=\"headerlink\" title=\"Cluster 集群\"></a>Cluster 集群</h3><p>横向扩展<br>Redis Cluster 使用分片机制，在内部分为 16384 个 slot 插槽，分布在所有 master 节点上，每个 master 节点负责一部分 slot。数据操作时按 key 做 CRC16 来计算在哪个 slot，由哪个 master 进行处理。数据的冗余是通过 slave 节点来保障。</p>\n<h3 id=\"Sentinel-哨兵\"><a href=\"#Sentinel-哨兵\" class=\"headerlink\" title=\"Sentinel 哨兵\"></a>Sentinel 哨兵</h3><p>通过 Sentinel 哨兵来监控 Redis 主服务器的状态。当主挂掉时，在从节点中根据一定策略选出新主，并调整其他从 SlaveOf 到新主。<br>选主策略：</p>\n<ul>\n<li>slave 的 priority 设置的越低，优先级越高；</li>\n<li>同等情况下，slave 复制的数据越多优先级越高；</li>\n<li>相同的条件下 RunId 越小越容易被选中。<br>sentinel 也会进行多实例部署，sentinel 之间通过 Raft 协议来保证自身的高可用。</li>\n</ul>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p>RDB：把内存中的数据集以快照形式写入磁盘，实际操作是通过 fork 子进程执行，采用二进制压缩存储。适合用来做灾备。<br>AOF：以文本日志的形式记录 Redis 处理的每一个写入或删除操作。AOF 要大于 RDB，AOF 在运行效率上往往会慢于 RDB。</p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><h3 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h3><p>位图是支持按 bit 位来存储信息，可以用来实现 BloomFilter。</p>\n<h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><p>提供不精确的去重计数功能，比较适合用来做大规模数据的去重统计，例如统计 UV。</p>\n<h3 id=\"Geospatial\"><a href=\"#Geospatial\" class=\"headerlink\" title=\"Geospatial\"></a>Geospatial</h3><p>可以用来保存地理位置，并作位置距离计算或者根据半径计算位置等。这三个其实也可以算作一种数据结构。</p>\n<h3 id=\"pub-sub\"><a href=\"#pub-sub\" class=\"headerlink\" title=\"pub/sub\"></a>pub/sub</h3><p>订阅发布功能，可以用作简单的消息队列。</p>\n<h3 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h3><p>以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。</p>\n<h3 id=\"Lua脚本\"><a href=\"#Lua脚本\" class=\"headerlink\" title=\"Lua脚本\"></a>Lua脚本</h3><p>支持提交 Lua 脚本来执行一系列的功能。</p>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>Redis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去。</p>\n","site":{"data":{}},"excerpt":"<p>采用单线程模式处理请求，支持持久化，支持多种数据格式，能够提供高可用服务。<br>","more":"</p>\n<h2 id=\"Redisson\"><a href=\"#Redisson\" class=\"headerlink\" title=\"Redisson\"></a>Redisson</h2><ol>\n<li>线程尝试去获取锁。</li>\n<li>获取成功，则执行lua脚本。</li>\n<li>获取失败，则通过while循环尝试获取锁。</li>\n</ol>\n<h3 id=\"锁的数据类型\"><a href=\"#锁的数据类型\" class=\"headerlink\" title=\"锁的数据类型\"></a>锁的数据类型</h3><p>Hash类型<br>key: 锁名称<br>hashKey: guid:线程ID<br>value: 线程重入次数</p>\n<h3 id=\"Watch-dog自动延期机制\"><a href=\"#Watch-dog自动延期机制\" class=\"headerlink\" title=\"Watch dog自动延期机制\"></a>Watch dog自动延期机制</h3><h2 id=\"数据结构实现\"><a href=\"#数据结构实现\" class=\"headerlink\" title=\"数据结构实现\"></a>数据结构实现</h2><p><img src=\"/img/posts/Redis数据结构.png\" alt=\"Redis数据结构\"><br>在 Redis 中，所有的对象都被封装成了 redisObject，如图中浅绿的模块。redisObject 包括了对象的类型，就是 Redis 支持的 string、hash、list、set 和 sorted set 5种类型。另外 redisObject 还包括了具体对象的存储方式。</p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>最常使用的类型，底层使用 <strong>SDS</strong> 存储。</p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>3.2 版本前，当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用 <strong>ZipList</strong>，否则使用 <strong>LinkedList</strong>。</p>\n<p>3.2 版本后，基于 <strong>QuickList</strong> 实现。</p>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>当 Hash 表中所有的 key 和 value 字符串长度都小于 64 字节且键值对数量小于 512 个时使用<strong>ZipList</strong>，否则使用 <strong>HashTable</strong>。</p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>当集合中元素小于 512 且所有的数据都是数值类型时使用 <strong>IntSet</strong>，否则会使用 <strong>HashTable</strong>。</p>\n<h3 id=\"sorted-set\"><a href=\"#sorted-set\" class=\"headerlink\" title=\"sorted set\"></a>sorted set</h3><p>当有序集合中元素数量小于 128 个并且所有元素长度都小于 64 字节时使用 <strong>ZipList</strong>，否则使用 <strong>SkipList</strong>。</p>\n<p><strong>注意</strong>：Redis 的内存分配是使用 <strong>jemalloc</strong> 进行分配。jemalloc 将内存空间划分为小、大、巨大三个范围，并在范围中划分了小的内存块，当存储数据时，选择大小最合适的内存块进行分配，有利于减小内存碎片。</p>\n<h2 id=\"底层数据结构详解\"><a href=\"#底层数据结构详解\" class=\"headerlink\" title=\"底层数据结构详解\"></a>底层数据结构详解</h2><h3 id=\"SDS\"><a href=\"#SDS\" class=\"headerlink\" title=\"SDS\"></a>SDS</h3><p>动态字符串，类似于 Java 中的 ArrayList，可以通过预分配冗余空间的方式来减少内存的频繁分配。</p>\n<h3 id=\"ZipList\"><a href=\"#ZipList\" class=\"headerlink\" title=\"ZipList\"></a>ZipList</h3><p>结构为：数据长度+数据，存储在一段连续的内存上，存储效率高，但是它不利于修改操作，适用于数据较少的情况。</p>\n<h3 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h3><p>结构为：双向链表，在插入节点上复杂度很低，但它的内存开销很大，每个节点的地址不连续，容易产生内存碎片。</p>\n<h3 id=\"QuickList\"><a href=\"#QuickList\" class=\"headerlink\" title=\"QuickList\"></a>QuickList</h3><p>结构为 LinkedList + ZipList。主体为 LinkedList，它的每一个节点都是一个 ZipList。</p>\n<h3 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h3><p>哈希表，采用渐进式rehash，需要扩容时不是一次性完成rehash，而是在 key 进行查询、更新时进行rehash。</p>\n<h3 id=\"IntSet\"><a href=\"#IntSet\" class=\"headerlink\" title=\"IntSet\"></a>IntSet</h3><p>整数集合</p>\n<h3 id=\"SkipList\"><a href=\"#SkipList\" class=\"headerlink\" title=\"SkipList\"></a>SkipList</h3><p>结构为：单链表+多级索引</p>\n<h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><h3 id=\"主从同步\"><a href=\"#主从同步\" class=\"headerlink\" title=\"主从同步\"></a>主从同步</h3><p>读写分离</p>\n<h3 id=\"Cluster-集群\"><a href=\"#Cluster-集群\" class=\"headerlink\" title=\"Cluster 集群\"></a>Cluster 集群</h3><p>横向扩展<br>Redis Cluster 使用分片机制，在内部分为 16384 个 slot 插槽，分布在所有 master 节点上，每个 master 节点负责一部分 slot。数据操作时按 key 做 CRC16 来计算在哪个 slot，由哪个 master 进行处理。数据的冗余是通过 slave 节点来保障。</p>\n<h3 id=\"Sentinel-哨兵\"><a href=\"#Sentinel-哨兵\" class=\"headerlink\" title=\"Sentinel 哨兵\"></a>Sentinel 哨兵</h3><p>通过 Sentinel 哨兵来监控 Redis 主服务器的状态。当主挂掉时，在从节点中根据一定策略选出新主，并调整其他从 SlaveOf 到新主。<br>选主策略：</p>\n<ul>\n<li>slave 的 priority 设置的越低，优先级越高；</li>\n<li>同等情况下，slave 复制的数据越多优先级越高；</li>\n<li>相同的条件下 RunId 越小越容易被选中。<br>sentinel 也会进行多实例部署，sentinel 之间通过 Raft 协议来保证自身的高可用。</li>\n</ul>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p>RDB：把内存中的数据集以快照形式写入磁盘，实际操作是通过 fork 子进程执行，采用二进制压缩存储。适合用来做灾备。<br>AOF：以文本日志的形式记录 Redis 处理的每一个写入或删除操作。AOF 要大于 RDB，AOF 在运行效率上往往会慢于 RDB。</p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><h3 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h3><p>位图是支持按 bit 位来存储信息，可以用来实现 BloomFilter。</p>\n<h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><p>提供不精确的去重计数功能，比较适合用来做大规模数据的去重统计，例如统计 UV。</p>\n<h3 id=\"Geospatial\"><a href=\"#Geospatial\" class=\"headerlink\" title=\"Geospatial\"></a>Geospatial</h3><p>可以用来保存地理位置，并作位置距离计算或者根据半径计算位置等。这三个其实也可以算作一种数据结构。</p>\n<h3 id=\"pub-sub\"><a href=\"#pub-sub\" class=\"headerlink\" title=\"pub/sub\"></a>pub/sub</h3><p>订阅发布功能，可以用作简单的消息队列。</p>\n<h3 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h3><p>以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。</p>\n<h3 id=\"Lua脚本\"><a href=\"#Lua脚本\" class=\"headerlink\" title=\"Lua脚本\"></a>Lua脚本</h3><p>支持提交 Lua 脚本来执行一系列的功能。</p>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>Redis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去。</p>"},{"title":"Cassandra","_content":"","source":"_posts/20181115.md","raw":"---\ntitle: Cassandra\ncategory: 应用模块\ntag: 数据库\n---","slug":"20181115","published":1,"date":"2023-01-03T01:29:04.007Z","updated":"2023-01-03T01:29:04.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0t0010cwyuysehnx8h","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"MySQL","_content":"\n## 调优\n![img](/img/posts/索引优化.png)\n这四个纬度从优化的成本角度来讲，从左到右优化成本逐渐升高；从优化效果角度来看，从右到左优化的效果更高。\n\n### 表结构及索引优化\n* 数据类型选择\n* 索引选择\n* 尽量使用 NOT NULL\n* 适当拆分\n* 适度冗余\n\n### SQL语句优化\n* 尽量避免 select *\n* 尽量使用索引排序\n\n## 索引\n索引可以大幅增加数据库的查询的性能，但是索引也是有代价的，首先需要额外的磁盘空间来保存索引；其次，对于插入、更新、删除等操作由于更新索引会增加额外的开销，因此索引比较适合用在读多写少的场景。\n### 分类\n\n* 唯一索引：索引列中的值必须是唯一的，但是允许出现空值。\n* 主键索引：一种特殊的唯一索引，但是它不允许出现空值。\n* 普通索引：唯一索引不同，它允许索引列中存在相同的值。\n* 联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。\n* 全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。\n\n### 实现\nB+树：适合用作 > 或 < 这样的范围查询，是 MySQL 中最常使用的一种索引实现。\nR-Tree：用于处理多维数据的数据结构，可以对地理数据进行空间索引。不过实际业务场景中使用的比较少。\nHash：散列表索引，效率高于 B+树，但是不支持范围查找或排序等功能。实际使用的也比较少。\nFullText：全文索引，是一种记录关键字与对应文档关系的倒排索引。\n\n## 存储引擎\n\n需要为每张表单独设置存储引擎。\n\n![img](/img/posts/聚簇索引.png)\n\n**聚簇索引**\n\nB+树叶子节点上的data是行数据。\n\n**非聚簇索引**\n\nB+树的叶子节点上的data不是行数据。而是数据存放的地址或者主键值。\n\n**回表查询**\n\n先通过键值找到主键值，再通过主键值找到行记录，这个过程称为回表查询。\n\n**覆盖索引**\n\n当sql语句的所求查询字段（select列）和查询条件字段（where子句）全都包含在一个索引中（联合索引），可以直接使用索引查询而不需要回表。\n\n### MyISAM\n\n5.5版本前默认引擎，支持全文索引，查询效率比较高，但不支持事务、使用**表级锁**。\n\n主键和辅助键均使用非聚簇索引。\n\n### InnoDB\n\n5.5版本后默认引擎。支持 ACID 事务、支持外键、支持**行级锁**。\n\n主键使用聚簇索引，辅助键使用非聚簇索引。\n\n### TokuDB\n\n第三方开发的开源存储引擎，有非常快的写速度，支持数据的压缩存储、可以在线添加索引而不影响读写操作。但是因为压缩的原因，TokuDB 非常适合访问频率不高的数据或历史数据归档，不适合大量读取的场景。\n\n## 锁\n* 表锁：开销小，加锁快，不会出现死锁；但是锁的粒度大，发生锁冲突的概率高，并发访问效率比较低。\n* 行级锁：开销大，加锁慢，有可能会出现死锁，不过因为锁定粒度最小，发生锁冲突的概率低，并发访问效率比较高\n* 共享锁：读锁，其他事务可以读，但不能写。MySQL 可以通过 lock in share mode 语句显示使用共享锁。\n* 排他锁：写锁，其他事务不能读取，也不能写。对于 UPDATE、DELETE 和 INSERT 语句，InnoDB 会自动给涉及的数据集加排他锁，或者使用 select for update 显示使用排他锁。\n\n## 经验\n\n## 参考文章\n\n[姜承尧的MySQL实战宝典](https://www.jianshu.com/nb/50366127)\n\n","source":"_posts/20181113.md","raw":"---\ntitle: MySQL\ncategory: 应用模块\ntag: 数据库\n---\n\n## 调优\n![img](/img/posts/索引优化.png)\n这四个纬度从优化的成本角度来讲，从左到右优化成本逐渐升高；从优化效果角度来看，从右到左优化的效果更高。\n\n### 表结构及索引优化\n* 数据类型选择\n* 索引选择\n* 尽量使用 NOT NULL\n* 适当拆分\n* 适度冗余\n\n### SQL语句优化\n* 尽量避免 select *\n* 尽量使用索引排序\n\n## 索引\n索引可以大幅增加数据库的查询的性能，但是索引也是有代价的，首先需要额外的磁盘空间来保存索引；其次，对于插入、更新、删除等操作由于更新索引会增加额外的开销，因此索引比较适合用在读多写少的场景。\n### 分类\n\n* 唯一索引：索引列中的值必须是唯一的，但是允许出现空值。\n* 主键索引：一种特殊的唯一索引，但是它不允许出现空值。\n* 普通索引：唯一索引不同，它允许索引列中存在相同的值。\n* 联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。\n* 全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。\n\n### 实现\nB+树：适合用作 > 或 < 这样的范围查询，是 MySQL 中最常使用的一种索引实现。\nR-Tree：用于处理多维数据的数据结构，可以对地理数据进行空间索引。不过实际业务场景中使用的比较少。\nHash：散列表索引，效率高于 B+树，但是不支持范围查找或排序等功能。实际使用的也比较少。\nFullText：全文索引，是一种记录关键字与对应文档关系的倒排索引。\n\n## 存储引擎\n\n需要为每张表单独设置存储引擎。\n\n![img](/img/posts/聚簇索引.png)\n\n**聚簇索引**\n\nB+树叶子节点上的data是行数据。\n\n**非聚簇索引**\n\nB+树的叶子节点上的data不是行数据。而是数据存放的地址或者主键值。\n\n**回表查询**\n\n先通过键值找到主键值，再通过主键值找到行记录，这个过程称为回表查询。\n\n**覆盖索引**\n\n当sql语句的所求查询字段（select列）和查询条件字段（where子句）全都包含在一个索引中（联合索引），可以直接使用索引查询而不需要回表。\n\n### MyISAM\n\n5.5版本前默认引擎，支持全文索引，查询效率比较高，但不支持事务、使用**表级锁**。\n\n主键和辅助键均使用非聚簇索引。\n\n### InnoDB\n\n5.5版本后默认引擎。支持 ACID 事务、支持外键、支持**行级锁**。\n\n主键使用聚簇索引，辅助键使用非聚簇索引。\n\n### TokuDB\n\n第三方开发的开源存储引擎，有非常快的写速度，支持数据的压缩存储、可以在线添加索引而不影响读写操作。但是因为压缩的原因，TokuDB 非常适合访问频率不高的数据或历史数据归档，不适合大量读取的场景。\n\n## 锁\n* 表锁：开销小，加锁快，不会出现死锁；但是锁的粒度大，发生锁冲突的概率高，并发访问效率比较低。\n* 行级锁：开销大，加锁慢，有可能会出现死锁，不过因为锁定粒度最小，发生锁冲突的概率低，并发访问效率比较高\n* 共享锁：读锁，其他事务可以读，但不能写。MySQL 可以通过 lock in share mode 语句显示使用共享锁。\n* 排他锁：写锁，其他事务不能读取，也不能写。对于 UPDATE、DELETE 和 INSERT 语句，InnoDB 会自动给涉及的数据集加排他锁，或者使用 select for update 显示使用排他锁。\n\n## 经验\n\n## 参考文章\n\n[姜承尧的MySQL实战宝典](https://www.jianshu.com/nb/50366127)\n\n","slug":"20181113","published":1,"date":"2023-01-03T01:29:04.007Z","updated":"2023-01-03T01:29:04.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0t0014cwyum32suchr","content":"<h2 id=\"调优\"><a href=\"#调优\" class=\"headerlink\" title=\"调优\"></a>调优</h2><p><img src=\"/img/posts/索引优化.png\" alt=\"img\"><br>这四个纬度从优化的成本角度来讲，从左到右优化成本逐渐升高；从优化效果角度来看，从右到左优化的效果更高。</p>\n<h3 id=\"表结构及索引优化\"><a href=\"#表结构及索引优化\" class=\"headerlink\" title=\"表结构及索引优化\"></a>表结构及索引优化</h3><ul>\n<li>数据类型选择</li>\n<li>索引选择</li>\n<li>尽量使用 NOT NULL</li>\n<li>适当拆分</li>\n<li>适度冗余</li>\n</ul>\n<h3 id=\"SQL语句优化\"><a href=\"#SQL语句优化\" class=\"headerlink\" title=\"SQL语句优化\"></a>SQL语句优化</h3><ul>\n<li>尽量避免 select *</li>\n<li>尽量使用索引排序</li>\n</ul>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引可以大幅增加数据库的查询的性能，但是索引也是有代价的，首先需要额外的磁盘空间来保存索引；其次，对于插入、更新、删除等操作由于更新索引会增加额外的开销，因此索引比较适合用在读多写少的场景。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>唯一索引：索引列中的值必须是唯一的，但是允许出现空值。</li>\n<li>主键索引：一种特殊的唯一索引，但是它不允许出现空值。</li>\n<li>普通索引：唯一索引不同，它允许索引列中存在相同的值。</li>\n<li>联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。</li>\n<li>全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>B+树：适合用作 &gt; 或 &lt; 这样的范围查询，是 MySQL 中最常使用的一种索引实现。<br>R-Tree：用于处理多维数据的数据结构，可以对地理数据进行空间索引。不过实际业务场景中使用的比较少。<br>Hash：散列表索引，效率高于 B+树，但是不支持范围查找或排序等功能。实际使用的也比较少。<br>FullText：全文索引，是一种记录关键字与对应文档关系的倒排索引。</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>需要为每张表单独设置存储引擎。</p>\n<p><img src=\"/img/posts/聚簇索引.png\" alt=\"img\"></p>\n<p><strong>聚簇索引</strong></p>\n<p>B+树叶子节点上的data是行数据。</p>\n<p><strong>非聚簇索引</strong></p>\n<p>B+树的叶子节点上的data不是行数据。而是数据存放的地址或者主键值。</p>\n<p><strong>回表查询</strong></p>\n<p>先通过键值找到主键值，再通过主键值找到行记录，这个过程称为回表查询。</p>\n<p><strong>覆盖索引</strong></p>\n<p>当sql语句的所求查询字段（select列）和查询条件字段（where子句）全都包含在一个索引中（联合索引），可以直接使用索引查询而不需要回表。</p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>5.5版本前默认引擎，支持全文索引，查询效率比较高，但不支持事务、使用<strong>表级锁</strong>。</p>\n<p>主键和辅助键均使用非聚簇索引。</p>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>5.5版本后默认引擎。支持 ACID 事务、支持外键、支持<strong>行级锁</strong>。</p>\n<p>主键使用聚簇索引，辅助键使用非聚簇索引。</p>\n<h3 id=\"TokuDB\"><a href=\"#TokuDB\" class=\"headerlink\" title=\"TokuDB\"></a>TokuDB</h3><p>第三方开发的开源存储引擎，有非常快的写速度，支持数据的压缩存储、可以在线添加索引而不影响读写操作。但是因为压缩的原因，TokuDB 非常适合访问频率不高的数据或历史数据归档，不适合大量读取的场景。</p>\n<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><ul>\n<li>表锁：开销小，加锁快，不会出现死锁；但是锁的粒度大，发生锁冲突的概率高，并发访问效率比较低。</li>\n<li>行级锁：开销大，加锁慢，有可能会出现死锁，不过因为锁定粒度最小，发生锁冲突的概率低，并发访问效率比较高</li>\n<li>共享锁：读锁，其他事务可以读，但不能写。MySQL 可以通过 lock in share mode 语句显示使用共享锁。</li>\n<li>排他锁：写锁，其他事务不能读取，也不能写。对于 UPDATE、DELETE 和 INSERT 语句，InnoDB 会自动给涉及的数据集加排他锁，或者使用 select for update 显示使用排他锁。</li>\n</ul>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.jianshu.com/nb/50366127\" target=\"_blank\" rel=\"external\">姜承尧的MySQL实战宝典</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"调优\"><a href=\"#调优\" class=\"headerlink\" title=\"调优\"></a>调优</h2><p><img src=\"/img/posts/索引优化.png\" alt=\"img\"><br>这四个纬度从优化的成本角度来讲，从左到右优化成本逐渐升高；从优化效果角度来看，从右到左优化的效果更高。</p>\n<h3 id=\"表结构及索引优化\"><a href=\"#表结构及索引优化\" class=\"headerlink\" title=\"表结构及索引优化\"></a>表结构及索引优化</h3><ul>\n<li>数据类型选择</li>\n<li>索引选择</li>\n<li>尽量使用 NOT NULL</li>\n<li>适当拆分</li>\n<li>适度冗余</li>\n</ul>\n<h3 id=\"SQL语句优化\"><a href=\"#SQL语句优化\" class=\"headerlink\" title=\"SQL语句优化\"></a>SQL语句优化</h3><ul>\n<li>尽量避免 select *</li>\n<li>尽量使用索引排序</li>\n</ul>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引可以大幅增加数据库的查询的性能，但是索引也是有代价的，首先需要额外的磁盘空间来保存索引；其次，对于插入、更新、删除等操作由于更新索引会增加额外的开销，因此索引比较适合用在读多写少的场景。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>唯一索引：索引列中的值必须是唯一的，但是允许出现空值。</li>\n<li>主键索引：一种特殊的唯一索引，但是它不允许出现空值。</li>\n<li>普通索引：唯一索引不同，它允许索引列中存在相同的值。</li>\n<li>联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。</li>\n<li>全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>B+树：适合用作 &gt; 或 &lt; 这样的范围查询，是 MySQL 中最常使用的一种索引实现。<br>R-Tree：用于处理多维数据的数据结构，可以对地理数据进行空间索引。不过实际业务场景中使用的比较少。<br>Hash：散列表索引，效率高于 B+树，但是不支持范围查找或排序等功能。实际使用的也比较少。<br>FullText：全文索引，是一种记录关键字与对应文档关系的倒排索引。</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>需要为每张表单独设置存储引擎。</p>\n<p><img src=\"/img/posts/聚簇索引.png\" alt=\"img\"></p>\n<p><strong>聚簇索引</strong></p>\n<p>B+树叶子节点上的data是行数据。</p>\n<p><strong>非聚簇索引</strong></p>\n<p>B+树的叶子节点上的data不是行数据。而是数据存放的地址或者主键值。</p>\n<p><strong>回表查询</strong></p>\n<p>先通过键值找到主键值，再通过主键值找到行记录，这个过程称为回表查询。</p>\n<p><strong>覆盖索引</strong></p>\n<p>当sql语句的所求查询字段（select列）和查询条件字段（where子句）全都包含在一个索引中（联合索引），可以直接使用索引查询而不需要回表。</p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>5.5版本前默认引擎，支持全文索引，查询效率比较高，但不支持事务、使用<strong>表级锁</strong>。</p>\n<p>主键和辅助键均使用非聚簇索引。</p>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>5.5版本后默认引擎。支持 ACID 事务、支持外键、支持<strong>行级锁</strong>。</p>\n<p>主键使用聚簇索引，辅助键使用非聚簇索引。</p>\n<h3 id=\"TokuDB\"><a href=\"#TokuDB\" class=\"headerlink\" title=\"TokuDB\"></a>TokuDB</h3><p>第三方开发的开源存储引擎，有非常快的写速度，支持数据的压缩存储、可以在线添加索引而不影响读写操作。但是因为压缩的原因，TokuDB 非常适合访问频率不高的数据或历史数据归档，不适合大量读取的场景。</p>\n<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><ul>\n<li>表锁：开销小，加锁快，不会出现死锁；但是锁的粒度大，发生锁冲突的概率高，并发访问效率比较低。</li>\n<li>行级锁：开销大，加锁慢，有可能会出现死锁，不过因为锁定粒度最小，发生锁冲突的概率低，并发访问效率比较高</li>\n<li>共享锁：读锁，其他事务可以读，但不能写。MySQL 可以通过 lock in share mode 语句显示使用共享锁。</li>\n<li>排他锁：写锁，其他事务不能读取，也不能写。对于 UPDATE、DELETE 和 INSERT 语句，InnoDB 会自动给涉及的数据集加排他锁，或者使用 select for update 显示使用排他锁。</li>\n</ul>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.jianshu.com/nb/50366127\" target=\"_blank\" rel=\"external\">姜承尧的MySQL实战宝典</a></p>\n"},{"title":"Mongo","_content":"\n## 索引\n\n* 单键索引\n* 复合索引\n* 多键值索引\n* 地理索引\n* 全文索引\n* 散列索引\n\n* 稀疏索引\n* 唯一索引\n* 过期索引\n\n## 部署方式\n分片\n副本集","source":"_posts/20190107.md","raw":"---\ntitle: Mongo\ncategory: 应用模块\ntag: 数据库\n---\n\n## 索引\n\n* 单键索引\n* 复合索引\n* 多键值索引\n* 地理索引\n* 全文索引\n* 散列索引\n\n* 稀疏索引\n* 唯一索引\n* 过期索引\n\n## 部署方式\n分片\n副本集","slug":"20190107","published":1,"date":"2023-01-03T01:29:04.007Z","updated":"2023-01-03T01:29:04.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn0t0016cwyuh4lezb4j","content":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>单键索引</li>\n<li>复合索引</li>\n<li>多键值索引</li>\n<li>地理索引</li>\n<li>全文索引</li>\n<li><p>散列索引</p>\n</li>\n<li><p>稀疏索引</p>\n</li>\n<li>唯一索引</li>\n<li>过期索引</li>\n</ul>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><p>分片<br>副本集</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>单键索引</li>\n<li>复合索引</li>\n<li>多键值索引</li>\n<li>地理索引</li>\n<li>全文索引</li>\n<li><p>散列索引</p>\n</li>\n<li><p>稀疏索引</p>\n</li>\n<li>唯一索引</li>\n<li>过期索引</li>\n</ul>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><p>分片<br>副本集</p>\n"},{"title":"HBase","_content":"\n## 索引类型\n* 本地索引\n* 全局索引\n* 覆盖索引\n\n## RowKey设计\n* 长度原则\n* 唯一原则\n* 散列原则\n\n## 参考文章\n* [HBase技术细节笔记上](https://cloud.tencent.com/developer/article/1006043)\n* [HBase技术细节笔记下](https://cloud.tencent.com/developer/article/1006044)\n* [我终于看懂了HBase，太不容易了](https://zhuanlan.zhihu.com/p/145551967)\n* [2018 HBase技术总结](https://www.slidestalk.com/HBaseGroup/HBase_ebook28532)","source":"_posts/20181114.md","raw":"---\ntitle: HBase\ncategory: 应用模块\ntag: 数据库\n---\n\n## 索引类型\n* 本地索引\n* 全局索引\n* 覆盖索引\n\n## RowKey设计\n* 长度原则\n* 唯一原则\n* 散列原则\n\n## 参考文章\n* [HBase技术细节笔记上](https://cloud.tencent.com/developer/article/1006043)\n* [HBase技术细节笔记下](https://cloud.tencent.com/developer/article/1006044)\n* [我终于看懂了HBase，太不容易了](https://zhuanlan.zhihu.com/p/145551967)\n* [2018 HBase技术总结](https://www.slidestalk.com/HBaseGroup/HBase_ebook28532)","slug":"20181114","published":1,"date":"2023-01-03T01:29:04.007Z","updated":"2023-01-03T01:29:04.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn100024cwyuuiwx2his","content":"<h2 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h2><ul>\n<li>本地索引</li>\n<li>全局索引</li>\n<li>覆盖索引</li>\n</ul>\n<h2 id=\"RowKey设计\"><a href=\"#RowKey设计\" class=\"headerlink\" title=\"RowKey设计\"></a>RowKey设计</h2><ul>\n<li>长度原则</li>\n<li>唯一原则</li>\n<li>散列原则</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006043\" target=\"_blank\" rel=\"external\">HBase技术细节笔记上</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006044\" target=\"_blank\" rel=\"external\">HBase技术细节笔记下</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/145551967\" target=\"_blank\" rel=\"external\">我终于看懂了HBase，太不容易了</a></li>\n<li><a href=\"https://www.slidestalk.com/HBaseGroup/HBase_ebook28532\" target=\"_blank\" rel=\"external\">2018 HBase技术总结</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h2><ul>\n<li>本地索引</li>\n<li>全局索引</li>\n<li>覆盖索引</li>\n</ul>\n<h2 id=\"RowKey设计\"><a href=\"#RowKey设计\" class=\"headerlink\" title=\"RowKey设计\"></a>RowKey设计</h2><ul>\n<li>长度原则</li>\n<li>唯一原则</li>\n<li>散列原则</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006043\" target=\"_blank\" rel=\"external\">HBase技术细节笔记上</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006044\" target=\"_blank\" rel=\"external\">HBase技术细节笔记下</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/145551967\" target=\"_blank\" rel=\"external\">我终于看懂了HBase，太不容易了</a></li>\n<li><a href=\"https://www.slidestalk.com/HBaseGroup/HBase_ebook28532\" target=\"_blank\" rel=\"external\">2018 HBase技术总结</a></li>\n</ul>\n"},{"title":"分布式&微服务","_content":"\n## 分布式理论\n\n### CAP\n\nConsistency: 一致性，所有节点访问同一份最新的数据副本\nAvailability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\nPartition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。\n在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。\n\n#### CA\n放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。\n#### CP\n选择强一致和分区容错，允许极端情况下出现短时的服务不可用。\nCP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos\n#### AP\n选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。\nAP实现的系统：Eureka、Nacos、Cassandra\n\n### BASE\nBasically Available：基本可用\nSoft-state：软状态\nEventual Consistency：最终一致性\n它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。\n\n## 分布式系统一致性算法\n\n### Paxos\n\n### Raft\n\n### ZAB\n\n## 分布式ID\n\n- 数据库自增ID\n- 数据库集群自增ID\n- 数据库号段模式自增ID\n- Redis原子性自增ID\n- UUID\n- 雪花算法\n- 百度\n- 美团\n- 滴滴\n\n## 分布式事务\n\n[分布式事务](/2021/07/28/20181023/#分布式事务解决方案)\n\n## 微服务\n\n### 解决方案\n\n- Spring Cloud\n- Spring Cloud Alibaba\n\n### 服务注册\n\n- Nacos\n- Zookeeper\n- Consul\n- Eureka\n\n### 负载均衡\n\nRibbon\n\n### 熔断降级\n\n- Hystrix\n- Sentinel\n\n### 网关\n\n- Zuul\n- Kong\n\n### 配置管理\n\n## 云原生服务\n\n## Service Mesh\n\n### Istio\n\n## 容器化\n\n### Docker\n[CentOS 8 部署并使用Docker](https://help.aliyun.com/document_detail/187598.html)\n\n远程开放端口：\n~~~java\nvim /lib/systemd/system/docker.service\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375\nsystemctl daemon-reload\nsystemctl restart docker.service\n        systemctl start docker.service\n~~~\n\ndocker run -it 0525b953d9fe /bin/bash\n\ndocker logs -f -t --tail 10 im\n\nnetstat -ntlp\n\ndocker run -d -p 8080:8080 -p 1883:1883 --name=im 202111292000:latest\n\n### Kubernetes\n\n","source":"_posts/20190112.md","raw":"---\ntitle: 分布式&微服务\ncategory: 综合模块\n---\n\n## 分布式理论\n\n### CAP\n\nConsistency: 一致性，所有节点访问同一份最新的数据副本\nAvailability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\nPartition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。\n在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。\n\n#### CA\n放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。\n#### CP\n选择强一致和分区容错，允许极端情况下出现短时的服务不可用。\nCP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos\n#### AP\n选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。\nAP实现的系统：Eureka、Nacos、Cassandra\n\n### BASE\nBasically Available：基本可用\nSoft-state：软状态\nEventual Consistency：最终一致性\n它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。\n\n## 分布式系统一致性算法\n\n### Paxos\n\n### Raft\n\n### ZAB\n\n## 分布式ID\n\n- 数据库自增ID\n- 数据库集群自增ID\n- 数据库号段模式自增ID\n- Redis原子性自增ID\n- UUID\n- 雪花算法\n- 百度\n- 美团\n- 滴滴\n\n## 分布式事务\n\n[分布式事务](/2021/07/28/20181023/#分布式事务解决方案)\n\n## 微服务\n\n### 解决方案\n\n- Spring Cloud\n- Spring Cloud Alibaba\n\n### 服务注册\n\n- Nacos\n- Zookeeper\n- Consul\n- Eureka\n\n### 负载均衡\n\nRibbon\n\n### 熔断降级\n\n- Hystrix\n- Sentinel\n\n### 网关\n\n- Zuul\n- Kong\n\n### 配置管理\n\n## 云原生服务\n\n## Service Mesh\n\n### Istio\n\n## 容器化\n\n### Docker\n[CentOS 8 部署并使用Docker](https://help.aliyun.com/document_detail/187598.html)\n\n远程开放端口：\n~~~java\nvim /lib/systemd/system/docker.service\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375\nsystemctl daemon-reload\nsystemctl restart docker.service\n        systemctl start docker.service\n~~~\n\ndocker run -it 0525b953d9fe /bin/bash\n\ndocker logs -f -t --tail 10 im\n\nnetstat -ntlp\n\ndocker run -d -p 8080:8080 -p 1883:1883 --name=im 202111292000:latest\n\n### Kubernetes\n\n","slug":"20190112","published":1,"date":"2023-01-03T01:29:04.007Z","updated":"2023-01-03T01:29:04.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn100026cwyuhc9v0t0u","content":"<h2 id=\"分布式理论\"><a href=\"#分布式理论\" class=\"headerlink\" title=\"分布式理论\"></a>分布式理论</h2><h3 id=\"CAP\"><a href=\"#CAP\" class=\"headerlink\" title=\"CAP\"></a>CAP</h3><p>Consistency: 一致性，所有节点访问同一份最新的数据副本<br>Availability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。<br>Partition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。<br>在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。</p>\n<h4 id=\"CA\"><a href=\"#CA\" class=\"headerlink\" title=\"CA\"></a>CA</h4><p>放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。</p>\n<h4 id=\"CP\"><a href=\"#CP\" class=\"headerlink\" title=\"CP\"></a>CP</h4><p>选择强一致和分区容错，允许极端情况下出现短时的服务不可用。<br>CP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos</p>\n<h4 id=\"AP\"><a href=\"#AP\" class=\"headerlink\" title=\"AP\"></a>AP</h4><p>选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。<br>AP实现的系统：Eureka、Nacos、Cassandra</p>\n<h3 id=\"BASE\"><a href=\"#BASE\" class=\"headerlink\" title=\"BASE\"></a>BASE</h3><p>Basically Available：基本可用<br>Soft-state：软状态<br>Eventual Consistency：最终一致性<br>它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。</p>\n<h2 id=\"分布式系统一致性算法\"><a href=\"#分布式系统一致性算法\" class=\"headerlink\" title=\"分布式系统一致性算法\"></a>分布式系统一致性算法</h2><h3 id=\"Paxos\"><a href=\"#Paxos\" class=\"headerlink\" title=\"Paxos\"></a>Paxos</h3><h3 id=\"Raft\"><a href=\"#Raft\" class=\"headerlink\" title=\"Raft\"></a>Raft</h3><h3 id=\"ZAB\"><a href=\"#ZAB\" class=\"headerlink\" title=\"ZAB\"></a>ZAB</h3><h2 id=\"分布式ID\"><a href=\"#分布式ID\" class=\"headerlink\" title=\"分布式ID\"></a>分布式ID</h2><ul>\n<li>数据库自增ID</li>\n<li>数据库集群自增ID</li>\n<li>数据库号段模式自增ID</li>\n<li>Redis原子性自增ID</li>\n<li>UUID</li>\n<li>雪花算法</li>\n<li>百度</li>\n<li>美团</li>\n<li>滴滴</li>\n</ul>\n<h2 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><p><a href=\"/2021/07/28/20181023/#分布式事务解决方案\">分布式事务</a></p>\n<h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li>Spring Cloud</li>\n<li>Spring Cloud Alibaba</li>\n</ul>\n<h3 id=\"服务注册\"><a href=\"#服务注册\" class=\"headerlink\" title=\"服务注册\"></a>服务注册</h3><ul>\n<li>Nacos</li>\n<li>Zookeeper</li>\n<li>Consul</li>\n<li>Eureka</li>\n</ul>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>Ribbon</p>\n<h3 id=\"熔断降级\"><a href=\"#熔断降级\" class=\"headerlink\" title=\"熔断降级\"></a>熔断降级</h3><ul>\n<li>Hystrix</li>\n<li>Sentinel</li>\n</ul>\n<h3 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h3><ul>\n<li>Zuul</li>\n<li>Kong</li>\n</ul>\n<h3 id=\"配置管理\"><a href=\"#配置管理\" class=\"headerlink\" title=\"配置管理\"></a>配置管理</h3><h2 id=\"云原生服务\"><a href=\"#云原生服务\" class=\"headerlink\" title=\"云原生服务\"></a>云原生服务</h2><h2 id=\"Service-Mesh\"><a href=\"#Service-Mesh\" class=\"headerlink\" title=\"Service Mesh\"></a>Service Mesh</h2><h3 id=\"Istio\"><a href=\"#Istio\" class=\"headerlink\" title=\"Istio\"></a>Istio</h3><h2 id=\"容器化\"><a href=\"#容器化\" class=\"headerlink\" title=\"容器化\"></a>容器化</h2><h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><p><a href=\"https://help.aliyun.com/document_detail/187598.html\" target=\"_blank\" rel=\"external\">CentOS 8 部署并使用Docker</a></p>\n<p>远程开放端口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /lib/systemd/system/docker.service</div><div class=\"line\">ExecStart=/usr/bin/dockerd -H fd:<span class=\"comment\">// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375</span></div><div class=\"line\">systemctl daemon-reload</div><div class=\"line\">systemctl restart docker.service</div><div class=\"line\">        systemctl start docker.service</div></pre></td></tr></table></figure></p>\n<p>docker run -it 0525b953d9fe /bin/bash</p>\n<p>docker logs -f -t –tail 10 im</p>\n<p>netstat -ntlp</p>\n<p>docker run -d -p 8080:8080 -p 1883:1883 –name=im 202111292000:latest</p>\n<h3 id=\"Kubernetes\"><a href=\"#Kubernetes\" class=\"headerlink\" title=\"Kubernetes\"></a>Kubernetes</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分布式理论\"><a href=\"#分布式理论\" class=\"headerlink\" title=\"分布式理论\"></a>分布式理论</h2><h3 id=\"CAP\"><a href=\"#CAP\" class=\"headerlink\" title=\"CAP\"></a>CAP</h3><p>Consistency: 一致性，所有节点访问同一份最新的数据副本<br>Availability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。<br>Partition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。<br>在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。</p>\n<h4 id=\"CA\"><a href=\"#CA\" class=\"headerlink\" title=\"CA\"></a>CA</h4><p>放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。</p>\n<h4 id=\"CP\"><a href=\"#CP\" class=\"headerlink\" title=\"CP\"></a>CP</h4><p>选择强一致和分区容错，允许极端情况下出现短时的服务不可用。<br>CP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos</p>\n<h4 id=\"AP\"><a href=\"#AP\" class=\"headerlink\" title=\"AP\"></a>AP</h4><p>选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。<br>AP实现的系统：Eureka、Nacos、Cassandra</p>\n<h3 id=\"BASE\"><a href=\"#BASE\" class=\"headerlink\" title=\"BASE\"></a>BASE</h3><p>Basically Available：基本可用<br>Soft-state：软状态<br>Eventual Consistency：最终一致性<br>它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。</p>\n<h2 id=\"分布式系统一致性算法\"><a href=\"#分布式系统一致性算法\" class=\"headerlink\" title=\"分布式系统一致性算法\"></a>分布式系统一致性算法</h2><h3 id=\"Paxos\"><a href=\"#Paxos\" class=\"headerlink\" title=\"Paxos\"></a>Paxos</h3><h3 id=\"Raft\"><a href=\"#Raft\" class=\"headerlink\" title=\"Raft\"></a>Raft</h3><h3 id=\"ZAB\"><a href=\"#ZAB\" class=\"headerlink\" title=\"ZAB\"></a>ZAB</h3><h2 id=\"分布式ID\"><a href=\"#分布式ID\" class=\"headerlink\" title=\"分布式ID\"></a>分布式ID</h2><ul>\n<li>数据库自增ID</li>\n<li>数据库集群自增ID</li>\n<li>数据库号段模式自增ID</li>\n<li>Redis原子性自增ID</li>\n<li>UUID</li>\n<li>雪花算法</li>\n<li>百度</li>\n<li>美团</li>\n<li>滴滴</li>\n</ul>\n<h2 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><p><a href=\"/2021/07/28/20181023/#分布式事务解决方案\">分布式事务</a></p>\n<h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li>Spring Cloud</li>\n<li>Spring Cloud Alibaba</li>\n</ul>\n<h3 id=\"服务注册\"><a href=\"#服务注册\" class=\"headerlink\" title=\"服务注册\"></a>服务注册</h3><ul>\n<li>Nacos</li>\n<li>Zookeeper</li>\n<li>Consul</li>\n<li>Eureka</li>\n</ul>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>Ribbon</p>\n<h3 id=\"熔断降级\"><a href=\"#熔断降级\" class=\"headerlink\" title=\"熔断降级\"></a>熔断降级</h3><ul>\n<li>Hystrix</li>\n<li>Sentinel</li>\n</ul>\n<h3 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h3><ul>\n<li>Zuul</li>\n<li>Kong</li>\n</ul>\n<h3 id=\"配置管理\"><a href=\"#配置管理\" class=\"headerlink\" title=\"配置管理\"></a>配置管理</h3><h2 id=\"云原生服务\"><a href=\"#云原生服务\" class=\"headerlink\" title=\"云原生服务\"></a>云原生服务</h2><h2 id=\"Service-Mesh\"><a href=\"#Service-Mesh\" class=\"headerlink\" title=\"Service Mesh\"></a>Service Mesh</h2><h3 id=\"Istio\"><a href=\"#Istio\" class=\"headerlink\" title=\"Istio\"></a>Istio</h3><h2 id=\"容器化\"><a href=\"#容器化\" class=\"headerlink\" title=\"容器化\"></a>容器化</h2><h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><p><a href=\"https://help.aliyun.com/document_detail/187598.html\" target=\"_blank\" rel=\"external\">CentOS 8 部署并使用Docker</a></p>\n<p>远程开放端口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /lib/systemd/system/docker.service</div><div class=\"line\">ExecStart=/usr/bin/dockerd -H fd:<span class=\"comment\">// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375</span></div><div class=\"line\">systemctl daemon-reload</div><div class=\"line\">systemctl restart docker.service</div><div class=\"line\">        systemctl start docker.service</div></pre></td></tr></table></figure></p>\n<p>docker run -it 0525b953d9fe /bin/bash</p>\n<p>docker logs -f -t –tail 10 im</p>\n<p>netstat -ntlp</p>\n<p>docker run -d -p 8080:8080 -p 1883:1883 –name=im 202111292000:latest</p>\n<h3 id=\"Kubernetes\"><a href=\"#Kubernetes\" class=\"headerlink\" title=\"Kubernetes\"></a>Kubernetes</h3>"},{"title":"数据格式","_content":"\n## ProtoBuf\nProtocol Buffer 简称 protobuf，google开源的一种数据传输格式，类似于json，但比json的体积要小，速度更快，并且跨平台、跨语言。使用时需编写.proto文件，然后使用protocol.exe生成特定语言的文件。序列化和反序列化需使用同一个文件。\nprotobuf按照Tag + 可选（长度） + 值进行存储，不存储真正的属性名，而是在解析时按照Tag去寻找对应的属性名，然后对其进行赋值。\nProtostuff是为了简化生成中间文件而生的开源项目。\n都是Java语言时，客户端和服务端类名、属性、类型需保持一致。包名也必须一致？\n服务端Java、客户端Python时，客户端需定义Message。对于泛型的处理，需要经过调试才能知道各种类型的Tag。\n同时需注意客户端与服务端的protobuf的版本必须一致，目前主要版本为2.0、3.0。\n\n### 安装（MAC版）\n下载地址：https://github.com/google/protobuf/tags?after=v3.0.0-alpha-1\n\n进入protobuf目录\n- ./configure\n- make\n- sudo make install\n- 检查：protoc --version\n- 编写.proto文件\n- 进入 proto文件目录\n- protoc --java_out=Java文件输出地址 源.proto文件\n## JSON\n\n## Java","source":"_posts/20210728.md","raw":"---\ntitle: 数据格式\ncategory: 基础模块\n---\n\n## ProtoBuf\nProtocol Buffer 简称 protobuf，google开源的一种数据传输格式，类似于json，但比json的体积要小，速度更快，并且跨平台、跨语言。使用时需编写.proto文件，然后使用protocol.exe生成特定语言的文件。序列化和反序列化需使用同一个文件。\nprotobuf按照Tag + 可选（长度） + 值进行存储，不存储真正的属性名，而是在解析时按照Tag去寻找对应的属性名，然后对其进行赋值。\nProtostuff是为了简化生成中间文件而生的开源项目。\n都是Java语言时，客户端和服务端类名、属性、类型需保持一致。包名也必须一致？\n服务端Java、客户端Python时，客户端需定义Message。对于泛型的处理，需要经过调试才能知道各种类型的Tag。\n同时需注意客户端与服务端的protobuf的版本必须一致，目前主要版本为2.0、3.0。\n\n### 安装（MAC版）\n下载地址：https://github.com/google/protobuf/tags?after=v3.0.0-alpha-1\n\n进入protobuf目录\n- ./configure\n- make\n- sudo make install\n- 检查：protoc --version\n- 编写.proto文件\n- 进入 proto文件目录\n- protoc --java_out=Java文件输出地址 源.proto文件\n## JSON\n\n## Java","slug":"20210728","published":1,"date":"2023-01-03T01:29:04.007Z","updated":"2023-01-03T01:29:04.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn110029cwyu2fqa88m4","content":"<h2 id=\"ProtoBuf\"><a href=\"#ProtoBuf\" class=\"headerlink\" title=\"ProtoBuf\"></a>ProtoBuf</h2><p>Protocol Buffer 简称 protobuf，google开源的一种数据传输格式，类似于json，但比json的体积要小，速度更快，并且跨平台、跨语言。使用时需编写.proto文件，然后使用protocol.exe生成特定语言的文件。序列化和反序列化需使用同一个文件。<br>protobuf按照Tag + 可选（长度） + 值进行存储，不存储真正的属性名，而是在解析时按照Tag去寻找对应的属性名，然后对其进行赋值。<br>Protostuff是为了简化生成中间文件而生的开源项目。<br>都是Java语言时，客户端和服务端类名、属性、类型需保持一致。包名也必须一致？<br>服务端Java、客户端Python时，客户端需定义Message。对于泛型的处理，需要经过调试才能知道各种类型的Tag。<br>同时需注意客户端与服务端的protobuf的版本必须一致，目前主要版本为2.0、3.0。</p>\n<h3 id=\"安装（MAC版）\"><a href=\"#安装（MAC版）\" class=\"headerlink\" title=\"安装（MAC版）\"></a>安装（MAC版）</h3><p>下载地址：<a href=\"https://github.com/google/protobuf/tags?after=v3.0.0-alpha-1\" target=\"_blank\" rel=\"external\">https://github.com/google/protobuf/tags?after=v3.0.0-alpha-1</a></p>\n<p>进入protobuf目录</p>\n<ul>\n<li>./configure</li>\n<li>make</li>\n<li>sudo make install</li>\n<li>检查：protoc –version</li>\n<li>编写.proto文件</li>\n<li>进入 proto文件目录</li>\n<li>protoc –java_out=Java文件输出地址 源.proto文件<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2></li>\n</ul>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ProtoBuf\"><a href=\"#ProtoBuf\" class=\"headerlink\" title=\"ProtoBuf\"></a>ProtoBuf</h2><p>Protocol Buffer 简称 protobuf，google开源的一种数据传输格式，类似于json，但比json的体积要小，速度更快，并且跨平台、跨语言。使用时需编写.proto文件，然后使用protocol.exe生成特定语言的文件。序列化和反序列化需使用同一个文件。<br>protobuf按照Tag + 可选（长度） + 值进行存储，不存储真正的属性名，而是在解析时按照Tag去寻找对应的属性名，然后对其进行赋值。<br>Protostuff是为了简化生成中间文件而生的开源项目。<br>都是Java语言时，客户端和服务端类名、属性、类型需保持一致。包名也必须一致？<br>服务端Java、客户端Python时，客户端需定义Message。对于泛型的处理，需要经过调试才能知道各种类型的Tag。<br>同时需注意客户端与服务端的protobuf的版本必须一致，目前主要版本为2.0、3.0。</p>\n<h3 id=\"安装（MAC版）\"><a href=\"#安装（MAC版）\" class=\"headerlink\" title=\"安装（MAC版）\"></a>安装（MAC版）</h3><p>下载地址：<a href=\"https://github.com/google/protobuf/tags?after=v3.0.0-alpha-1\" target=\"_blank\" rel=\"external\">https://github.com/google/protobuf/tags?after=v3.0.0-alpha-1</a></p>\n<p>进入protobuf目录</p>\n<ul>\n<li>./configure</li>\n<li>make</li>\n<li>sudo make install</li>\n<li>检查：protoc –version</li>\n<li>编写.proto文件</li>\n<li>进入 proto文件目录</li>\n<li>protoc –java_out=Java文件输出地址 源.proto文件<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2></li>\n</ul>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2>"},{"title":"IO","_content":"\n## IO模型\n\n### 同步阻塞IO\n\n### 异步阻塞IO\n\n### 同步非阻塞IO\n\n### 异步非阻塞IO\n\n","source":"_posts/20210807.md","raw":"---\ntitle: IO\ncategory: 基础模块\n---\n\n## IO模型\n\n### 同步阻塞IO\n\n### 异步阻塞IO\n\n### 同步非阻塞IO\n\n### 异步非阻塞IO\n\n","slug":"20210807","published":1,"date":"2023-01-03T01:29:04.007Z","updated":"2023-01-03T01:29:04.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn11002ccwyu7z5jhpba","content":"<h2 id=\"IO模型\"><a href=\"#IO模型\" class=\"headerlink\" title=\"IO模型\"></a>IO模型</h2><h3 id=\"同步阻塞IO\"><a href=\"#同步阻塞IO\" class=\"headerlink\" title=\"同步阻塞IO\"></a>同步阻塞IO</h3><h3 id=\"异步阻塞IO\"><a href=\"#异步阻塞IO\" class=\"headerlink\" title=\"异步阻塞IO\"></a>异步阻塞IO</h3><h3 id=\"同步非阻塞IO\"><a href=\"#同步非阻塞IO\" class=\"headerlink\" title=\"同步非阻塞IO\"></a>同步非阻塞IO</h3><h3 id=\"异步非阻塞IO\"><a href=\"#异步非阻塞IO\" class=\"headerlink\" title=\"异步非阻塞IO\"></a>异步非阻塞IO</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"IO模型\"><a href=\"#IO模型\" class=\"headerlink\" title=\"IO模型\"></a>IO模型</h2><h3 id=\"同步阻塞IO\"><a href=\"#同步阻塞IO\" class=\"headerlink\" title=\"同步阻塞IO\"></a>同步阻塞IO</h3><h3 id=\"异步阻塞IO\"><a href=\"#异步阻塞IO\" class=\"headerlink\" title=\"异步阻塞IO\"></a>异步阻塞IO</h3><h3 id=\"同步非阻塞IO\"><a href=\"#同步非阻塞IO\" class=\"headerlink\" title=\"同步非阻塞IO\"></a>同步非阻塞IO</h3><h3 id=\"异步非阻塞IO\"><a href=\"#异步非阻塞IO\" class=\"headerlink\" title=\"异步非阻塞IO\"></a>异步非阻塞IO</h3>"},{"title":"性能优化","_content":"\n## 参考文章\n[Java性能优化实战21讲](https://blog.csdn.net/vincent_wen0766/category_10672039.html)\n\n容易成为瓶颈的资源：CPU、内存、IO\n\n获取代码性能数据的工具\n- nmon\n- jvisualvm\n- JMC\n- Arthas\n- wrk\n","source":"_posts/20210809.md","raw":"---\ntitle: 性能优化\ncategory: 综合模块\n---\n\n## 参考文章\n[Java性能优化实战21讲](https://blog.csdn.net/vincent_wen0766/category_10672039.html)\n\n容易成为瓶颈的资源：CPU、内存、IO\n\n获取代码性能数据的工具\n- nmon\n- jvisualvm\n- JMC\n- Arthas\n- wrk\n","slug":"20210809","published":1,"date":"2023-01-03T01:29:04.007Z","updated":"2023-01-03T01:29:04.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn11002ecwyu0s441iaf","content":"<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://blog.csdn.net/vincent_wen0766/category_10672039.html\" target=\"_blank\" rel=\"external\">Java性能优化实战21讲</a></p>\n<p>容易成为瓶颈的资源：CPU、内存、IO</p>\n<p>获取代码性能数据的工具</p>\n<ul>\n<li>nmon</li>\n<li>jvisualvm</li>\n<li>JMC</li>\n<li>Arthas</li>\n<li>wrk</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://blog.csdn.net/vincent_wen0766/category_10672039.html\" target=\"_blank\" rel=\"external\">Java性能优化实战21讲</a></p>\n<p>容易成为瓶颈的资源：CPU、内存、IO</p>\n<p>获取代码性能数据的工具</p>\n<ul>\n<li>nmon</li>\n<li>jvisualvm</li>\n<li>JMC</li>\n<li>Arthas</li>\n<li>wrk</li>\n</ul>\n"},{"title":"Nacos","_content":"\n## Spring 顶层接口\n- ServiceRegistry ：服务注册顶层接口\n- DiscoveryClient : 服务发现顶层接口\n- LoadBalancerClient：负载均衡顶层接口\n\n## Nacos实现\n~~~java\n@Override\npublic void register(NacosRegistration registration) {\n    if (!registration.isRegisterEnabled()) {\n        logger.info(\"Nacos Registration is disabled...\");\n        return;\n    }\n    if (StringUtils.isEmpty(registration.getServiceId())) {\n        logger.info(\"No service to register for nacos client...\");\n        return;\n    }\n    NamingService namingService = registration.getNacosNamingService();\n    String serviceId = registration.getServiceId();\n    Instance instance = new Instance();\n    instance.setIp(registration.getHost());\n    instance.setPort(registration.getPort());\n    instance.setWeight(registration.getRegisterWeight());\n    instance.setClusterName(registration.getCluster());\n    instance.setMetadata(registration.getMetadata());\n    try {\n        namingService.registerInstance(serviceId, instance);\n        logger.info(\"nacos registry, {} {}:{} register finished\", serviceId,\n                instance.getIp(), instance.getPort());\n    }\n    catch (Exception e) {\n        logger.error(\"nacos registry, {} register failed...{},\", serviceId,\n                registration.toString(), e);\n    }\n}\n~~~\n\n~~~java\n@Override\npublic void registerInstance(String serviceName, Instance instance) throws NacosException {\n    BeatInfo beatInfo = new BeatInfo();\n    beatInfo.setDom(serviceName);\n    beatInfo.setIp(instance.getIp());\n    beatInfo.setPort(instance.getPort());\n    beatInfo.setCluster(instance.getClusterName());\n    beatInfo.setWeight(instance.getWeight());\n    beatInfo.setMetadata(instance.getMetadata());\n    beatReactor.addBeatInfo(serviceName, beatInfo);\n    serverProxy.registerService(serviceName, instance);\n}\n~~~\n\nAbstractLoadBalancerAwareClient（ILoadBalancer，IClientConfig）\n\nLoadBalancerClient choose()方法\n\nDynamicServerListLoadBalancer 继承 BaseLoadBalancer（） 实现 ILoadBalancer\n\nBaseLoadBalancer\n- IClientConfig 客户端或者负载均衡的配置\n- IRule 路由策略\n- IPing ping服务器，判断该server是否可用\n- ServerList 服务器列表\n- ServerListFilter 可过滤服务器列表\n\nDynamicServerListLoadBalancer","source":"_posts/20210818.md","raw":"---\ntitle: Nacos\ncategory: 应用模块\ntag: [中间件]\n---\n\n## Spring 顶层接口\n- ServiceRegistry ：服务注册顶层接口\n- DiscoveryClient : 服务发现顶层接口\n- LoadBalancerClient：负载均衡顶层接口\n\n## Nacos实现\n~~~java\n@Override\npublic void register(NacosRegistration registration) {\n    if (!registration.isRegisterEnabled()) {\n        logger.info(\"Nacos Registration is disabled...\");\n        return;\n    }\n    if (StringUtils.isEmpty(registration.getServiceId())) {\n        logger.info(\"No service to register for nacos client...\");\n        return;\n    }\n    NamingService namingService = registration.getNacosNamingService();\n    String serviceId = registration.getServiceId();\n    Instance instance = new Instance();\n    instance.setIp(registration.getHost());\n    instance.setPort(registration.getPort());\n    instance.setWeight(registration.getRegisterWeight());\n    instance.setClusterName(registration.getCluster());\n    instance.setMetadata(registration.getMetadata());\n    try {\n        namingService.registerInstance(serviceId, instance);\n        logger.info(\"nacos registry, {} {}:{} register finished\", serviceId,\n                instance.getIp(), instance.getPort());\n    }\n    catch (Exception e) {\n        logger.error(\"nacos registry, {} register failed...{},\", serviceId,\n                registration.toString(), e);\n    }\n}\n~~~\n\n~~~java\n@Override\npublic void registerInstance(String serviceName, Instance instance) throws NacosException {\n    BeatInfo beatInfo = new BeatInfo();\n    beatInfo.setDom(serviceName);\n    beatInfo.setIp(instance.getIp());\n    beatInfo.setPort(instance.getPort());\n    beatInfo.setCluster(instance.getClusterName());\n    beatInfo.setWeight(instance.getWeight());\n    beatInfo.setMetadata(instance.getMetadata());\n    beatReactor.addBeatInfo(serviceName, beatInfo);\n    serverProxy.registerService(serviceName, instance);\n}\n~~~\n\nAbstractLoadBalancerAwareClient（ILoadBalancer，IClientConfig）\n\nLoadBalancerClient choose()方法\n\nDynamicServerListLoadBalancer 继承 BaseLoadBalancer（） 实现 ILoadBalancer\n\nBaseLoadBalancer\n- IClientConfig 客户端或者负载均衡的配置\n- IRule 路由策略\n- IPing ping服务器，判断该server是否可用\n- ServerList 服务器列表\n- ServerListFilter 可过滤服务器列表\n\nDynamicServerListLoadBalancer","slug":"20210818","published":1,"date":"2023-01-03T01:29:04.008Z","updated":"2023-01-03T01:29:04.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn12002gcwyuorr7jr1y","content":"<h2 id=\"Spring-顶层接口\"><a href=\"#Spring-顶层接口\" class=\"headerlink\" title=\"Spring 顶层接口\"></a>Spring 顶层接口</h2><ul>\n<li>ServiceRegistry ：服务注册顶层接口</li>\n<li>DiscoveryClient : 服务发现顶层接口</li>\n<li>LoadBalancerClient：负载均衡顶层接口</li>\n</ul>\n<h2 id=\"Nacos实现\"><a href=\"#Nacos实现\" class=\"headerlink\" title=\"Nacos实现\"></a>Nacos实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(NacosRegistration registration)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!registration.isRegisterEnabled()) &#123;</div><div class=\"line\">        logger.info(<span class=\"string\">\"Nacos Registration is disabled...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isEmpty(registration.getServiceId())) &#123;</div><div class=\"line\">        logger.info(<span class=\"string\">\"No service to register for nacos client...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    NamingService namingService = registration.getNacosNamingService();</div><div class=\"line\">    String serviceId = registration.getServiceId();</div><div class=\"line\">    Instance instance = <span class=\"keyword\">new</span> Instance();</div><div class=\"line\">    instance.setIp(registration.getHost());</div><div class=\"line\">    instance.setPort(registration.getPort());</div><div class=\"line\">    instance.setWeight(registration.getRegisterWeight());</div><div class=\"line\">    instance.setClusterName(registration.getCluster());</div><div class=\"line\">    instance.setMetadata(registration.getMetadata());</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        namingService.registerInstance(serviceId, instance);</div><div class=\"line\">        logger.info(<span class=\"string\">\"nacos registry, &#123;&#125; &#123;&#125;:&#123;&#125; register finished\"</span>, serviceId,</div><div class=\"line\">                instance.getIp(), instance.getPort());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        logger.error(<span class=\"string\">\"nacos registry, &#123;&#125; register failed...&#123;&#125;,\"</span>, serviceId,</div><div class=\"line\">                registration.toString(), e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerInstance</span><span class=\"params\">(String serviceName, Instance instance)</span> <span class=\"keyword\">throws</span> NacosException </span>&#123;</div><div class=\"line\">    BeatInfo beatInfo = <span class=\"keyword\">new</span> BeatInfo();</div><div class=\"line\">    beatInfo.setDom(serviceName);</div><div class=\"line\">    beatInfo.setIp(instance.getIp());</div><div class=\"line\">    beatInfo.setPort(instance.getPort());</div><div class=\"line\">    beatInfo.setCluster(instance.getClusterName());</div><div class=\"line\">    beatInfo.setWeight(instance.getWeight());</div><div class=\"line\">    beatInfo.setMetadata(instance.getMetadata());</div><div class=\"line\">    beatReactor.addBeatInfo(serviceName, beatInfo);</div><div class=\"line\">    serverProxy.registerService(serviceName, instance);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>AbstractLoadBalancerAwareClient（ILoadBalancer，IClientConfig）</p>\n<p>LoadBalancerClient choose()方法</p>\n<p>DynamicServerListLoadBalancer 继承 BaseLoadBalancer（） 实现 ILoadBalancer</p>\n<p>BaseLoadBalancer</p>\n<ul>\n<li>IClientConfig 客户端或者负载均衡的配置</li>\n<li>IRule 路由策略</li>\n<li>IPing ping服务器，判断该server是否可用</li>\n<li>ServerList 服务器列表</li>\n<li>ServerListFilter 可过滤服务器列表</li>\n</ul>\n<p>DynamicServerListLoadBalancer</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Spring-顶层接口\"><a href=\"#Spring-顶层接口\" class=\"headerlink\" title=\"Spring 顶层接口\"></a>Spring 顶层接口</h2><ul>\n<li>ServiceRegistry ：服务注册顶层接口</li>\n<li>DiscoveryClient : 服务发现顶层接口</li>\n<li>LoadBalancerClient：负载均衡顶层接口</li>\n</ul>\n<h2 id=\"Nacos实现\"><a href=\"#Nacos实现\" class=\"headerlink\" title=\"Nacos实现\"></a>Nacos实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(NacosRegistration registration)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!registration.isRegisterEnabled()) &#123;</div><div class=\"line\">        logger.info(<span class=\"string\">\"Nacos Registration is disabled...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isEmpty(registration.getServiceId())) &#123;</div><div class=\"line\">        logger.info(<span class=\"string\">\"No service to register for nacos client...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    NamingService namingService = registration.getNacosNamingService();</div><div class=\"line\">    String serviceId = registration.getServiceId();</div><div class=\"line\">    Instance instance = <span class=\"keyword\">new</span> Instance();</div><div class=\"line\">    instance.setIp(registration.getHost());</div><div class=\"line\">    instance.setPort(registration.getPort());</div><div class=\"line\">    instance.setWeight(registration.getRegisterWeight());</div><div class=\"line\">    instance.setClusterName(registration.getCluster());</div><div class=\"line\">    instance.setMetadata(registration.getMetadata());</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        namingService.registerInstance(serviceId, instance);</div><div class=\"line\">        logger.info(<span class=\"string\">\"nacos registry, &#123;&#125; &#123;&#125;:&#123;&#125; register finished\"</span>, serviceId,</div><div class=\"line\">                instance.getIp(), instance.getPort());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        logger.error(<span class=\"string\">\"nacos registry, &#123;&#125; register failed...&#123;&#125;,\"</span>, serviceId,</div><div class=\"line\">                registration.toString(), e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerInstance</span><span class=\"params\">(String serviceName, Instance instance)</span> <span class=\"keyword\">throws</span> NacosException </span>&#123;</div><div class=\"line\">    BeatInfo beatInfo = <span class=\"keyword\">new</span> BeatInfo();</div><div class=\"line\">    beatInfo.setDom(serviceName);</div><div class=\"line\">    beatInfo.setIp(instance.getIp());</div><div class=\"line\">    beatInfo.setPort(instance.getPort());</div><div class=\"line\">    beatInfo.setCluster(instance.getClusterName());</div><div class=\"line\">    beatInfo.setWeight(instance.getWeight());</div><div class=\"line\">    beatInfo.setMetadata(instance.getMetadata());</div><div class=\"line\">    beatReactor.addBeatInfo(serviceName, beatInfo);</div><div class=\"line\">    serverProxy.registerService(serviceName, instance);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>AbstractLoadBalancerAwareClient（ILoadBalancer，IClientConfig）</p>\n<p>LoadBalancerClient choose()方法</p>\n<p>DynamicServerListLoadBalancer 继承 BaseLoadBalancer（） 实现 ILoadBalancer</p>\n<p>BaseLoadBalancer</p>\n<ul>\n<li>IClientConfig 客户端或者负载均衡的配置</li>\n<li>IRule 路由策略</li>\n<li>IPing ping服务器，判断该server是否可用</li>\n<li>ServerList 服务器列表</li>\n<li>ServerListFilter 可过滤服务器列表</li>\n</ul>\n<p>DynamicServerListLoadBalancer</p>\n"},{"title":"特定方法论","_content":"\n## 落地新团队\n- 业务：产品形态、业务流程、走访客户\n- 技术：系统架构、领域模型、代码结构\n- 人：组织结构、人员角色、拜山头\n\n## 晋升述职\n- 罗列事情：提出问题 - 定义问题 - 分析问题 - 解决问题 - 展望未来\n- 价值的背后\n\n## 领域驱动设计\n\n## 技术方案设计\n\n### 高并发\n- 本质：有限资源对应大量的请求\n- 矛盾：有限 和 大量 的矛盾\n- 体系化思考：\n    - 资源：变多（水平扩展）、变强（性能优化）\n    - 请求：减少（错峰、削峰）、更快（少做、高效）\n\n### 异步\n- 本质：数据暂存 + 择机处理\n- 矛盾：自己能力无法支撑实时处理\n- 体系化思考\n    - 数据暂存：内存、文件、数据库......\n    - 择机处理：时间、方式\n\n### 可扩展\n- 本质：占位符思想\n- 矛盾：稳定 VS 变化\n- 体系化思考\n    - 多变中找不变：流程不变、实现细节变化\n    - 点位符：表示、识别、加载、处理\n    \n\n","source":"_posts/20210819.md","raw":"---\ntitle: 特定方法论\ncategory: 综合模块\n---\n\n## 落地新团队\n- 业务：产品形态、业务流程、走访客户\n- 技术：系统架构、领域模型、代码结构\n- 人：组织结构、人员角色、拜山头\n\n## 晋升述职\n- 罗列事情：提出问题 - 定义问题 - 分析问题 - 解决问题 - 展望未来\n- 价值的背后\n\n## 领域驱动设计\n\n## 技术方案设计\n\n### 高并发\n- 本质：有限资源对应大量的请求\n- 矛盾：有限 和 大量 的矛盾\n- 体系化思考：\n    - 资源：变多（水平扩展）、变强（性能优化）\n    - 请求：减少（错峰、削峰）、更快（少做、高效）\n\n### 异步\n- 本质：数据暂存 + 择机处理\n- 矛盾：自己能力无法支撑实时处理\n- 体系化思考\n    - 数据暂存：内存、文件、数据库......\n    - 择机处理：时间、方式\n\n### 可扩展\n- 本质：占位符思想\n- 矛盾：稳定 VS 变化\n- 体系化思考\n    - 多变中找不变：流程不变、实现细节变化\n    - 点位符：表示、识别、加载、处理\n    \n\n","slug":"20210819","published":1,"date":"2023-01-03T01:29:04.008Z","updated":"2023-01-03T01:29:04.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn12002icwyuvhrfc4dj","content":"<h2 id=\"落地新团队\"><a href=\"#落地新团队\" class=\"headerlink\" title=\"落地新团队\"></a>落地新团队</h2><ul>\n<li>业务：产品形态、业务流程、走访客户</li>\n<li>技术：系统架构、领域模型、代码结构</li>\n<li>人：组织结构、人员角色、拜山头</li>\n</ul>\n<h2 id=\"晋升述职\"><a href=\"#晋升述职\" class=\"headerlink\" title=\"晋升述职\"></a>晋升述职</h2><ul>\n<li>罗列事情：提出问题 - 定义问题 - 分析问题 - 解决问题 - 展望未来</li>\n<li>价值的背后</li>\n</ul>\n<h2 id=\"领域驱动设计\"><a href=\"#领域驱动设计\" class=\"headerlink\" title=\"领域驱动设计\"></a>领域驱动设计</h2><h2 id=\"技术方案设计\"><a href=\"#技术方案设计\" class=\"headerlink\" title=\"技术方案设计\"></a>技术方案设计</h2><h3 id=\"高并发\"><a href=\"#高并发\" class=\"headerlink\" title=\"高并发\"></a>高并发</h3><ul>\n<li>本质：有限资源对应大量的请求</li>\n<li>矛盾：有限 和 大量 的矛盾</li>\n<li>体系化思考：<ul>\n<li>资源：变多（水平扩展）、变强（性能优化）</li>\n<li>请求：减少（错峰、削峰）、更快（少做、高效）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><ul>\n<li>本质：数据暂存 + 择机处理</li>\n<li>矛盾：自己能力无法支撑实时处理</li>\n<li>体系化思考<ul>\n<li>数据暂存：内存、文件、数据库……</li>\n<li>择机处理：时间、方式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"可扩展\"><a href=\"#可扩展\" class=\"headerlink\" title=\"可扩展\"></a>可扩展</h3><ul>\n<li>本质：占位符思想</li>\n<li>矛盾：稳定 VS 变化</li>\n<li>体系化思考<ul>\n<li>多变中找不变：流程不变、实现细节变化</li>\n<li>点位符：表示、识别、加载、处理</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"落地新团队\"><a href=\"#落地新团队\" class=\"headerlink\" title=\"落地新团队\"></a>落地新团队</h2><ul>\n<li>业务：产品形态、业务流程、走访客户</li>\n<li>技术：系统架构、领域模型、代码结构</li>\n<li>人：组织结构、人员角色、拜山头</li>\n</ul>\n<h2 id=\"晋升述职\"><a href=\"#晋升述职\" class=\"headerlink\" title=\"晋升述职\"></a>晋升述职</h2><ul>\n<li>罗列事情：提出问题 - 定义问题 - 分析问题 - 解决问题 - 展望未来</li>\n<li>价值的背后</li>\n</ul>\n<h2 id=\"领域驱动设计\"><a href=\"#领域驱动设计\" class=\"headerlink\" title=\"领域驱动设计\"></a>领域驱动设计</h2><h2 id=\"技术方案设计\"><a href=\"#技术方案设计\" class=\"headerlink\" title=\"技术方案设计\"></a>技术方案设计</h2><h3 id=\"高并发\"><a href=\"#高并发\" class=\"headerlink\" title=\"高并发\"></a>高并发</h3><ul>\n<li>本质：有限资源对应大量的请求</li>\n<li>矛盾：有限 和 大量 的矛盾</li>\n<li>体系化思考：<ul>\n<li>资源：变多（水平扩展）、变强（性能优化）</li>\n<li>请求：减少（错峰、削峰）、更快（少做、高效）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><ul>\n<li>本质：数据暂存 + 择机处理</li>\n<li>矛盾：自己能力无法支撑实时处理</li>\n<li>体系化思考<ul>\n<li>数据暂存：内存、文件、数据库……</li>\n<li>择机处理：时间、方式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"可扩展\"><a href=\"#可扩展\" class=\"headerlink\" title=\"可扩展\"></a>可扩展</h3><ul>\n<li>本质：占位符思想</li>\n<li>矛盾：稳定 VS 变化</li>\n<li>体系化思考<ul>\n<li>多变中找不变：流程不变、实现细节变化</li>\n<li>点位符：表示、识别、加载、处理</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Flink","_content":"\n[官方文档](https://nightlies.apache.org/flink/flink-docs-release-1.15/zh/)\n\n\n\n","source":"_posts/20220514.md","raw":"---\ntitle: Flink\ncategory: 应用模块\ntag: [流式计算]\n---\n\n[官方文档](https://nightlies.apache.org/flink/flink-docs-release-1.15/zh/)\n\n\n\n","slug":"20220514","published":1,"date":"2023-01-03T01:29:04.008Z","updated":"2023-01-03T01:29:04.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn12002lcwyuwabi984g","content":"<p><a href=\"https://nightlies.apache.org/flink/flink-docs-release-1.15/zh/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://nightlies.apache.org/flink/flink-docs-release-1.15/zh/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n"},{"title":"XXL-JOB","_content":"\n## 步骤\n\n### 新建执行器\n\n### 新建任务\n1. 执行器\n2. 运行模式\n3. JobHandler\n4. 任务参数\n\n## SpringBoot集成\n~~~java\n@JobHandler(\"对应任务中的JobHandler\")\npublic class MyJobHandler extends IJobHandler {\n    @Override\n    public ReturnT<String> execute(String s) {\n        // s 为任务参数\n    }\n}\n~~~","source":"_posts/20210907.md","raw":"---\ntitle: XXL-JOB\ncategory: 应用模块\ntag: [中间件]\n---\n\n## 步骤\n\n### 新建执行器\n\n### 新建任务\n1. 执行器\n2. 运行模式\n3. JobHandler\n4. 任务参数\n\n## SpringBoot集成\n~~~java\n@JobHandler(\"对应任务中的JobHandler\")\npublic class MyJobHandler extends IJobHandler {\n    @Override\n    public ReturnT<String> execute(String s) {\n        // s 为任务参数\n    }\n}\n~~~","slug":"20210907","published":1,"date":"2023-01-03T01:29:04.008Z","updated":"2023-01-03T01:29:04.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn13002ncwyuy4dxwjui","content":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"新建执行器\"><a href=\"#新建执行器\" class=\"headerlink\" title=\"新建执行器\"></a>新建执行器</h3><h3 id=\"新建任务\"><a href=\"#新建任务\" class=\"headerlink\" title=\"新建任务\"></a>新建任务</h3><ol>\n<li>执行器</li>\n<li>运行模式</li>\n<li>JobHandler</li>\n<li>任务参数</li>\n</ol>\n<h2 id=\"SpringBoot集成\"><a href=\"#SpringBoot集成\" class=\"headerlink\" title=\"SpringBoot集成\"></a>SpringBoot集成</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@JobHandler</span>(<span class=\"string\">\"对应任务中的JobHandler\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyJobHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">IJobHandler</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ReturnT&lt;String&gt; <span class=\"title\">execute</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// s 为任务参数</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"新建执行器\"><a href=\"#新建执行器\" class=\"headerlink\" title=\"新建执行器\"></a>新建执行器</h3><h3 id=\"新建任务\"><a href=\"#新建任务\" class=\"headerlink\" title=\"新建任务\"></a>新建任务</h3><ol>\n<li>执行器</li>\n<li>运行模式</li>\n<li>JobHandler</li>\n<li>任务参数</li>\n</ol>\n<h2 id=\"SpringBoot集成\"><a href=\"#SpringBoot集成\" class=\"headerlink\" title=\"SpringBoot集成\"></a>SpringBoot集成</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@JobHandler</span>(<span class=\"string\">\"对应任务中的JobHandler\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyJobHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">IJobHandler</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ReturnT&lt;String&gt; <span class=\"title\">execute</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// s 为任务参数</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"仙豆智能","_content":"\n## 实时车况\n![车辆监控架构图](/img/posts/车辆监控平台架构.png)\n\n1. 销售车辆50W，同时在线数高峰：6W。\n2. 车辆正常情况下每10s发送一条报文到监控平台。\n3. 数据情况：\n    1. 车辆原始报文大小1K。\n    2. 车辆解析后车况大小6K。\n    3. 平均一台车每天会产生10MB的数据。\n    4. 系统每天会产生5T的数据。\n    5. 同时系统有7.2亿行的数据需要写入到数据库。\n4. 系统并发量\n    1. 持续并发量：6000。\n    2. 长连接：6W。\n    3. 每秒6M的原始数据需要被解析。\n    4. 每秒35M的解析数据需要被存储。\n\n## 蓝牙钥匙\n\n## 车辆权限\n\n## 自动泊车\n\n## DVR\n\n\n\n","source":"_posts/20210803.md","raw":"---\ntitle: 仙豆智能\ncategory: 综合模块\ntag: 项目\n---\n\n## 实时车况\n![车辆监控架构图](/img/posts/车辆监控平台架构.png)\n\n1. 销售车辆50W，同时在线数高峰：6W。\n2. 车辆正常情况下每10s发送一条报文到监控平台。\n3. 数据情况：\n    1. 车辆原始报文大小1K。\n    2. 车辆解析后车况大小6K。\n    3. 平均一台车每天会产生10MB的数据。\n    4. 系统每天会产生5T的数据。\n    5. 同时系统有7.2亿行的数据需要写入到数据库。\n4. 系统并发量\n    1. 持续并发量：6000。\n    2. 长连接：6W。\n    3. 每秒6M的原始数据需要被解析。\n    4. 每秒35M的解析数据需要被存储。\n\n## 蓝牙钥匙\n\n## 车辆权限\n\n## 自动泊车\n\n## DVR\n\n\n\n","slug":"20210803","published":1,"date":"2023-01-03T01:29:04.007Z","updated":"2023-01-03T01:29:04.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn13002qcwyuh0nrt2dn","content":"<h2 id=\"实时车况\"><a href=\"#实时车况\" class=\"headerlink\" title=\"实时车况\"></a>实时车况</h2><p><img src=\"/img/posts/车辆监控平台架构.png\" alt=\"车辆监控架构图\"></p>\n<ol>\n<li>销售车辆50W，同时在线数高峰：6W。</li>\n<li>车辆正常情况下每10s发送一条报文到监控平台。</li>\n<li>数据情况：<ol>\n<li>车辆原始报文大小1K。</li>\n<li>车辆解析后车况大小6K。</li>\n<li>平均一台车每天会产生10MB的数据。</li>\n<li>系统每天会产生5T的数据。</li>\n<li>同时系统有7.2亿行的数据需要写入到数据库。</li>\n</ol>\n</li>\n<li>系统并发量<ol>\n<li>持续并发量：6000。</li>\n<li>长连接：6W。</li>\n<li>每秒6M的原始数据需要被解析。</li>\n<li>每秒35M的解析数据需要被存储。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"蓝牙钥匙\"><a href=\"#蓝牙钥匙\" class=\"headerlink\" title=\"蓝牙钥匙\"></a>蓝牙钥匙</h2><h2 id=\"车辆权限\"><a href=\"#车辆权限\" class=\"headerlink\" title=\"车辆权限\"></a>车辆权限</h2><h2 id=\"自动泊车\"><a href=\"#自动泊车\" class=\"headerlink\" title=\"自动泊车\"></a>自动泊车</h2><h2 id=\"DVR\"><a href=\"#DVR\" class=\"headerlink\" title=\"DVR\"></a>DVR</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实时车况\"><a href=\"#实时车况\" class=\"headerlink\" title=\"实时车况\"></a>实时车况</h2><p><img src=\"/img/posts/车辆监控平台架构.png\" alt=\"车辆监控架构图\"></p>\n<ol>\n<li>销售车辆50W，同时在线数高峰：6W。</li>\n<li>车辆正常情况下每10s发送一条报文到监控平台。</li>\n<li>数据情况：<ol>\n<li>车辆原始报文大小1K。</li>\n<li>车辆解析后车况大小6K。</li>\n<li>平均一台车每天会产生10MB的数据。</li>\n<li>系统每天会产生5T的数据。</li>\n<li>同时系统有7.2亿行的数据需要写入到数据库。</li>\n</ol>\n</li>\n<li>系统并发量<ol>\n<li>持续并发量：6000。</li>\n<li>长连接：6W。</li>\n<li>每秒6M的原始数据需要被解析。</li>\n<li>每秒35M的解析数据需要被存储。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"蓝牙钥匙\"><a href=\"#蓝牙钥匙\" class=\"headerlink\" title=\"蓝牙钥匙\"></a>蓝牙钥匙</h2><h2 id=\"车辆权限\"><a href=\"#车辆权限\" class=\"headerlink\" title=\"车辆权限\"></a>车辆权限</h2><h2 id=\"自动泊车\"><a href=\"#自动泊车\" class=\"headerlink\" title=\"自动泊车\"></a>自动泊车</h2><h2 id=\"DVR\"><a href=\"#DVR\" class=\"headerlink\" title=\"DVR\"></a>DVR</h2>"},{"title":"Netty","_content":"Netty 是一个高性能的异步事件驱动的 NIO 框架，它对消息的处理采用串行无锁化设计，提供了对 TCP、UDP 和文件传输的支持。\n\n内置了多种 encoder 和 decoder 实现来解决 TCP 粘包问题。\n\n处理消息时使用了池化的缓冲池 ByteBuffers，提高性能。\n\n结合内存零 copy 机制，减少了对象的创建，降低了 GC 的压力。\n<!--more-->\n\n\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRCAOMXfAACEn9bOiF8679.png)\n\n## 线程模型\n\nNetty 线程模型采用“服务端监听线程”和“IO 线程”分离的方式。\n\nBoss 线程组负责监听事件，创建 Socket 并绑定到 Worker 线程组。Worker 线程组负责 IO 处理。\n\n线程组由 EventLoopGroup 实现，其中包含了多个 EventLoop 事件处理器，每个 EventLoop 包含一个处理线程。\n\n通常情况下在 NIO 非阻塞模式下，Netty 为每个 Channel 分配一个 EventLoop，并且它的整个生命周期中的事件都由这个 EventLoop 来处理。一个 EventLoop 可以绑定多个 Channel。\n\n## 处理模型\n\nNetty4 中 Channel 的读写事件都是由 Worker 线程来处理。请求处理中最主要的就是 ChannelPipeline，其中包含了一组 ChannelHandler。\n\n这些 Handler 组成了责任链模式，依次对 Channel 中的消息进行处理。一般接收消息时，Pipeline 处理完成会把消息提交到业务线程池进行处理，当业务线程处理完成时，会封装成 Task，提交回 Channel 对应的 EventLoop 来写回返回值。\n\n\n\n## 主要概念\n\n- Channel\n- ChannelHandler\n- ChannelPipeline\n- EventLoop\n- BootStrap\n\n## 零内存复制\n\n使用堆外内存来避免在 Socket 读写时缓冲数据在堆外与堆内进行频繁复制；使用 CompositeByteBuf 来减少多个小的 buffer 合并时产生的内存复制；\n\n使用 FileRegion 实现文件传输的零拷贝等。\n\n## 粘包与半包\n\nFixedLengthFrameDecoder 用来解决固定大小数据包的粘包问题\n\nLineBasedFrameDecoder 适合对文本进行按行分包\n\nDelimiterBasedFrameDecoder 适合按特殊字符作为分包标记的场景\n\nLengthFieldBasedFrameDecoder 可以支持复杂的自定义协议分包\n\n## Netty3 和 Netty4","source":"_posts/20210730.md","raw":"---\ntitle: Netty\ncategory: 应用模块\ntag: 框架\n---\nNetty 是一个高性能的异步事件驱动的 NIO 框架，它对消息的处理采用串行无锁化设计，提供了对 TCP、UDP 和文件传输的支持。\n\n内置了多种 encoder 和 decoder 实现来解决 TCP 粘包问题。\n\n处理消息时使用了池化的缓冲池 ByteBuffers，提高性能。\n\n结合内存零 copy 机制，减少了对象的创建，降低了 GC 的压力。\n<!--more-->\n\n\n\n![img](http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRCAOMXfAACEn9bOiF8679.png)\n\n## 线程模型\n\nNetty 线程模型采用“服务端监听线程”和“IO 线程”分离的方式。\n\nBoss 线程组负责监听事件，创建 Socket 并绑定到 Worker 线程组。Worker 线程组负责 IO 处理。\n\n线程组由 EventLoopGroup 实现，其中包含了多个 EventLoop 事件处理器，每个 EventLoop 包含一个处理线程。\n\n通常情况下在 NIO 非阻塞模式下，Netty 为每个 Channel 分配一个 EventLoop，并且它的整个生命周期中的事件都由这个 EventLoop 来处理。一个 EventLoop 可以绑定多个 Channel。\n\n## 处理模型\n\nNetty4 中 Channel 的读写事件都是由 Worker 线程来处理。请求处理中最主要的就是 ChannelPipeline，其中包含了一组 ChannelHandler。\n\n这些 Handler 组成了责任链模式，依次对 Channel 中的消息进行处理。一般接收消息时，Pipeline 处理完成会把消息提交到业务线程池进行处理，当业务线程处理完成时，会封装成 Task，提交回 Channel 对应的 EventLoop 来写回返回值。\n\n\n\n## 主要概念\n\n- Channel\n- ChannelHandler\n- ChannelPipeline\n- EventLoop\n- BootStrap\n\n## 零内存复制\n\n使用堆外内存来避免在 Socket 读写时缓冲数据在堆外与堆内进行频繁复制；使用 CompositeByteBuf 来减少多个小的 buffer 合并时产生的内存复制；\n\n使用 FileRegion 实现文件传输的零拷贝等。\n\n## 粘包与半包\n\nFixedLengthFrameDecoder 用来解决固定大小数据包的粘包问题\n\nLineBasedFrameDecoder 适合对文本进行按行分包\n\nDelimiterBasedFrameDecoder 适合按特殊字符作为分包标记的场景\n\nLengthFieldBasedFrameDecoder 可以支持复杂的自定义协议分包\n\n## Netty3 和 Netty4","slug":"20210730","published":1,"date":"2023-01-03T01:29:04.007Z","updated":"2023-01-03T01:29:04.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcogfn13002tcwyu7kqa3hyo","content":"<p>Netty 是一个高性能的异步事件驱动的 NIO 框架，它对消息的处理采用串行无锁化设计，提供了对 TCP、UDP 和文件传输的支持。</p>\n<p>内置了多种 encoder 和 decoder 实现来解决 TCP 粘包问题。</p>\n<p>处理消息时使用了池化的缓冲池 ByteBuffers，提高性能。</p>\n<p>结合内存零 copy 机制，减少了对象的创建，降低了 GC 的压力。<br><a id=\"more\"></a></p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRCAOMXfAACEn9bOiF8679.png\" alt=\"img\"></p>\n<h2 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h2><p>Netty 线程模型采用“服务端监听线程”和“IO 线程”分离的方式。</p>\n<p>Boss 线程组负责监听事件，创建 Socket 并绑定到 Worker 线程组。Worker 线程组负责 IO 处理。</p>\n<p>线程组由 EventLoopGroup 实现，其中包含了多个 EventLoop 事件处理器，每个 EventLoop 包含一个处理线程。</p>\n<p>通常情况下在 NIO 非阻塞模式下，Netty 为每个 Channel 分配一个 EventLoop，并且它的整个生命周期中的事件都由这个 EventLoop 来处理。一个 EventLoop 可以绑定多个 Channel。</p>\n<h2 id=\"处理模型\"><a href=\"#处理模型\" class=\"headerlink\" title=\"处理模型\"></a>处理模型</h2><p>Netty4 中 Channel 的读写事件都是由 Worker 线程来处理。请求处理中最主要的就是 ChannelPipeline，其中包含了一组 ChannelHandler。</p>\n<p>这些 Handler 组成了责任链模式，依次对 Channel 中的消息进行处理。一般接收消息时，Pipeline 处理完成会把消息提交到业务线程池进行处理，当业务线程处理完成时，会封装成 Task，提交回 Channel 对应的 EventLoop 来写回返回值。</p>\n<h2 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念\"></a>主要概念</h2><ul>\n<li>Channel</li>\n<li>ChannelHandler</li>\n<li>ChannelPipeline</li>\n<li>EventLoop</li>\n<li>BootStrap</li>\n</ul>\n<h2 id=\"零内存复制\"><a href=\"#零内存复制\" class=\"headerlink\" title=\"零内存复制\"></a>零内存复制</h2><p>使用堆外内存来避免在 Socket 读写时缓冲数据在堆外与堆内进行频繁复制；使用 CompositeByteBuf 来减少多个小的 buffer 合并时产生的内存复制；</p>\n<p>使用 FileRegion 实现文件传输的零拷贝等。</p>\n<h2 id=\"粘包与半包\"><a href=\"#粘包与半包\" class=\"headerlink\" title=\"粘包与半包\"></a>粘包与半包</h2><p>FixedLengthFrameDecoder 用来解决固定大小数据包的粘包问题</p>\n<p>LineBasedFrameDecoder 适合对文本进行按行分包</p>\n<p>DelimiterBasedFrameDecoder 适合按特殊字符作为分包标记的场景</p>\n<p>LengthFieldBasedFrameDecoder 可以支持复杂的自定义协议分包</p>\n<h2 id=\"Netty3-和-Netty4\"><a href=\"#Netty3-和-Netty4\" class=\"headerlink\" title=\"Netty3 和 Netty4\"></a>Netty3 和 Netty4</h2>","site":{"data":{}},"excerpt":"<p>Netty 是一个高性能的异步事件驱动的 NIO 框架，它对消息的处理采用串行无锁化设计，提供了对 TCP、UDP 和文件传输的支持。</p>\n<p>内置了多种 encoder 和 decoder 实现来解决 TCP 粘包问题。</p>\n<p>处理消息时使用了池化的缓冲池 ByteBuffers，提高性能。</p>\n<p>结合内存零 copy 机制，减少了对象的创建，降低了 GC 的压力。<br>","more":"</p>\n<p><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRCAOMXfAACEn9bOiF8679.png\" alt=\"img\"></p>\n<h2 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h2><p>Netty 线程模型采用“服务端监听线程”和“IO 线程”分离的方式。</p>\n<p>Boss 线程组负责监听事件，创建 Socket 并绑定到 Worker 线程组。Worker 线程组负责 IO 处理。</p>\n<p>线程组由 EventLoopGroup 实现，其中包含了多个 EventLoop 事件处理器，每个 EventLoop 包含一个处理线程。</p>\n<p>通常情况下在 NIO 非阻塞模式下，Netty 为每个 Channel 分配一个 EventLoop，并且它的整个生命周期中的事件都由这个 EventLoop 来处理。一个 EventLoop 可以绑定多个 Channel。</p>\n<h2 id=\"处理模型\"><a href=\"#处理模型\" class=\"headerlink\" title=\"处理模型\"></a>处理模型</h2><p>Netty4 中 Channel 的读写事件都是由 Worker 线程来处理。请求处理中最主要的就是 ChannelPipeline，其中包含了一组 ChannelHandler。</p>\n<p>这些 Handler 组成了责任链模式，依次对 Channel 中的消息进行处理。一般接收消息时，Pipeline 处理完成会把消息提交到业务线程池进行处理，当业务线程处理完成时，会封装成 Task，提交回 Channel 对应的 EventLoop 来写回返回值。</p>\n<h2 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念\"></a>主要概念</h2><ul>\n<li>Channel</li>\n<li>ChannelHandler</li>\n<li>ChannelPipeline</li>\n<li>EventLoop</li>\n<li>BootStrap</li>\n</ul>\n<h2 id=\"零内存复制\"><a href=\"#零内存复制\" class=\"headerlink\" title=\"零内存复制\"></a>零内存复制</h2><p>使用堆外内存来避免在 Socket 读写时缓冲数据在堆外与堆内进行频繁复制；使用 CompositeByteBuf 来减少多个小的 buffer 合并时产生的内存复制；</p>\n<p>使用 FileRegion 实现文件传输的零拷贝等。</p>\n<h2 id=\"粘包与半包\"><a href=\"#粘包与半包\" class=\"headerlink\" title=\"粘包与半包\"></a>粘包与半包</h2><p>FixedLengthFrameDecoder 用来解决固定大小数据包的粘包问题</p>\n<p>LineBasedFrameDecoder 适合对文本进行按行分包</p>\n<p>DelimiterBasedFrameDecoder 适合按特殊字符作为分包标记的场景</p>\n<p>LengthFieldBasedFrameDecoder 可以支持复杂的自定义协议分包</p>\n<h2 id=\"Netty3-和-Netty4\"><a href=\"#Netty3-和-Netty4\" class=\"headerlink\" title=\"Netty3 和 Netty4\"></a>Netty3 和 Netty4</h2>"},{"title":"Arthas","_content":"\n\n\n下载：\n\nwget https://arthas.aliyun.com/arthas-boot.jar\n\n\n\n启动：\n\njava -jar arthas-boot.jar\n\n\n\n## 耗时分析\n\ntrace 全限定类名 方法名 '#cost > 毫秒数'\n\n\n\n","source":"_posts/20230215.md","raw":"---\ntitle: Arthas\ncategory: 应用模块\ntag: [工具]\n---\n\n\n\n下载：\n\nwget https://arthas.aliyun.com/arthas-boot.jar\n\n\n\n启动：\n\njava -jar arthas-boot.jar\n\n\n\n## 耗时分析\n\ntrace 全限定类名 方法名 '#cost > 毫秒数'\n\n\n\n","slug":"20230215","published":1,"date":"2023-02-15T01:31:13.417Z","updated":"2023-02-15T02:00:41.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle6ehcem00001xyudbfmnqdb","content":"<p>下载：</p>\n<p>wget <a href=\"https://arthas.aliyun.com/arthas-boot.jar\" target=\"_blank\" rel=\"external\">https://arthas.aliyun.com/arthas-boot.jar</a></p>\n<p>启动：</p>\n<p>java -jar arthas-boot.jar</p>\n<h2 id=\"耗时分析\"><a href=\"#耗时分析\" class=\"headerlink\" title=\"耗时分析\"></a>耗时分析</h2><p>trace 全限定类名 方法名 ‘#cost &gt; 毫秒数’</p>\n","site":{"data":{}},"excerpt":"","more":"<p>下载：</p>\n<p>wget <a href=\"https://arthas.aliyun.com/arthas-boot.jar\" target=\"_blank\" rel=\"external\">https://arthas.aliyun.com/arthas-boot.jar</a></p>\n<p>启动：</p>\n<p>java -jar arthas-boot.jar</p>\n<h2 id=\"耗时分析\"><a href=\"#耗时分析\" class=\"headerlink\" title=\"耗时分析\"></a>耗时分析</h2><p>trace 全限定类名 方法名 ‘#cost &gt; 毫秒数’</p>\n"},{"title":"常见问题","_content":"\n## 多个日志实现\n\n```Java\nSLF4J: Class path contains multiple SLF4J bindings.\nSIF4J : See http://www.s1f4j.org/codes .html#multiple bindings for an explanation.\nSLF4J: Actual binding is of type [ch. gos.logback.classic.util.ContextSelectorstaticBinder]\n```\n\n解决办法：删掉多余的日志实现依赖","source":"_posts/20230218.md","raw":"---\ntitle: 常见问题\ncategory: 综合模块\n---\n\n## 多个日志实现\n\n```Java\nSLF4J: Class path contains multiple SLF4J bindings.\nSIF4J : See http://www.s1f4j.org/codes .html#multiple bindings for an explanation.\nSLF4J: Actual binding is of type [ch. gos.logback.classic.util.ContextSelectorstaticBinder]\n```\n\n解决办法：删掉多余的日志实现依赖","slug":"20230218","published":1,"date":"2023-02-15T05:27:39.835Z","updated":"2023-02-15T05:33:54.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle6ehcep00011xyu5puow30a","content":"<h2 id=\"多个日志实现\"><a href=\"#多个日志实现\" class=\"headerlink\" title=\"多个日志实现\"></a>多个日志实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SLF4J: Class path contains multiple SLF4J bindings.</div><div class=\"line\">SIF4J : See http:<span class=\"comment\">//www.s1f4j.org/codes .html#multiple bindings for an explanation.</span></div><div class=\"line\">SLF4J: Actual binding is of type [ch. gos.logback.classic.util.ContextSelectorstaticBinder]</div></pre></td></tr></table></figure>\n<p>解决办法：删掉多余的日志实现依赖</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"多个日志实现\"><a href=\"#多个日志实现\" class=\"headerlink\" title=\"多个日志实现\"></a>多个日志实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SLF4J: Class path contains multiple SLF4J bindings.</div><div class=\"line\">SIF4J : See http:<span class=\"comment\">//www.s1f4j.org/codes .html#multiple bindings for an explanation.</span></div><div class=\"line\">SLF4J: Actual binding is of type [ch. gos.logback.classic.util.ContextSelectorstaticBinder]</div></pre></td></tr></table></figure>\n<p>解决办法：删掉多余的日志实现依赖</p>\n"},{"title":"车联网","_content":"\n## 专有名词\n\n#### VP（Verify Prototype）：样车确认\n\n#### TT（Tooling Trial）：工装测试\n\n#### PP（Pilot Poduction）：试生产\n\n#### SOP（Standard Operation Procedure）：量产\n\n#### J1（Job 1）：量产\n\n#### CC（Code Complete）：软件提测\n\n#### RC（Release Candidate）：软件发布","source":"_posts/20230217.md","raw":"---\ntitle: 车联网\ncategory: 综合模块\ntag: [车联网]\n---\n\n## 专有名词\n\n#### VP（Verify Prototype）：样车确认\n\n#### TT（Tooling Trial）：工装测试\n\n#### PP（Pilot Poduction）：试生产\n\n#### SOP（Standard Operation Procedure）：量产\n\n#### J1（Job 1）：量产\n\n#### CC（Code Complete）：软件提测\n\n#### RC（Release Candidate）：软件发布","slug":"20230217","published":1,"date":"2023-02-15T05:06:22.154Z","updated":"2023-02-15T05:27:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle6ehceu00061xyu54bs3ans","content":"<h2 id=\"专有名词\"><a href=\"#专有名词\" class=\"headerlink\" title=\"专有名词\"></a>专有名词</h2><h4 id=\"VP（Verify-Prototype）：样车确认\"><a href=\"#VP（Verify-Prototype）：样车确认\" class=\"headerlink\" title=\"VP（Verify Prototype）：样车确认\"></a>VP（Verify Prototype）：样车确认</h4><h4 id=\"TT（Tooling-Trial）：工装测试\"><a href=\"#TT（Tooling-Trial）：工装测试\" class=\"headerlink\" title=\"TT（Tooling Trial）：工装测试\"></a>TT（Tooling Trial）：工装测试</h4><h4 id=\"PP（Pilot-Poduction）：试生产\"><a href=\"#PP（Pilot-Poduction）：试生产\" class=\"headerlink\" title=\"PP（Pilot Poduction）：试生产\"></a>PP（Pilot Poduction）：试生产</h4><h4 id=\"SOP（Standard-Operation-Procedure）：量产\"><a href=\"#SOP（Standard-Operation-Procedure）：量产\" class=\"headerlink\" title=\"SOP（Standard Operation Procedure）：量产\"></a>SOP（Standard Operation Procedure）：量产</h4><h4 id=\"J1（Job-1）：量产\"><a href=\"#J1（Job-1）：量产\" class=\"headerlink\" title=\"J1（Job 1）：量产\"></a>J1（Job 1）：量产</h4><h4 id=\"CC（Code-Complete）：软件提测\"><a href=\"#CC（Code-Complete）：软件提测\" class=\"headerlink\" title=\"CC（Code Complete）：软件提测\"></a>CC（Code Complete）：软件提测</h4><h4 id=\"RC（Release-Candidate）：软件发布\"><a href=\"#RC（Release-Candidate）：软件发布\" class=\"headerlink\" title=\"RC（Release Candidate）：软件发布\"></a>RC（Release Candidate）：软件发布</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"专有名词\"><a href=\"#专有名词\" class=\"headerlink\" title=\"专有名词\"></a>专有名词</h2><h4 id=\"VP（Verify-Prototype）：样车确认\"><a href=\"#VP（Verify-Prototype）：样车确认\" class=\"headerlink\" title=\"VP（Verify Prototype）：样车确认\"></a>VP（Verify Prototype）：样车确认</h4><h4 id=\"TT（Tooling-Trial）：工装测试\"><a href=\"#TT（Tooling-Trial）：工装测试\" class=\"headerlink\" title=\"TT（Tooling Trial）：工装测试\"></a>TT（Tooling Trial）：工装测试</h4><h4 id=\"PP（Pilot-Poduction）：试生产\"><a href=\"#PP（Pilot-Poduction）：试生产\" class=\"headerlink\" title=\"PP（Pilot Poduction）：试生产\"></a>PP（Pilot Poduction）：试生产</h4><h4 id=\"SOP（Standard-Operation-Procedure）：量产\"><a href=\"#SOP（Standard-Operation-Procedure）：量产\" class=\"headerlink\" title=\"SOP（Standard Operation Procedure）：量产\"></a>SOP（Standard Operation Procedure）：量产</h4><h4 id=\"J1（Job-1）：量产\"><a href=\"#J1（Job-1）：量产\" class=\"headerlink\" title=\"J1（Job 1）：量产\"></a>J1（Job 1）：量产</h4><h4 id=\"CC（Code-Complete）：软件提测\"><a href=\"#CC（Code-Complete）：软件提测\" class=\"headerlink\" title=\"CC（Code Complete）：软件提测\"></a>CC（Code Complete）：软件提测</h4><h4 id=\"RC（Release-Candidate）：软件发布\"><a href=\"#RC（Release-Candidate）：软件发布\" class=\"headerlink\" title=\"RC（Release Candidate）：软件发布\"></a>RC（Release Candidate）：软件发布</h4>"},{"title":"EMQX","_content":"\n## 认证鉴权\n\nPKI证书\n\n## 发布订阅ACL\n\n权限控制\n\n## 规则引擎\n\n### 消息重新发布\n\n### 消息桥接\n\n### 数据存储\n\n#### 客户端在线状态存储\n\n#### 客户端代理订阅\n\n## 共享订阅与排他订阅\n\n## 系统主题\n\n## 飞行窗口与消息队列\n\n## 消息重传\n\nawait_rel_timeout\n\nmax_inflight\n\nsession_expiry_interval：会话过期间隔，默认2小时\n\n## 日志\n\n### 日志追踪\n\n### 日志分析\n\n\n\n\n\n\n\n参考文章：\n\n[[EMQX飞行窗口](https://docs.emqx.com/zh/enterprise/v4.4/advanced/retransmission.html%23%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83%E4%B8%8E%E8%AE%BE%E8%AE%A1)]([https://docs.emqx.com/zh/enterprise/v4.4/advanced/retransmission.html#%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83%E4%B8%8E%E8%AE%BE%E8%AE%A1](ticktick://ttMarkdownLink)\n\n[[MQTT通信优化实践](https://blog.51cto.com/u_15204296/5790831)]([https://blog.51cto.com/u_15204296/5790831](ticktick://ttMarkdownLink)","source":"_posts/20230216.md","raw":"---\ntitle: EMQX\ncategory: 应用模块\ntag: [中间件,MQTT]\n---\n\n## 认证鉴权\n\nPKI证书\n\n## 发布订阅ACL\n\n权限控制\n\n## 规则引擎\n\n### 消息重新发布\n\n### 消息桥接\n\n### 数据存储\n\n#### 客户端在线状态存储\n\n#### 客户端代理订阅\n\n## 共享订阅与排他订阅\n\n## 系统主题\n\n## 飞行窗口与消息队列\n\n## 消息重传\n\nawait_rel_timeout\n\nmax_inflight\n\nsession_expiry_interval：会话过期间隔，默认2小时\n\n## 日志\n\n### 日志追踪\n\n### 日志分析\n\n\n\n\n\n\n\n参考文章：\n\n[[EMQX飞行窗口](https://docs.emqx.com/zh/enterprise/v4.4/advanced/retransmission.html%23%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83%E4%B8%8E%E8%AE%BE%E8%AE%A1)]([https://docs.emqx.com/zh/enterprise/v4.4/advanced/retransmission.html#%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83%E4%B8%8E%E8%AE%BE%E8%AE%A1](ticktick://ttMarkdownLink)\n\n[[MQTT通信优化实践](https://blog.51cto.com/u_15204296/5790831)]([https://blog.51cto.com/u_15204296/5790831](ticktick://ttMarkdownLink)","slug":"20230216","published":1,"date":"2023-02-15T02:00:24.682Z","updated":"2023-02-15T09:53:45.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle6ehceu00071xyuiphd9al6","content":"<h2 id=\"认证鉴权\"><a href=\"#认证鉴权\" class=\"headerlink\" title=\"认证鉴权\"></a>认证鉴权</h2><p>PKI证书</p>\n<h2 id=\"发布订阅ACL\"><a href=\"#发布订阅ACL\" class=\"headerlink\" title=\"发布订阅ACL\"></a>发布订阅ACL</h2><p>权限控制</p>\n<h2 id=\"规则引擎\"><a href=\"#规则引擎\" class=\"headerlink\" title=\"规则引擎\"></a>规则引擎</h2><h3 id=\"消息重新发布\"><a href=\"#消息重新发布\" class=\"headerlink\" title=\"消息重新发布\"></a>消息重新发布</h3><h3 id=\"消息桥接\"><a href=\"#消息桥接\" class=\"headerlink\" title=\"消息桥接\"></a>消息桥接</h3><h3 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h3><h4 id=\"客户端在线状态存储\"><a href=\"#客户端在线状态存储\" class=\"headerlink\" title=\"客户端在线状态存储\"></a>客户端在线状态存储</h4><h4 id=\"客户端代理订阅\"><a href=\"#客户端代理订阅\" class=\"headerlink\" title=\"客户端代理订阅\"></a>客户端代理订阅</h4><h2 id=\"共享订阅与排他订阅\"><a href=\"#共享订阅与排他订阅\" class=\"headerlink\" title=\"共享订阅与排他订阅\"></a>共享订阅与排他订阅</h2><h2 id=\"系统主题\"><a href=\"#系统主题\" class=\"headerlink\" title=\"系统主题\"></a>系统主题</h2><h2 id=\"飞行窗口与消息队列\"><a href=\"#飞行窗口与消息队列\" class=\"headerlink\" title=\"飞行窗口与消息队列\"></a>飞行窗口与消息队列</h2><h2 id=\"消息重传\"><a href=\"#消息重传\" class=\"headerlink\" title=\"消息重传\"></a>消息重传</h2><p>await_rel_timeout</p>\n<p>max_inflight</p>\n<p>session_expiry_interval：会话过期间隔，默认2小时</p>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><h3 id=\"日志追踪\"><a href=\"#日志追踪\" class=\"headerlink\" title=\"日志追踪\"></a>日志追踪</h3><h3 id=\"日志分析\"><a href=\"#日志分析\" class=\"headerlink\" title=\"日志分析\"></a>日志分析</h3><p>参考文章：</p>\n<p><a href=\"[https://docs.emqx.com/zh/enterprise/v4.4/advanced/retransmission.html#%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83%E4%B8%8E%E8%AE%BE%E8%AE%A1](ticktick://ttMarkdownLink\"><a href=\"https://docs.emqx.com/zh/enterprise/v4.4/advanced/retransmission.html%23%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83%E4%B8%8E%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"external\">EMQX飞行窗口</a></a></p>\n<p><a href=\"[https://blog.51cto.com/u_15204296/5790831](ticktick://ttMarkdownLink\"><a href=\"https://blog.51cto.com/u_15204296/5790831\" target=\"_blank\" rel=\"external\">MQTT通信优化实践</a></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"认证鉴权\"><a href=\"#认证鉴权\" class=\"headerlink\" title=\"认证鉴权\"></a>认证鉴权</h2><p>PKI证书</p>\n<h2 id=\"发布订阅ACL\"><a href=\"#发布订阅ACL\" class=\"headerlink\" title=\"发布订阅ACL\"></a>发布订阅ACL</h2><p>权限控制</p>\n<h2 id=\"规则引擎\"><a href=\"#规则引擎\" class=\"headerlink\" title=\"规则引擎\"></a>规则引擎</h2><h3 id=\"消息重新发布\"><a href=\"#消息重新发布\" class=\"headerlink\" title=\"消息重新发布\"></a>消息重新发布</h3><h3 id=\"消息桥接\"><a href=\"#消息桥接\" class=\"headerlink\" title=\"消息桥接\"></a>消息桥接</h3><h3 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h3><h4 id=\"客户端在线状态存储\"><a href=\"#客户端在线状态存储\" class=\"headerlink\" title=\"客户端在线状态存储\"></a>客户端在线状态存储</h4><h4 id=\"客户端代理订阅\"><a href=\"#客户端代理订阅\" class=\"headerlink\" title=\"客户端代理订阅\"></a>客户端代理订阅</h4><h2 id=\"共享订阅与排他订阅\"><a href=\"#共享订阅与排他订阅\" class=\"headerlink\" title=\"共享订阅与排他订阅\"></a>共享订阅与排他订阅</h2><h2 id=\"系统主题\"><a href=\"#系统主题\" class=\"headerlink\" title=\"系统主题\"></a>系统主题</h2><h2 id=\"飞行窗口与消息队列\"><a href=\"#飞行窗口与消息队列\" class=\"headerlink\" title=\"飞行窗口与消息队列\"></a>飞行窗口与消息队列</h2><h2 id=\"消息重传\"><a href=\"#消息重传\" class=\"headerlink\" title=\"消息重传\"></a>消息重传</h2><p>await_rel_timeout</p>\n<p>max_inflight</p>\n<p>session_expiry_interval：会话过期间隔，默认2小时</p>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><h3 id=\"日志追踪\"><a href=\"#日志追踪\" class=\"headerlink\" title=\"日志追踪\"></a>日志追踪</h3><h3 id=\"日志分析\"><a href=\"#日志分析\" class=\"headerlink\" title=\"日志分析\"></a>日志分析</h3><p>参考文章：</p>\n<p><a href=\"[https://docs.emqx.com/zh/enterprise/v4.4/advanced/retransmission.html#%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83%E4%B8%8E%E8%AE%BE%E8%AE%A1](ticktick://ttMarkdownLink\"><a href=\"https://docs.emqx.com/zh/enterprise/v4.4/advanced/retransmission.html%23%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83%E4%B8%8E%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"external\">EMQX飞行窗口</a></a></p>\n<p><a href=\"[https://blog.51cto.com/u_15204296/5790831](ticktick://ttMarkdownLink\"><a href=\"https://blog.51cto.com/u_15204296/5790831\" target=\"_blank\" rel=\"external\">MQTT通信优化实践</a></a></p>\n"},{"title":"Logstash","_content":"","source":"_posts/20230219.md","raw":"---\ntitle: Logstash\ncategory: 综合模块\n---\n","slug":"20230219","published":1,"date":"2023-02-16T05:35:52.708Z","updated":"2023-02-16T05:37:04.937Z","_id":"cle6o5p0j000g1xyurrwjnxdd","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"clcogfn0l0000cwyu3aeln2qy","category_id":"clcogfn0n0002cwyus6o95kgt","_id":"clcogfn0p0008cwyuzldkea1v"},{"post_id":"clcogfn0p0007cwyufi4h1dvw","category_id":"clcogfn0p0006cwyuk4u07puo","_id":"clcogfn0q000ccwyuqbhg1l7k"},{"post_id":"clcogfn0n0001cwyusdlb9o0c","category_id":"clcogfn0p0006cwyuk4u07puo","_id":"clcogfn0r000fcwyurbz8u08x"},{"post_id":"clcogfn0q000bcwyuwhoikee5","category_id":"clcogfn0p0006cwyuk4u07puo","_id":"clcogfn0r000icwyuzh6cuwhv"},{"post_id":"clcogfn0o0003cwyuwei0kjfq","category_id":"clcogfn0p0006cwyuk4u07puo","_id":"clcogfn0r000lcwyulpub8vbj"},{"post_id":"clcogfn0o0004cwyudkesoard","category_id":"clcogfn0p0006cwyuk4u07puo","_id":"clcogfn0s000pcwyutvnre622"},{"post_id":"clcogfn0p0005cwyu0grxbxq1","category_id":"clcogfn0p0006cwyuk4u07puo","_id":"clcogfn0s000vcwyux3bdh2mt"},{"post_id":"clcogfn0s000scwyuatsfz6me","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0t000zcwyu73elyymm"},{"post_id":"clcogfn0p0009cwyuzp65uzdn","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0t0013cwyu1er69woo"},{"post_id":"clcogfn0s000tcwyu16kbsl0q","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0t0015cwyu8gm198oq"},{"post_id":"clcogfn0t000ycwyuao7bhwuf","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0u0019cwyu9b9ni08p"},{"post_id":"clcogfn0q000dcwyumywg7dpj","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0u001bcwyui6eubfxi"},{"post_id":"clcogfn0t0010cwyuysehnx8h","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0u001ecwyukvobnjki"},{"post_id":"clcogfn0t0014cwyum32suchr","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0u001gcwyu2ovk6olq"},{"post_id":"clcogfn0r000gcwyuyneab1hh","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0u001icwyuspb3gxo2"},{"post_id":"clcogfn0t0016cwyuh4lezb4j","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0u001lcwyu2ddrofg9"},{"post_id":"clcogfn0r000jcwyu8e0kb2to","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0u001ncwyu9ebm4k9g"},{"post_id":"clcogfn0r000mcwyuzaop7mrx","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0u001pcwyu5i3mspbf"},{"post_id":"clcogfn0s000ncwyutzp6ok70","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn0v001rcwyu1oztxgo0"},{"post_id":"clcogfn100024cwyuuiwx2his","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn11002bcwyu32qfflm1"},{"post_id":"clcogfn100026cwyuhc9v0t0u","category_id":"clcogfn0n0002cwyus6o95kgt","_id":"clcogfn11002dcwyu8565ux7t"},{"post_id":"clcogfn110029cwyu2fqa88m4","category_id":"clcogfn0p0006cwyuk4u07puo","_id":"clcogfn12002fcwyuszwg2omx"},{"post_id":"clcogfn11002ccwyu7z5jhpba","category_id":"clcogfn0p0006cwyuk4u07puo","_id":"clcogfn12002hcwyuq4y5c5z3"},{"post_id":"clcogfn11002ecwyu0s441iaf","category_id":"clcogfn0n0002cwyus6o95kgt","_id":"clcogfn12002kcwyu4htk23zy"},{"post_id":"clcogfn12002gcwyuorr7jr1y","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn13002mcwyu698irihd"},{"post_id":"clcogfn12002icwyuvhrfc4dj","category_id":"clcogfn0n0002cwyus6o95kgt","_id":"clcogfn13002pcwyuhpgqsmzx"},{"post_id":"clcogfn12002lcwyuwabi984g","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn13002scwyumv99kl1k"},{"post_id":"clcogfn13002ncwyuy4dxwjui","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn13002ucwyuq4km5ie3"},{"post_id":"clcogfn13002qcwyuh0nrt2dn","category_id":"clcogfn0n0002cwyus6o95kgt","_id":"clcogfn14002xcwyu91gcqh5t"},{"post_id":"clcogfn13002tcwyu7kqa3hyo","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"clcogfn14002zcwyuxwf8mksv"},{"post_id":"cle6ehcem00001xyudbfmnqdb","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"cle6ehces00031xyu8c2wkkjk"},{"post_id":"cle6ehcep00011xyu5puow30a","category_id":"clcogfn0n0002cwyus6o95kgt","_id":"cle6ehces00041xyu94xgj5wi"},{"post_id":"cle6ehceu00061xyu54bs3ans","category_id":"clcogfn0n0002cwyus6o95kgt","_id":"cle6ehcev00091xyucye3lbzs"},{"post_id":"cle6ehceu00071xyuiphd9al6","category_id":"clcogfn0s000qcwyum1u6kwke","_id":"cle6ehcev000a1xyubf3ed4q7"},{"post_id":"cle6o5p0j000g1xyurrwjnxdd","category_id":"clcogfn0n0002cwyus6o95kgt","_id":"cle6o6anj000h1xyutcguqfct"}],"PostTag":[{"post_id":"clcogfn0q000dcwyumywg7dpj","tag_id":"clcogfn0r000hcwyup5ec28v3","_id":"clcogfn0s000rcwyu4i8t0sbq"},{"post_id":"clcogfn0r000gcwyuyneab1hh","tag_id":"clcogfn0r000hcwyup5ec28v3","_id":"clcogfn0t000xcwyuodb2ws4r"},{"post_id":"clcogfn0r000mcwyuzaop7mrx","tag_id":"clcogfn0s000ucwyu2hn5mtnh","_id":"clcogfn0u001acwyu8z6pg9iy"},{"post_id":"clcogfn0r000mcwyuzaop7mrx","tag_id":"clcogfn0t0011cwyu68py5mbn","_id":"clcogfn0u001ccwyub42mw0ur"},{"post_id":"clcogfn0s000ncwyutzp6ok70","tag_id":"clcogfn0u0017cwyu6t624dlx","_id":"clcogfn0u001kcwyu36psocnn"},{"post_id":"clcogfn0s000ncwyutzp6ok70","tag_id":"clcogfn0t0011cwyu68py5mbn","_id":"clcogfn0u001mcwyubo325vpl"},{"post_id":"clcogfn0s000scwyuatsfz6me","tag_id":"clcogfn0u001jcwyuvshi4o2v","_id":"clcogfn0v001qcwyuoemyqkz8"},{"post_id":"clcogfn0s000tcwyu16kbsl0q","tag_id":"clcogfn0u0017cwyu6t624dlx","_id":"clcogfn0v001ucwyue928zp2d"},{"post_id":"clcogfn0s000tcwyu16kbsl0q","tag_id":"clcogfn0t0011cwyu68py5mbn","_id":"clcogfn0v001vcwyuw887dyx8"},{"post_id":"clcogfn0t000ycwyuao7bhwuf","tag_id":"clcogfn0s000ucwyu2hn5mtnh","_id":"clcogfn0v001xcwyuys9kf49s"},{"post_id":"clcogfn0t000ycwyuao7bhwuf","tag_id":"clcogfn0t0011cwyu68py5mbn","_id":"clcogfn0v001ycwyuso53617p"},{"post_id":"clcogfn0t0010cwyuysehnx8h","tag_id":"clcogfn0u001jcwyuvshi4o2v","_id":"clcogfn0v0020cwyudsuj77gp"},{"post_id":"clcogfn0t0014cwyum32suchr","tag_id":"clcogfn0u001jcwyuvshi4o2v","_id":"clcogfn0v0022cwyuk6hemx7v"},{"post_id":"clcogfn0t0016cwyuh4lezb4j","tag_id":"clcogfn0u001jcwyuvshi4o2v","_id":"clcogfn0v0023cwyue04hz6zd"},{"post_id":"clcogfn100024cwyuuiwx2his","tag_id":"clcogfn0u001jcwyuvshi4o2v","_id":"clcogfn110028cwyu6xzo8k1i"},{"post_id":"clcogfn12002gcwyuorr7jr1y","tag_id":"clcogfn0t0011cwyu68py5mbn","_id":"clcogfn12002jcwyuqi2vwbg4"},{"post_id":"clcogfn13002ncwyuy4dxwjui","tag_id":"clcogfn0t0011cwyu68py5mbn","_id":"clcogfn13002rcwyu6beggevr"},{"post_id":"clcogfn13002tcwyu7kqa3hyo","tag_id":"clcogfn0r000hcwyup5ec28v3","_id":"clcogfn14002wcwyu5pdx3ajx"},{"post_id":"clcogfn12002lcwyuwabi984g","tag_id":"clcogfn13002ocwyu3ge4zn6p","_id":"clcogfn14002ycwyuj0lufb5o"},{"post_id":"clcogfn13002qcwyuh0nrt2dn","tag_id":"clcogfn13002vcwyulu5jm2dd","_id":"clcogfn140030cwyut13pe8e3"},{"post_id":"cle6ehcem00001xyudbfmnqdb","tag_id":"cle6ehceq00021xyuh5l0gjrt","_id":"cle6ehces00051xyu5sggcaac"},{"post_id":"cle6ehceu00061xyu54bs3ans","tag_id":"cle6ehceu00081xyu9eky4lps","_id":"cle6ehcev000c1xyuyg2o734k"},{"post_id":"cle6ehceu00071xyuiphd9al6","tag_id":"clcogfn0t0011cwyu68py5mbn","_id":"cle6ehcev000d1xyu3t8w76z0"},{"post_id":"cle6ehceu00071xyuiphd9al6","tag_id":"cle6ehcev000b1xyu25g8d1uh","_id":"cle6ehcev000e1xyugi7mky26"}],"Tag":[{"name":"框架","_id":"clcogfn0r000hcwyup5ec28v3"},{"name":"缓存","_id":"clcogfn0s000ucwyu2hn5mtnh"},{"name":"中间件","_id":"clcogfn0t0011cwyu68py5mbn"},{"name":"消息队列","_id":"clcogfn0u0017cwyu6t624dlx"},{"name":"数据库","_id":"clcogfn0u001jcwyuvshi4o2v"},{"name":"流式计算","_id":"clcogfn13002ocwyu3ge4zn6p"},{"name":"项目","_id":"clcogfn13002vcwyulu5jm2dd"},{"name":"工具","_id":"cle6ehceq00021xyuh5l0gjrt"},{"name":"车联网","_id":"cle6ehceu00081xyu9eky4lps"},{"name":"MQTT","_id":"cle6ehcev000b1xyu25g8d1uh"}]}}