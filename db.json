{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1627442658164},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1627442658165},{"_id":"themes/yelee/_config.yml","hash":"622d1c761128b645e0316441fa7bf1160dee7d38","modified":1627442658166},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1627442658211},{"_id":"source/_posts/20171212.md","hash":"8d299f74b0f6f52c3c53fe42beeeae839326456f","modified":1627448570440},{"_id":"source/_posts/20180617.md","hash":"4844e839863a44822b0b79227e1fa586d1c0e4b0","modified":1627461835979},{"_id":"source/_posts/20170918.md","hash":"02a2066a48157b80effde5caeadc12eb5cb726bd","modified":1627447787790},{"_id":"source/_posts/20180619.md","hash":"447876a9b8c36207da23898cbfe9885963abb828","modified":1627449907533},{"_id":"source/_posts/20180630.md","hash":"ccff4fe9a8ccf1e1bdd66629235b17d5fc17505e","modified":1627462536574},{"_id":"source/_posts/20180618.md","hash":"a60c3965673973e2352a43ec5c2eab30b88531b7","modified":1627449203128},{"_id":"source/_posts/20180725.md","hash":"91b177a97fca028e567b06721ec375e828b7a1b7","modified":1627453759272},{"_id":"source/_posts/20180727.md","hash":"227c0d914e2dae944e499de358ffcb14e75082f1","modified":1627458514257},{"_id":"source/_posts/20180720.md","hash":"f839e10378a7899406e0349dcfa332c94be79c22","modified":1627453682891},{"_id":"source/_posts/20180802.md","hash":"9eeea6582223b6e5531a99c151a2896045083149","modified":1627458742392},{"_id":"source/_posts/20180815.md","hash":"8167fff41e52cc8ea9a27dd9a25953e21a7b72b6","modified":1627454110107},{"_id":"source/_posts/20181010.md","hash":"67708835a3967845efed73ba98527917e3934db0","modified":1627464302169},{"_id":"source/_posts/20181113.md","hash":"8e667b9a3ba0a2c4eb204385b8ed0ad008654d26","modified":1627463478715},{"_id":"source/_posts/20181112.md","hash":"1c413bd4333cd26695060a1cf9d186af3b03d6b2","modified":1627454231311},{"_id":"source/_posts/20181023.md","hash":"84f9a514527bee8b5375c967896eed55908c978c","modified":1627464042915},{"_id":"source/_posts/20181114.md","hash":"938e4ba1f2fd1b5f35053b3bdebb40803d70cd9a","modified":1627465340034},{"_id":"source/_posts/20181111.md","hash":"131b25d413d86237c952bb589849ab4c9ea3a21e","modified":1627454231279},{"_id":"source/_posts/20181115.md","hash":"786296a4740780c6f4fdb5fc05daed4061d1663f","modified":1627454455355},{"_id":"source/_posts/20190112.md","hash":"e64608f4f19e15f81828b6ed3276b7c46c0d0e29","modified":1627456051629},{"_id":"source/_posts/20190107.md","hash":"1e0e06349af22d492ddd8cef81cc512be24294c6","modified":1627464602550},{"_id":"source/categories/index.md","hash":"29c0847328d0a937c6eb5cc67d6d76c57692c075","modified":1627442657659},{"_id":"source/tags/index.md","hash":"c82a9f2ddf4dc397e406bdd227948780d9c32953","modified":1627442657660},{"_id":"source/_posts/20180916.md","hash":"c85a519a52031a7460ffa54e9774a50200b8d23a","modified":1627464363330},{"_id":"themes/yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1627442658168},{"_id":"themes/yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1627442658169},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1627442658170},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1627442658171},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1627442658171},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1627442658207},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1627442658204},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1627442658206},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1627442658208},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1627442658208},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1627442658210},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1627442658210},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1627442658213},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1627442658173},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1627442658174},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1627442658176},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1627442658175},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1627442658177},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1627442658184},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1627442658185},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1627442658186},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1627442658187},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1627442658187},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1627442658190},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1627442658188},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1627442658191},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1627442658192},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1627442658191},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1627442658193},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1627442658201},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1627442658203},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1627442658203},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1627442658202},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1627442658222},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1627442658223},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1627442658225},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1627442658231},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1627442658256},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1627442658257},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1627442658259},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1627442658262},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1627442658261},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1627442658264},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1627442658263},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1627442658266},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1627442658267},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1627442658270},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1627442658271},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1627442658268},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1627442658269},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1627442658272},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1627442658273},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1627442658274},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1627442658275},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1627442658276},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1627442658278},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1627442658277},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1627442658279},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1627442658282},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1627442658280},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1627442658283},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1627442658286},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1627442658287},{"_id":"themes/yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1627442658288},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1627442658285},{"_id":"themes/yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1627442658289},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1627442658221},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1627442658227},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1627442658229},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1627442658178},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1627442658180},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1627442658181},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1627442658183},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1627442658182},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1627442658194},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1627442658195},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1627442658199},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1627442658198},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1627442658197},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1627442658200},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1627442658215},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1627442658218},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1627442658216},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1627442658232},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1627442658242},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1627442658241},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1627442658243},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1627442658244},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1627442658245},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1627442658246},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1627442658247},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1627442658248},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1627442658248},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1627442658249},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1627442658250},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1627442658254},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1627442658252},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1627442658251},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1627442658255},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1627442658253},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1627442658219},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1627442658233},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1627442658234},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1627442658235},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1627442658236},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1627442658238},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1627442658237},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1627442658239},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1627442658240},{"_id":"themes/yelee1/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1475282440000},{"_id":"themes/yelee1/FOOTER.md","hash":"f3c5458f65c13a8db0a52b704dbe344a0ac48323","modified":1468625674000},{"_id":"themes/yelee1/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1475282440000},{"_id":"themes/yelee1/SUMMARY.md","hash":"90af20688df361d9aea97c93f6236a7f258adf7c","modified":1468625674000},{"_id":"themes/yelee1/book.json","hash":"067e8ed2910efbef2593f486d33c2902d715839a","modified":1468625674000},{"_id":"themes/yelee1/new-features.md","hash":"fb5ca4409bca5309655c04e03cecccd0a0d114ce","modified":1468625674000},{"_id":"themes/yelee1/.github/ISSUE_TEMPLATE.md","hash":"09e2580d457ce93b4d7d554b75618036b45f8717","modified":1475282440000},{"_id":"themes/yelee1/1.Getting-Started/https.md","hash":"f7d525b5e5e26f61ae24b7b7ec44cfb781b1daa2","modified":1468625674000},{"_id":"themes/yelee1/1.Getting-Started/index.md","hash":"d1c5ba7e6d508877c40f32cea2dee80502ce369c","modified":1468625674000},{"_id":"themes/yelee1/1.Getting-Started/i18n.md","hash":"d460248a6efc02b4ffe30d986d6b60caf7dc7072","modified":1468625674000},{"_id":"themes/yelee1/1.Getting-Started/installation.md","hash":"fb023039780a3a8217d8dd5674b231ef1fa7b500","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/404-page.md","hash":"d1d20b6c0b58ea58133f9f42b088ea81fd68554e","modified":1468625674000},{"_id":"themes/yelee1/1.Getting-Started/update-theme.md","hash":"787fa9b5928a4e01136b9525b431c36b46087557","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/about-page.md","hash":"9dcba9c2ff22ca42cccd8032e4d90ef87de55d9a","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/avatar.md","hash":"e7a3bf9a237eb87622069211fca39eb456bd69be","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/comment.md","hash":"ef498a8e9dd5673571a22c58fe4f8a6057e769f4","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/faviocn.md","hash":"49a2b2ab30cb072f1a6233649cbb9cba1f1db133","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/index.md","hash":"4ee8a7ba936bc33c1505bd17a96fd4df42bc4afd","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/local-site-search.md","hash":"2620ac18750d314f81e5426d73e738f8ccde7018","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/menu.md","hash":"6a59844335ab39c482e38882cfb3f1568f3d8451","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/social-bar.md","hash":"e7ab3e6089085e89cf53996a810652cb06c539cf","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/site-creation.md","hash":"70668f8f82586a1b23a62118398e6d135e0c423e","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/post-excerpt.md","hash":"f080db547dcfd20adfa838b47dd9636d7cfbec4b","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/subdirectory.md","hash":"f416af0e3cc7936caa558cab767d9d561beedc5b","modified":1468625674000},{"_id":"themes/yelee1/2.Basic-Usage/tag-cloud-page.md","hash":"46c3f4c0201952a53a8ba1bb99bae2690902b256","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/apple-touch-icon.md","hash":"3745c615c14be548a795fc0a0b5f84309ecbac4a","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/background.md","hash":"b9d463a4fbdb9236b37d4ccd422b2765bbd2d822","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/blockquote.md","hash":"1fe5c12ab7f49d4238e78da2b148cbb40072bea0","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/font-size.md","hash":"28db8f8f5513d3167d4ec59c472b3c2f892d83c8","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/color-scheme.md","hash":"7a5ca68f568f39e314ebe59779e7ee6f82d6c87c","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/heading-style.md","hash":"a7dffc8370414006bfd69f4ce0154bdf4de31a2f","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/highlight.md","hash":"2814fceebb3ba7cc9c6f5ef9dc67fda677bb5fc0","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/index.md","hash":"f577d9a4b3af6d2fd27ace1e4178ad4b18d3aa4f","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/inline-code.md","hash":"b8f72063a31061194f3950b129eb2753b1ab0042","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/left-col-width.md","hash":"7e97b86203a56d3a7f3cee3bebd272843c8dce03","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/list-type.md","hash":"91887d20b72e7208bd30489c6cc2aae21a7e21cb","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/progress-bar.md","hash":"0f66424158bf1aa61c50d8a5d42d0870b8cd7387","modified":1468625674000},{"_id":"themes/yelee1/3.Style-Customisation/tooltips.md","hash":"e7ec10725431ce232dd8412c099d2196f817784c","modified":1468625674000},{"_id":"themes/yelee1/4.Page-Setup/animate.md","hash":"18ad4efcd3a1d68167244b60413c36fca59ddbc1","modified":1468625674000},{"_id":"themes/yelee1/4.Page-Setup/birdhouse.md","hash":"4d07b8e41396020988c3cfe173a1c8d752af4d36","modified":1468625674000},{"_id":"themes/yelee1/4.Page-Setup/copyright.info.md","hash":"a223fb5619dba5262f74fa57230b1bd64c026215","modified":1468625674000},{"_id":"themes/yelee1/4.Page-Setup/index.md","hash":"5aa2620694a051e08652331c79ebd51e3d84dd15","modified":1468625674000},{"_id":"themes/yelee1/4.Page-Setup/open-in-new-tab.md","hash":"0b4586f6443ba5d698594b2377c45168b9fbcfb3","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/addthis.md","hash":"4562914603def63c7043dd3be18398d7d354a0e5","modified":1468625674000},{"_id":"themes/yelee1/4.Page-Setup/tab-title.md","hash":"48741f689dd436f3ceff305e017b25ffb65e772a","modified":1468625674000},{"_id":"themes/yelee1/4.Page-Setup/toc.md","hash":"839b617db0dff659dcc56d42c63c7d75608c839a","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/baidu-share.md","hash":"da75e7003f1b79f9c2c5e12c74f8ec583f9eff90","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/baidu-site.md","hash":"27a67daad169d0829dc059105d5d893dfbb56c81","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/busuanzi.md","hash":"f4ab368f894b42ca975d0658cf6b827b9a4a6f29","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/cdn.md","hash":"4d162e41286e982621287bb536d36e7f4f9ce02a","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/baidu-tongji.md","hash":"c11d778f54a518a62b900f2f573aa8b757e50ade","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/fancybox.md","hash":"7eb60f6d46cbd754f6598f073269a65fab799eae","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/github-repo-widget.md","hash":"5096ca5337e89c1bf98409d0f77aaeb43e5d727e","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/google-analytics.md","hash":"e1ff51ac53e4f60999fd73c42c7b1fa63abc3b0b","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/google-site.md","hash":"46c29057b2834acd4c0ddf411ac5b9d7b4d0ae0d","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/index.md","hash":"f89e09c8695457d18f17bbed3ef25ee14f9c6c72","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/sitemap.md","hash":"d28df29464c3fcae4df608b5f57993444c5ba78c","modified":1468625674000},{"_id":"themes/yelee1/5.Vendor/mathjax.md","hash":"b0a0548e9bbb8c239ecde1076213d33cb6cf5258","modified":1468625674000},{"_id":"themes/yelee1/src/addthis.png","hash":"db69156123e0d2600f3947ddf04fa3503796d176","modified":1468625674000},{"_id":"themes/yelee1/src/apple-icon.png","hash":"b1437a69d1c86982e17a95c2b3be62aaac51a055","modified":1468625674000},{"_id":"themes/yelee1/src/background.jpg","hash":"ac8584f9e0296e5105b37a6c4e97c2a52825705c","modified":1468625674000},{"_id":"themes/yelee1/src/avatar.png","hash":"adfc0665baf0cffa4da2975bee568634ac9a97f9","modified":1468625674000},{"_id":"themes/yelee1/src/baidu-share.png","hash":"5eda8d5c9434e0f8cbedfa00e11247be6e6cde7e","modified":1468625674000},{"_id":"themes/yelee1/src/baidu-tongji.png","hash":"e560910ae01c462cbabb2d7ae6afbc83b803d281","modified":1468625674000},{"_id":"themes/yelee1/src/birdhouse.png","hash":"aa64e2c08ffc2f0372deabf75786698f689753cd","modified":1468625674000},{"_id":"themes/yelee1/src/copyright.info.png","hash":"d0d8c06fd650c8092d8147163a81754d36fb465e","modified":1468625674000},{"_id":"themes/yelee1/src/disqus.png","hash":"7c1e551cfbe33202b1caafc25fd860cc41e52918","modified":1468625674000},{"_id":"themes/yelee1/src/duoshuo.png","hash":"ceb116e66ad8d655e64667c8fd9a5ee46bd4720c","modified":1468625674000},{"_id":"themes/yelee1/src/favicon.png","hash":"6959a6d1d90d8b90975d6f85d76caa8150a4bcff","modified":1468625674000},{"_id":"themes/yelee1/src/github-repo.png","hash":"e55dba6b15371672bfefe98df4c3129dfbf5cd23","modified":1468625674000},{"_id":"themes/yelee1/src/heading.png","hash":"afb50fc8b7a186f9ae5138a47714031992feb61c","modified":1468625674000},{"_id":"themes/yelee1/src/google-analytics.png","hash":"bef98d49d088844ef7a748e40564a85f81122a81","modified":1468625674000},{"_id":"themes/yelee1/src/i18n-setup.png","hash":"aee74f31ebc52dbb99d2cc7ea78184d97a7d2792","modified":1468625674000},{"_id":"themes/yelee1/src/installation-1.png","hash":"0d0c028ba50307084b96fc338ace523ed8f369e5","modified":1468625674000},{"_id":"themes/yelee1/src/installation.png","hash":"ab14b90591ecb4886840c897417a79123496cb86","modified":1468625674000},{"_id":"themes/yelee1/src/inline-code.png","hash":"aaae24952f2e23fb76f36ea5309d515102c4022d","modified":1468625674000},{"_id":"themes/yelee1/src/list-type.png","hash":"8015c748a37ced2d0f3d26d0dbe4cacd66878991","modified":1468625674000},{"_id":"themes/yelee1/src/mathjax.png","hash":"acb19a2260da8d9289c176bc66d8f0df48478524","modified":1468625674000},{"_id":"themes/yelee1/src/social-icon.png","hash":"e553c8b3e64fd14450174e6ddd28f949390e9d8c","modified":1468625674000},{"_id":"themes/yelee1/src/post-excerpt.png","hash":"fa462b7157bd23c6ab99ff09f5ec09068220f246","modified":1468625674000},{"_id":"themes/yelee1/src/since-year.png","hash":"e285ef443668a60ac39cd4abf612dd1c9f9907e3","modified":1468625674000},{"_id":"themes/yelee1/src/tab-title.gif","hash":"2558af970df8d246e434ecbb063d0d722e53f810","modified":1468625674000},{"_id":"themes/yelee1/src/tag-cloud.png","hash":"5f030de4c91e9eaed1b8437993cd00951220720e","modified":1468625674000},{"_id":"themes/yelee1/src/yilia.png","hash":"e771d7da89c06cb904b3c7cf31886fa9c5fa79d9","modified":1468625674000},{"_id":"themes/yelee1/src/youyan.png","hash":"aa9605e612e9ae0770a34853be362a88be315d63","modified":1468625674000},{"_id":"themes/yelee1/styles/website.css","hash":"1ae6b53c50b93a2e3a6913422d510839a655432d","modified":1468625674000},{"_id":"themes/yelee1/src/feat.background.jpg","hash":"d01683c10697edd0ed9078d6bf0018229a4ff6d1","modified":1468625674000},{"_id":"themes/yelee1/src/font-16px.png","hash":"20838cc29a4605b00fe801747d36006d1e50edb2","modified":1468625674000},{"_id":"themes/yelee1/src/font-18px.png","hash":"cbf36abab75d521fc5f77a396c624bd13f0e07d1","modified":1468625674000},{"_id":"themes/yelee1/src/i18n-demo.png","hash":"b7fe3c102af60c52de1dc8356924d89081a52036","modified":1468625674000},{"_id":"themes/yelee1/src/tooltips.gif","hash":"19c7204ff774dea5300d0d56f8122b2572bf2c7c","modified":1468625674000},{"_id":"themes/yelee1/src/404-page.png","hash":"5c7801b326b5fbd21d4ee83547dbe2acce7d30d1","modified":1468625674000},{"_id":"themes/yelee1/src/jump-nav.gif","hash":"72ed43857d01872600e5dd8e2b2d6000d93cdea5","modified":1468625674000},{"_id":"themes/yelee1/src/site-demo.png","hash":"d80d939b93d59a9a674e2807472742b829e6a500","modified":1468625674000},{"_id":"themes/yelee1/src/left-col-width.gif","hash":"e8ba57afe7f68bad7a7daeaf6be829040e303b73","modified":1468625674000},{"_id":"themes/yelee1/src/toc-nowrap.gif","hash":"491299ee1f6bf26d349c82ce9c3467e12959f13d","modified":1468625674000},{"_id":"themes/yelee1/src/feat.toc.gif","hash":"6cb7e1d31d1072b75bbe79ecc164549b397d02ea","modified":1468625674000},{"_id":"themes/yelee1/src/load-comment.gif","hash":"0b25b95fde2e894a47a217bfe32adf8a323f6160","modified":1468625674000},{"_id":"themes/yelee1/src/mini-archives.gif","hash":"45d67a70f55571ffd6482fed2921f479ebe2bb05","modified":1468625674000},{"_id":"themes/yelee1/src/fancybox.gif","hash":"735d37b302cd8e3f412826557392c736cec4d1fd","modified":1468625674000},{"_id":"themes/yelee1/src/local-search.gif","hash":"3ffde3628f7c9d4d78916b337040f3ab2bb98b05","modified":1468625674000},{"_id":"themes/yelee1/_config.yml","hash":"622d1c761128b645e0316441fa7bf1160dee7d38","modified":1475282440000},{"_id":"themes/yelee1/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1475282440000},{"_id":"themes/yelee1/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1475282440000},{"_id":"themes/yelee1/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1475282440000},{"_id":"themes/yelee1/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1475282440000},{"_id":"themes/yelee1/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1475282440000},{"_id":"themes/yelee1/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1475282440000},{"_id":"themes/yelee1/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1475282440000},{"_id":"themes/yelee1/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1475282440000},{"_id":"themes/yelee1/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1475282440000},{"_id":"themes/yelee1/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1475282440000},{"_id":"themes/yelee1/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1475282440000},{"_id":"themes/yelee1/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1475282440000},{"_id":"themes/yelee1/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1475282440000},{"_id":"themes/yelee1/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1475282440000},{"_id":"themes/yelee1/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1475282440000},{"_id":"themes/yelee1/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1475282440000},{"_id":"themes/yelee1/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1475282440000},{"_id":"themes/yelee1/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1475282440000},{"_id":"themes/yelee1/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1475282440000},{"_id":"themes/yelee1/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1475282440000},{"_id":"themes/yelee1/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1475282440000},{"_id":"themes/yelee1/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1475282440000},{"_id":"themes/yelee1/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1475282440000},{"_id":"themes/yelee1/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1475282440000},{"_id":"themes/yelee1/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1475282440000},{"_id":"themes/yelee1/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1475282440000},{"_id":"themes/yelee1/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1475282440000},{"_id":"themes/yelee1/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1475282440000},{"_id":"themes/yelee1/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1475282440000},{"_id":"themes/yelee1/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1475282440000},{"_id":"themes/yelee1/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1475282440000},{"_id":"themes/yelee1/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1475282440000},{"_id":"themes/yelee1/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1475282440000},{"_id":"themes/yelee1/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1475282440000},{"_id":"themes/yelee1/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1475282440000},{"_id":"themes/yelee1/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1475282440000},{"_id":"themes/yelee1/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1475282440000},{"_id":"themes/yelee1/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1475282440000},{"_id":"themes/yelee1/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1475282440000},{"_id":"themes/yelee1/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1475282440000},{"_id":"themes/yelee1/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1475282440000},{"_id":"themes/yelee1/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1475282440000},{"_id":"themes/yelee1/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1475282440000},{"_id":"themes/yelee1/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1475282440000},{"_id":"themes/yelee1/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1475282440000},{"_id":"themes/yelee1/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1475282440000},{"_id":"themes/yelee1/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1475282440000},{"_id":"themes/yelee1/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1475282440000},{"_id":"themes/yelee1/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1475282440000},{"_id":"themes/yelee1/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1475282440000},{"_id":"themes/yelee1/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1475282440000},{"_id":"themes/yelee1/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1475282440000},{"_id":"themes/yelee1/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1475282440000},{"_id":"themes/yelee1/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1475282440000},{"_id":"themes/yelee1/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1475282440000},{"_id":"themes/yelee1/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1475282440000},{"_id":"themes/yelee1/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1475282440000},{"_id":"themes/yelee1/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1475282440000}],"Category":[],"Data":[],"Page":[{"title":"分类","date":"2017-12-23T12:34:27.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-12-23 20:34:27\ntype: \"categories\"\n---\n","updated":"2021-07-28T03:24:17.659Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckrnbaaz30001s0nmz48jvc1c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-07-28T07:17:20.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-07-28 15:17:20\ntype: \"tags\"\n---\n","updated":"2021-07-28T03:24:17.660Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckrnbab0c000ls0nmt9fakgf8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"操作系统与计算机网络","_content":"\n<!-- more -->\n\n# 计算机网络\n\n## HTTP\n\n## TCP\n三次握手建连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png)\n\n四次挥手断连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png)\n\n## UDP\n\n## QUIC\n\n## RPC\n\n## MQTT\n\n## GB32960(新能源通信协议)\n\n\n\n# 操作系统\n\n## top\n## netstat\n\n\n","source":"_posts/20171212.md","raw":"---\ntitle: 操作系统与计算机网络\n---\n\n<!-- more -->\n\n# 计算机网络\n\n## HTTP\n\n## TCP\n三次握手建连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png)\n\n四次挥手断连\n![img](http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png)\n\n## UDP\n\n## QUIC\n\n## RPC\n\n## MQTT\n\n## GB32960(新能源通信协议)\n\n\n\n# 操作系统\n\n## top\n## netstat\n\n\n","slug":"20171212","published":1,"date":"2021-07-28T03:24:17.636Z","updated":"2021-07-28T05:02:50.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaayu0000s0nmrjjt1iml","content":"<a id=\"more\"></a>\n<h1 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h1><h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><h2 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h2><p>三次握手建连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png\" alt=\"img\"></p>\n<p>四次挥手断连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png\" alt=\"img\"></p>\n<h2 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h2><h2 id=\"QUIC\"><a href=\"#QUIC\" class=\"headerlink\" title=\"QUIC\"></a>QUIC</h2><h2 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h2><h2 id=\"MQTT\"><a href=\"#MQTT\" class=\"headerlink\" title=\"MQTT\"></a>MQTT</h2><h2 id=\"GB32960-新能源通信协议\"><a href=\"#GB32960-新能源通信协议\" class=\"headerlink\" title=\"GB32960(新能源通信协议)\"></a>GB32960(新能源通信协议)</h2><h1 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h1><h2 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h2><h2 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h1><h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><h2 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h2><p>三次握手建连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/6E/CgotOV13hviAU5H3AAAyMppFmf8039.png\" alt=\"img\"></p>\n<p>四次挥手断连<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/4E/CgoB5l13hviAZRJ1AABEfmQ55Jw991.png\" alt=\"img\"></p>\n<h2 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h2><h2 id=\"QUIC\"><a href=\"#QUIC\" class=\"headerlink\" title=\"QUIC\"></a>QUIC</h2><h2 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h2><h2 id=\"MQTT\"><a href=\"#MQTT\" class=\"headerlink\" title=\"MQTT\"></a>MQTT</h2><h2 id=\"GB32960-新能源通信协议\"><a href=\"#GB32960-新能源通信协议\" class=\"headerlink\" title=\"GB32960(新能源通信协议)\"></a>GB32960(新能源通信协议)</h2><h1 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h1><h2 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h2><h2 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h2>"},{"title":"常用工具集","_content":"\n# 团队协作\n\n# 质量保证\n\n# 压测\n\n# 容器与代理\n\n# 文档管理\n\n# 网络","source":"_posts/20180725.md","raw":"---\ntitle: 常用工具集\n---\n\n# 团队协作\n\n# 质量保证\n\n# 压测\n\n# 容器与代理\n\n# 文档管理\n\n# 网络","slug":"20180725","published":1,"date":"2021-07-28T03:24:17.644Z","updated":"2021-07-28T06:29:19.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaaz50002s0nmu8z2pdgx","content":"<h1 id=\"团队协作\"><a href=\"#团队协作\" class=\"headerlink\" title=\"团队协作\"></a>团队协作</h1><h1 id=\"质量保证\"><a href=\"#质量保证\" class=\"headerlink\" title=\"质量保证\"></a>质量保证</h1><h1 id=\"压测\"><a href=\"#压测\" class=\"headerlink\" title=\"压测\"></a>压测</h1><h1 id=\"容器与代理\"><a href=\"#容器与代理\" class=\"headerlink\" title=\"容器与代理\"></a>容器与代理</h1><h1 id=\"文档管理\"><a href=\"#文档管理\" class=\"headerlink\" title=\"文档管理\"></a>文档管理</h1><h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"团队协作\"><a href=\"#团队协作\" class=\"headerlink\" title=\"团队协作\"></a>团队协作</h1><h1 id=\"质量保证\"><a href=\"#质量保证\" class=\"headerlink\" title=\"质量保证\"></a>质量保证</h1><h1 id=\"压测\"><a href=\"#压测\" class=\"headerlink\" title=\"压测\"></a>压测</h1><h1 id=\"容器与代理\"><a href=\"#容器与代理\" class=\"headerlink\" title=\"容器与代理\"></a>容器与代理</h1><h1 id=\"文档管理\"><a href=\"#文档管理\" class=\"headerlink\" title=\"文档管理\"></a>文档管理</h1><h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1>"},{"title":"并发与多线程","_content":"\n# 线程池\n## 核心参数\n\n* 核心线程数\n* 最大线程数\n* 线程空闲时间\n* 空闲时间的单位\n* 缓存队列\n* 拒绝策略\n\n## 线程池任务执行流程\n\n提交任务的方法\nsubmit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。\nexecute：submit 最终也是通过 execute 执行的。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png)\n1. 向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。\n2. 如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。\n3. 如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。\n4. 如果已经达到了最大线程数，则执行指定的拒绝策略\n\n# 同步与互斥\n\n## synchronized\nsynchronized 应用在方法上时，在字节码中是通过方法的 ACC_SYNCHRONIZED 标志来实现的；\nsynchronized 应用在同步块上时，在字节码中是通过 monitorenter 和 monitorexit 实现的。\n\n## Lock\n\n## CAS\n\n# 线程状态转换\n\n# 线程通信\n\n# 死锁\n\n# 机制\n\n## ThreadLocal\n\n## Fork/Join\n\n## Volatile\n\n## Interrupt","source":"_posts/20180630.md","raw":"---\ntitle: 并发与多线程\n---\n\n# 线程池\n## 核心参数\n\n* 核心线程数\n* 最大线程数\n* 线程空闲时间\n* 空闲时间的单位\n* 缓存队列\n* 拒绝策略\n\n## 线程池任务执行流程\n\n提交任务的方法\nsubmit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。\nexecute：submit 最终也是通过 execute 执行的。\n![img](http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png)\n1. 向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。\n2. 如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。\n3. 如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。\n4. 如果已经达到了最大线程数，则执行指定的拒绝策略\n\n# 同步与互斥\n\n## synchronized\nsynchronized 应用在方法上时，在字节码中是通过方法的 ACC_SYNCHRONIZED 标志来实现的；\nsynchronized 应用在同步块上时，在字节码中是通过 monitorenter 和 monitorexit 实现的。\n\n## Lock\n\n## CAS\n\n# 线程状态转换\n\n# 线程通信\n\n# 死锁\n\n# 机制\n\n## ThreadLocal\n\n## Fork/Join\n\n## Volatile\n\n## Interrupt","slug":"20180630","published":1,"date":"2021-07-28T03:24:17.641Z","updated":"2021-07-28T08:55:36.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaaz90003s0nmtz5r74lt","content":"<h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><h2 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h2><ul>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>线程空闲时间</li>\n<li>空闲时间的单位</li>\n<li>缓存队列</li>\n<li>拒绝策略</li>\n</ul>\n<h2 id=\"线程池任务执行流程\"><a href=\"#线程池任务执行流程\" class=\"headerlink\" title=\"线程池任务执行流程\"></a>线程池任务执行流程</h2><p>提交任务的方法<br>submit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。<br>execute：submit 最终也是通过 execute 执行的。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png\" alt=\"img\"></p>\n<ol>\n<li>向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。</li>\n<li>如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。</li>\n<li>如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。</li>\n<li>如果已经达到了最大线程数，则执行指定的拒绝策略</li>\n</ol>\n<h1 id=\"同步与互斥\"><a href=\"#同步与互斥\" class=\"headerlink\" title=\"同步与互斥\"></a>同步与互斥</h1><h2 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h2><p>synchronized 应用在方法上时，在字节码中是通过方法的 ACC_SYNCHRONIZED 标志来实现的；<br>synchronized 应用在同步块上时，在字节码中是通过 monitorenter 和 monitorexit 实现的。</p>\n<h2 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h2><h2 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h2><h1 id=\"线程状态转换\"><a href=\"#线程状态转换\" class=\"headerlink\" title=\"线程状态转换\"></a>线程状态转换</h1><h1 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h1><h1 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h1><h1 id=\"机制\"><a href=\"#机制\" class=\"headerlink\" title=\"机制\"></a>机制</h1><h2 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h2><h2 id=\"Fork-Join\"><a href=\"#Fork-Join\" class=\"headerlink\" title=\"Fork/Join\"></a>Fork/Join</h2><h2 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h2><h2 id=\"Interrupt\"><a href=\"#Interrupt\" class=\"headerlink\" title=\"Interrupt\"></a>Interrupt</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><h2 id=\"核心参数\"><a href=\"#核心参数\" class=\"headerlink\" title=\"核心参数\"></a>核心参数</h2><ul>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>线程空闲时间</li>\n<li>空闲时间的单位</li>\n<li>缓存队列</li>\n<li>拒绝策略</li>\n</ul>\n<h2 id=\"线程池任务执行流程\"><a href=\"#线程池任务执行流程\" class=\"headerlink\" title=\"线程池任务执行流程\"></a>线程池任务执行流程</h2><p>提交任务的方法<br>submit：可以返回一个 future 对象，通过 future 对象可以了解任务执行情况，可以取消任务的执行，还可获取执行结果或执行异常。<br>execute：submit 最终也是通过 execute 执行的。<br><img src=\"http://s0.lgstatic.com/i/image2/M01/8A/BE/CgoB5l14nI6ABd8rAABJ5DF7U78658.png\" alt=\"img\"></p>\n<ol>\n<li>向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。</li>\n<li>如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。</li>\n<li>如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。</li>\n<li>如果已经达到了最大线程数，则执行指定的拒绝策略</li>\n</ol>\n<h1 id=\"同步与互斥\"><a href=\"#同步与互斥\" class=\"headerlink\" title=\"同步与互斥\"></a>同步与互斥</h1><h2 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h2><p>synchronized 应用在方法上时，在字节码中是通过方法的 ACC_SYNCHRONIZED 标志来实现的；<br>synchronized 应用在同步块上时，在字节码中是通过 monitorenter 和 monitorexit 实现的。</p>\n<h2 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h2><h2 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h2><h1 id=\"线程状态转换\"><a href=\"#线程状态转换\" class=\"headerlink\" title=\"线程状态转换\"></a>线程状态转换</h1><h1 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h1><h1 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h1><h1 id=\"机制\"><a href=\"#机制\" class=\"headerlink\" title=\"机制\"></a>机制</h1><h2 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h2><h2 id=\"Fork-Join\"><a href=\"#Fork-Join\" class=\"headerlink\" title=\"Fork/Join\"></a>Fork/Join</h2><h2 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h2><h2 id=\"Interrupt\"><a href=\"#Interrupt\" class=\"headerlink\" title=\"Interrupt\"></a>Interrupt</h2>"},{"title":"硬技能图谱","_content":"\n努力很容易，坚持努力很难，不忘初心，方得始终。\n<!-- more -->\n![img](http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png)\n","source":"_posts/20170918.md","raw":"---\ntitle: 硬技能图谱\n---\n\n努力很容易，坚持努力很难，不忘初心，方得始终。\n<!-- more -->\n![img](http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png)\n","slug":"20170918","published":1,"date":"2021-07-28T03:24:17.635Z","updated":"2021-07-28T04:49:47.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazb0004s0nmztic1vkx","content":"<p>努力很容易，坚持努力很难，不忘初心，方得始终。<br><a id=\"more\"></a><br><img src=\"http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<p>努力很容易，坚持努力很难，不忘初心，方得始终。<br>","more":"<br><img src=\"http://s0.lgstatic.com/i/image2/M01/89/5A/CgoB5l12QGeAX1jpAADXc8NHFMU588.png\" alt=\"img\"></p>"},{"title":"Java","_content":"\n# 常用集合\n## HashMap\n实现：数组加链表，数组中的每一项是一个链表，通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，链表中的节点存储的是键值对。\n## ConcurrentHashMap\n1.7：使用 Segment 进行分段加锁，降低并发锁定；\n1.8：使用 CAS 自旋锁的乐观锁来提高性能，但是在并发度较高时性能会比较一般\n\n\n# JUC\n\n# 反射\n\n# 动态代理\n\n## JDK动态代理\n\n## CGLIB动态代理\nJDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。\n\n# 基础数据类型\n\n# 对象引用\n\n# 异常\n\n# 注解\n\n# SPI\n\n# 版本特性\n\n","source":"_posts/20180617.md","raw":"---\ntitle: Java\n---\n\n# 常用集合\n## HashMap\n实现：数组加链表，数组中的每一项是一个链表，通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，链表中的节点存储的是键值对。\n## ConcurrentHashMap\n1.7：使用 Segment 进行分段加锁，降低并发锁定；\n1.8：使用 CAS 自旋锁的乐观锁来提高性能，但是在并发度较高时性能会比较一般\n\n\n# JUC\n\n# 反射\n\n# 动态代理\n\n## JDK动态代理\n\n## CGLIB动态代理\nJDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。\n\n# 基础数据类型\n\n# 对象引用\n\n# 异常\n\n# 注解\n\n# SPI\n\n# 版本特性\n\n","slug":"20180617","published":1,"date":"2021-07-28T03:24:17.637Z","updated":"2021-07-28T08:43:55.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazc0005s0nmq60e4hyb","content":"<h1 id=\"常用集合\"><a href=\"#常用集合\" class=\"headerlink\" title=\"常用集合\"></a>常用集合</h1><h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><p>实现：数组加链表，数组中的每一项是一个链表，通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，链表中的节点存储的是键值对。</p>\n<h2 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h2><p>1.7：使用 Segment 进行分段加锁，降低并发锁定；<br>1.8：使用 CAS 自旋锁的乐观锁来提高性能，但是在并发度较高时性能会比较一般</p>\n<h1 id=\"JUC\"><a href=\"#JUC\" class=\"headerlink\" title=\"JUC\"></a>JUC</h1><h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><h1 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h1><h2 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h2><h2 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h2><p>JDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。</p>\n<h1 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h1><h1 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h1><h1 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h1><h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h1 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a>SPI</h1><h1 id=\"版本特性\"><a href=\"#版本特性\" class=\"headerlink\" title=\"版本特性\"></a>版本特性</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"常用集合\"><a href=\"#常用集合\" class=\"headerlink\" title=\"常用集合\"></a>常用集合</h1><h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><p>实现：数组加链表，数组中的每一项是一个链表，通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，链表中的节点存储的是键值对。</p>\n<h2 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h2><p>1.7：使用 Segment 进行分段加锁，降低并发锁定；<br>1.8：使用 CAS 自旋锁的乐观锁来提高性能，但是在并发度较高时性能会比较一般</p>\n<h1 id=\"JUC\"><a href=\"#JUC\" class=\"headerlink\" title=\"JUC\"></a>JUC</h1><h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><h1 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h1><h2 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h2><h2 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h2><p>JDK 动态代理只能代理实现了接口的类或者直接代理接口；CGLIB 可以代理未实现任何接口的类，但不能代理声明为 final 类型的类和方法。</p>\n<h1 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h1><h1 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h1><h1 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h1><h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h1 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a>SPI</h1><h1 id=\"版本特性\"><a href=\"#版本特性\" class=\"headerlink\" title=\"版本特性\"></a>版本特性</h1>"},{"title":"JVM","_content":"\n架构师必备武器\n<!-- more -->\n\n# 内存模型\n\n## JVM内存模型\n\n## Java内存模型\n\n# 类加载\n\n# GC\n\n# 性能调优\n\n# 执行模式\n\n# 编译器优化\n","source":"_posts/20180619.md","raw":"---\ntitle: JVM\n---\n\n架构师必备武器\n<!-- more -->\n\n# 内存模型\n\n## JVM内存模型\n\n## Java内存模型\n\n# 类加载\n\n# GC\n\n# 性能调优\n\n# 执行模式\n\n# 编译器优化\n","slug":"20180619","published":1,"date":"2021-07-28T03:24:17.639Z","updated":"2021-07-28T05:25:07.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaaze0006s0nmswr55ma1","content":"<p>架构师必备武器<br><a id=\"more\"></a></p>\n<h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><h2 id=\"JVM内存模型\"><a href=\"#JVM内存模型\" class=\"headerlink\" title=\"JVM内存模型\"></a>JVM内存模型</h2><h2 id=\"Java内存模型\"><a href=\"#Java内存模型\" class=\"headerlink\" title=\"Java内存模型\"></a>Java内存模型</h2><h1 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h1><h1 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h1><h1 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h1><h1 id=\"执行模式\"><a href=\"#执行模式\" class=\"headerlink\" title=\"执行模式\"></a>执行模式</h1><h1 id=\"编译器优化\"><a href=\"#编译器优化\" class=\"headerlink\" title=\"编译器优化\"></a>编译器优化</h1>","site":{"data":{}},"excerpt":"<p>架构师必备武器<br>","more":"</p>\n<h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><h2 id=\"JVM内存模型\"><a href=\"#JVM内存模型\" class=\"headerlink\" title=\"JVM内存模型\"></a>JVM内存模型</h2><h2 id=\"Java内存模型\"><a href=\"#Java内存模型\" class=\"headerlink\" title=\"Java内存模型\"></a>Java内存模型</h2><h1 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h1><h1 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h1><h1 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h1><h1 id=\"执行模式\"><a href=\"#执行模式\" class=\"headerlink\" title=\"执行模式\"></a>执行模式</h1><h1 id=\"编译器优化\"><a href=\"#编译器优化\" class=\"headerlink\" title=\"编译器优化\"></a>编译器优化</h1>"},{"title":"设计模式","_content":"\n设计模式分为 3 大类型共 23 种：\n* 创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n* 结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n* 行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。\n<!-- more -->\n\n# 单例模式\n\n# 工厂模式\n\n# 代理模式\n\n# 责任链模式\n\n# 适配器模式\n\n# 观察者模式\n\n# 构造者模式\n","source":"_posts/20180618.md","raw":"---\ntitle: 设计模式\n---\n\n设计模式分为 3 大类型共 23 种：\n* 创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n* 结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n* 行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。\n<!-- more -->\n\n# 单例模式\n\n# 工厂模式\n\n# 代理模式\n\n# 责任链模式\n\n# 适配器模式\n\n# 观察者模式\n\n# 构造者模式\n","slug":"20180618","published":1,"date":"2021-07-28T03:24:17.638Z","updated":"2021-07-28T05:13:23.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazf0007s0nm79x02has","content":"<p>设计模式分为 3 大类型共 23 种：</p>\n<ul>\n<li>创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li>\n<li>结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li>\n<li>行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。<a id=\"more\"></a>\n</li>\n</ul>\n<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><h1 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h1><h1 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h1><h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h1 id=\"构造者模式\"><a href=\"#构造者模式\" class=\"headerlink\" title=\"构造者模式\"></a>构造者模式</h1>","site":{"data":{}},"excerpt":"<p>设计模式分为 3 大类型共 23 种：</p>\n<ul>\n<li>创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li>\n<li>结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li>\n<li>行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。","more":"</li>\n</ul>\n<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><h1 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h1><h1 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h1><h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h1 id=\"构造者模式\"><a href=\"#构造者模式\" class=\"headerlink\" title=\"构造者模式\"></a>构造者模式</h1>"},{"title":"RPC","_content":"","source":"_posts/20180815.md","raw":"---\ntitle: RPC \n---\n","slug":"20180815","published":1,"date":"2021-07-28T03:24:17.647Z","updated":"2021-07-28T06:35:10.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazh0008s0nmjwkowbvj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"数据结构与算法","_content":"\n# 数据结构\n\n# 算法\n\n## 复杂度\n\n## 排序\n\n## 查找\n\n## 字符串匹配\n\n## 常用算法思路\n\n\n","source":"_posts/20180720.md","raw":"---\ntitle: 数据结构与算法\n---\n\n# 数据结构\n\n# 算法\n\n## 复杂度\n\n## 排序\n\n## 查找\n\n## 字符串匹配\n\n## 常用算法思路\n\n\n","slug":"20180720","published":1,"date":"2021-07-28T03:24:17.642Z","updated":"2021-07-28T06:28:02.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazi0009s0nmrkbytksh","content":"<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h2 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h2><h2 id=\"常用算法思路\"><a href=\"#常用算法思路\" class=\"headerlink\" title=\"常用算法思路\"></a>常用算法思路</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h2 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h2><h2 id=\"常用算法思路\"><a href=\"#常用算法思路\" class=\"headerlink\" title=\"常用算法思路\"></a>常用算法思路</h2>"},{"title":"MyBatis","_content":"\n## 处理流程\n\n1. 在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。\n2. SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。\n3. StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。\n4. 最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。","source":"_posts/20180802.md","raw":"---\ntitle: MyBatis\n---\n\n## 处理流程\n\n1. 在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。\n2. SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。\n3. StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。\n4. 最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。","slug":"20180802","published":1,"date":"2021-07-28T03:24:17.646Z","updated":"2021-07-28T07:52:22.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazj000as0nmi65lvtd7","content":"<h2 id=\"处理流程\"><a href=\"#处理流程\" class=\"headerlink\" title=\"处理流程\"></a>处理流程</h2><ol>\n<li>在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。</li>\n<li>SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。</li>\n<li>StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。</li>\n<li>最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"处理流程\"><a href=\"#处理流程\" class=\"headerlink\" title=\"处理流程\"></a>处理流程</h2><ol>\n<li>在执行 SQL 时，首先会从 SqlSessionFactory 中创建一个新的 SqlSession。</li>\n<li>SQL 语句是通过 SqlSession 中的 Executor 来执行，Executor 根据 SqlSession 传递的参数执行 query() 方法，然后创建一个 StatementHandler 对象，将必要的参数传递给 StatementHandler，由 StatementHandler 来完成对数据库的查询。</li>\n<li>StatementHandler 调用 ParameterHandler 的 setParameters 方法，把用户传递的参数转换成 JDBC Statement 所需要的参数， 调用原生 JDBC 来执行语句。</li>\n<li>最后由 ResultSetHandler 的 handleResultSets 方法将 JDBC 返回的 ResultSet 结果集转换成对象集，并逐级返回结果，完成一次 SQL 语句执行。</li>\n</ol>\n"},{"title":"Spring","_content":"\n# Spring Framework\n\n## Context初始化流程\n~~~java\npublic void refresh() throws BeansException, IllegalStateException {\n    synchronized (this.startupShutdownMonitor) {\n        prepareRefresh();\n        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n        prepareBeanFactory(beanFactory);\n        try {\n            postProcessBeanFactory(beanFactory);\n            invokeBeanFactoryPostProcessors(beanFactory);\n            registerBeanPostProcessors(beanFactory);\n            initMessageSource();\n            initApplicationEventMulticaster();\n            onRefresh();\n            registerListeners();\n            finishBeanFactoryInitialization(beanFactory);\n            finishRefresh();\n        }\n        catch (BeansException ex) {\n            if (logger.isWarnEnabled()) {\n                logger.warn(\"Exception encountered during context initialization - \" +\n                        \"cancelling refresh attempt: \" + ex);\n            }\n            destroyBeans();\n            cancelRefresh(ex);\n            throw ex;\n        }\n        finally {\n            resetCommonCaches();\n        }\n    }\n}\n~~~\n1. 首先对刷新进行准备，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符，这个动作根据子类的需求由子类来执行，然后验证是否缺失必要的 properties。\n2. 刷新并获得内部的 Bean Factory。\n3. 对 BeanFactory 进行准备工作，比如设置类加载器和后置处理器、配置不进行自动装配的类型、注册默认的环境 Bean。\n4. 为 Context 的子类提供后置处理 BeanFactory 的扩展能力。如果子类想在 Bean 定义加载完成后，开始初始化上下文之前做一些特殊逻辑，可以复写这个方法。\n5. 执行 Context 中注册的 Bean Factory 后缀处理器。这里有两种后置处理器，一种是可以注册 Bean 的后缀处理器，另一种是针对 BeanFactory 进行处理的后置处理器。执行的顺序是，先按优先级执行可注册 Bean 的处理器，在按优先级执行针对 BeanFactory的处理器。对 Spring Boot 来说，这一步会进行注解 Bean Definition 的解析。流程如图右侧所示，由 ConfigurationClassPostProcessor 触发、由 ClassPathBeanDefinitionScanner 解析并注册到 BeanFactory。\n6. 按优先级顺序在 BeanFactory 中注册  Bean的后缀处理器，Bean 后置处理器可以在 Bean 初始化前、后执行处理。\n7. 初始化消息源，消息源用来支持消息的国际化。\n8. 初始化应用事件广播器。事件广播器用来向 ApplicationListener 通知各种应用产生的事件，是一个标准的观察者模式。\n9. 是留给子类的扩展步骤，用来让特定的 Context 子类初始化其他的 Bean。\n10. 把实现了 ApplicationListener 的 Bean 注册到事件广播器，并对广播器中的早期未广播事件进行通知。\n11. 冻结所有 Bean 描述信息的修改，实例化非延迟加载的单例 Bean。\n12. 完成上下文的刷新工作，调用 LifecycleProcessor 的 onFresh() 方法以及发布 ContextRefreshedEvent 事件。\n13. 在 finally 中，执行第十三步，重置公共的缓存，比如 ReflectionUtils 中的缓存、 AnnotationUtils 中的缓存等等。\n\n## Bean生命周期\n1. 调用 Bean 的构造方法创建 Bean；\n2. 通过反射调用 setter 方法进行属性的依赖注入；\n3. 如果实现 BeanNameAware 接口的话，会设置 Bean 的 name；\n4. 如果实现了 BeanFactoryAware，会把 BeanFactory 设置给 Bean；\n5. 如果实现了 ApplicationContextAware，会给 Bean 设置 ApplictionContext；\n6. 如果实现了 BeanPostProcessor 接口，则执行前置处理方法；\n7. 实现了 InitializingBean 接口的话，执行 afterPropertiesSet 方法；\n8. 执行自定义的 init 方法；\n9. 执行 BeanPostProcessor 接口的后置处理方法；\n10. 在使用完 Bean 需要销毁时，会先执行 DisposableBean 接口的 destroy 方法，然后在执行自定义的 destroy 方法。\n\n# Spring Boot\n## SpringBoot启动流程\n~~~java\npublic ConfigurableApplicationContext run(String... args) {\n    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConfigurableApplicationContext context = null;\n    Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n    configureHeadlessProperty();\n    SpringApplicationRunListeners listeners = getRunListeners(args);\n    listeners.starting();\n    try {\n        ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n                args);\n        ConfigurableEnvironment environment = prepareEnvironment(listeners,\n                applicationArguments);\n        configureIgnoreBeanInfo(environment);\n        Banner printedBanner = printBanner(environment);\n        context = createApplicationContext();\n        exceptionReporters = getSpringFactoriesInstances(\n                SpringBootExceptionReporter.class,\n                new Class[] { ConfigurableApplicationContext.class }, context);\n        prepareContext(context, environment, listeners, applicationArguments,\n                printedBanner);\n        refreshContext(context);\n        afterRefresh(context, applicationArguments);\n        stopWatch.stop();\n        if (this.logStartupInfo) {\n            new StartupInfoLogger(this.mainApplicationClass)\n                    .logStarted(getApplicationLog(), stopWatch);\n        }\n        listeners.started(context);\n        callRunners(context, applicationArguments);\n    }\n    catch (Throwable ex) {\n        handleRunFailure(context, ex, exceptionReporters, listeners);\n        throw new IllegalStateException(ex);\n    }\n\n    try {\n        listeners.running(context);\n    }\n    catch (Throwable ex) {\n        handleRunFailure(context, ex, exceptionReporters, null);\n        throw new IllegalStateException(ex);\n    }\n    return context;\n}\n~~~\n1. 配置Environment。\n2. 准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。\n3. 执行 refreshContext。\n\n## 配置文件\n* bootstrap\n* application\n\n## 注解\n* SpringBootApplication\n* SpringBootConfiguration\n* EnableAutoConfiguration\n* @Conditional\n\n## 模块\n* Starter\n* Actuator\n* DevTools\n* CLI\n\n# Spring Cloud\n\n# Spring Data\n\n# Spring Security","source":"_posts/20180727.md","raw":"---\ntitle: Spring\n---\n\n# Spring Framework\n\n## Context初始化流程\n~~~java\npublic void refresh() throws BeansException, IllegalStateException {\n    synchronized (this.startupShutdownMonitor) {\n        prepareRefresh();\n        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n        prepareBeanFactory(beanFactory);\n        try {\n            postProcessBeanFactory(beanFactory);\n            invokeBeanFactoryPostProcessors(beanFactory);\n            registerBeanPostProcessors(beanFactory);\n            initMessageSource();\n            initApplicationEventMulticaster();\n            onRefresh();\n            registerListeners();\n            finishBeanFactoryInitialization(beanFactory);\n            finishRefresh();\n        }\n        catch (BeansException ex) {\n            if (logger.isWarnEnabled()) {\n                logger.warn(\"Exception encountered during context initialization - \" +\n                        \"cancelling refresh attempt: \" + ex);\n            }\n            destroyBeans();\n            cancelRefresh(ex);\n            throw ex;\n        }\n        finally {\n            resetCommonCaches();\n        }\n    }\n}\n~~~\n1. 首先对刷新进行准备，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符，这个动作根据子类的需求由子类来执行，然后验证是否缺失必要的 properties。\n2. 刷新并获得内部的 Bean Factory。\n3. 对 BeanFactory 进行准备工作，比如设置类加载器和后置处理器、配置不进行自动装配的类型、注册默认的环境 Bean。\n4. 为 Context 的子类提供后置处理 BeanFactory 的扩展能力。如果子类想在 Bean 定义加载完成后，开始初始化上下文之前做一些特殊逻辑，可以复写这个方法。\n5. 执行 Context 中注册的 Bean Factory 后缀处理器。这里有两种后置处理器，一种是可以注册 Bean 的后缀处理器，另一种是针对 BeanFactory 进行处理的后置处理器。执行的顺序是，先按优先级执行可注册 Bean 的处理器，在按优先级执行针对 BeanFactory的处理器。对 Spring Boot 来说，这一步会进行注解 Bean Definition 的解析。流程如图右侧所示，由 ConfigurationClassPostProcessor 触发、由 ClassPathBeanDefinitionScanner 解析并注册到 BeanFactory。\n6. 按优先级顺序在 BeanFactory 中注册  Bean的后缀处理器，Bean 后置处理器可以在 Bean 初始化前、后执行处理。\n7. 初始化消息源，消息源用来支持消息的国际化。\n8. 初始化应用事件广播器。事件广播器用来向 ApplicationListener 通知各种应用产生的事件，是一个标准的观察者模式。\n9. 是留给子类的扩展步骤，用来让特定的 Context 子类初始化其他的 Bean。\n10. 把实现了 ApplicationListener 的 Bean 注册到事件广播器，并对广播器中的早期未广播事件进行通知。\n11. 冻结所有 Bean 描述信息的修改，实例化非延迟加载的单例 Bean。\n12. 完成上下文的刷新工作，调用 LifecycleProcessor 的 onFresh() 方法以及发布 ContextRefreshedEvent 事件。\n13. 在 finally 中，执行第十三步，重置公共的缓存，比如 ReflectionUtils 中的缓存、 AnnotationUtils 中的缓存等等。\n\n## Bean生命周期\n1. 调用 Bean 的构造方法创建 Bean；\n2. 通过反射调用 setter 方法进行属性的依赖注入；\n3. 如果实现 BeanNameAware 接口的话，会设置 Bean 的 name；\n4. 如果实现了 BeanFactoryAware，会把 BeanFactory 设置给 Bean；\n5. 如果实现了 ApplicationContextAware，会给 Bean 设置 ApplictionContext；\n6. 如果实现了 BeanPostProcessor 接口，则执行前置处理方法；\n7. 实现了 InitializingBean 接口的话，执行 afterPropertiesSet 方法；\n8. 执行自定义的 init 方法；\n9. 执行 BeanPostProcessor 接口的后置处理方法；\n10. 在使用完 Bean 需要销毁时，会先执行 DisposableBean 接口的 destroy 方法，然后在执行自定义的 destroy 方法。\n\n# Spring Boot\n## SpringBoot启动流程\n~~~java\npublic ConfigurableApplicationContext run(String... args) {\n    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConfigurableApplicationContext context = null;\n    Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n    configureHeadlessProperty();\n    SpringApplicationRunListeners listeners = getRunListeners(args);\n    listeners.starting();\n    try {\n        ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n                args);\n        ConfigurableEnvironment environment = prepareEnvironment(listeners,\n                applicationArguments);\n        configureIgnoreBeanInfo(environment);\n        Banner printedBanner = printBanner(environment);\n        context = createApplicationContext();\n        exceptionReporters = getSpringFactoriesInstances(\n                SpringBootExceptionReporter.class,\n                new Class[] { ConfigurableApplicationContext.class }, context);\n        prepareContext(context, environment, listeners, applicationArguments,\n                printedBanner);\n        refreshContext(context);\n        afterRefresh(context, applicationArguments);\n        stopWatch.stop();\n        if (this.logStartupInfo) {\n            new StartupInfoLogger(this.mainApplicationClass)\n                    .logStarted(getApplicationLog(), stopWatch);\n        }\n        listeners.started(context);\n        callRunners(context, applicationArguments);\n    }\n    catch (Throwable ex) {\n        handleRunFailure(context, ex, exceptionReporters, listeners);\n        throw new IllegalStateException(ex);\n    }\n\n    try {\n        listeners.running(context);\n    }\n    catch (Throwable ex) {\n        handleRunFailure(context, ex, exceptionReporters, null);\n        throw new IllegalStateException(ex);\n    }\n    return context;\n}\n~~~\n1. 配置Environment。\n2. 准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。\n3. 执行 refreshContext。\n\n## 配置文件\n* bootstrap\n* application\n\n## 注解\n* SpringBootApplication\n* SpringBootConfiguration\n* EnableAutoConfiguration\n* @Conditional\n\n## 模块\n* Starter\n* Actuator\n* DevTools\n* CLI\n\n# Spring Cloud\n\n# Spring Data\n\n# Spring Security","slug":"20180727","published":1,"date":"2021-07-28T03:24:17.645Z","updated":"2021-07-28T07:48:34.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazk000bs0nm716j58po","content":"<h1 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h1><h2 id=\"Context初始化流程\"><a href=\"#Context初始化流程\" class=\"headerlink\" title=\"Context初始化流程\"></a>Context初始化流程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</div><div class=\"line\">        prepareRefresh();</div><div class=\"line\">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class=\"line\">        prepareBeanFactory(beanFactory);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            postProcessBeanFactory(beanFactory);</div><div class=\"line\">            invokeBeanFactoryPostProcessors(beanFactory);</div><div class=\"line\">            registerBeanPostProcessors(beanFactory);</div><div class=\"line\">            initMessageSource();</div><div class=\"line\">            initApplicationEventMulticaster();</div><div class=\"line\">            onRefresh();</div><div class=\"line\">            registerListeners();</div><div class=\"line\">            finishBeanFactoryInitialization(beanFactory);</div><div class=\"line\">            finishRefresh();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span> (BeansException ex) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</div><div class=\"line\">                logger.warn(<span class=\"string\">\"Exception encountered during context initialization - \"</span> +</div><div class=\"line\">                        <span class=\"string\">\"cancelling refresh attempt: \"</span> + ex);</div><div class=\"line\">            &#125;</div><div class=\"line\">            destroyBeans();</div><div class=\"line\">            cancelRefresh(ex);</div><div class=\"line\">            <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            resetCommonCaches();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>首先对刷新进行准备，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符，这个动作根据子类的需求由子类来执行，然后验证是否缺失必要的 properties。</li>\n<li>刷新并获得内部的 Bean Factory。</li>\n<li>对 BeanFactory 进行准备工作，比如设置类加载器和后置处理器、配置不进行自动装配的类型、注册默认的环境 Bean。</li>\n<li>为 Context 的子类提供后置处理 BeanFactory 的扩展能力。如果子类想在 Bean 定义加载完成后，开始初始化上下文之前做一些特殊逻辑，可以复写这个方法。</li>\n<li>执行 Context 中注册的 Bean Factory 后缀处理器。这里有两种后置处理器，一种是可以注册 Bean 的后缀处理器，另一种是针对 BeanFactory 进行处理的后置处理器。执行的顺序是，先按优先级执行可注册 Bean 的处理器，在按优先级执行针对 BeanFactory的处理器。对 Spring Boot 来说，这一步会进行注解 Bean Definition 的解析。流程如图右侧所示，由 ConfigurationClassPostProcessor 触发、由 ClassPathBeanDefinitionScanner 解析并注册到 BeanFactory。</li>\n<li>按优先级顺序在 BeanFactory 中注册  Bean的后缀处理器，Bean 后置处理器可以在 Bean 初始化前、后执行处理。</li>\n<li>初始化消息源，消息源用来支持消息的国际化。</li>\n<li>初始化应用事件广播器。事件广播器用来向 ApplicationListener 通知各种应用产生的事件，是一个标准的观察者模式。</li>\n<li>是留给子类的扩展步骤，用来让特定的 Context 子类初始化其他的 Bean。</li>\n<li>把实现了 ApplicationListener 的 Bean 注册到事件广播器，并对广播器中的早期未广播事件进行通知。</li>\n<li>冻结所有 Bean 描述信息的修改，实例化非延迟加载的单例 Bean。</li>\n<li>完成上下文的刷新工作，调用 LifecycleProcessor 的 onFresh() 方法以及发布 ContextRefreshedEvent 事件。</li>\n<li>在 finally 中，执行第十三步，重置公共的缓存，比如 ReflectionUtils 中的缓存、 AnnotationUtils 中的缓存等等。</li>\n</ol>\n<h2 id=\"Bean生命周期\"><a href=\"#Bean生命周期\" class=\"headerlink\" title=\"Bean生命周期\"></a>Bean生命周期</h2><ol>\n<li>调用 Bean 的构造方法创建 Bean；</li>\n<li>通过反射调用 setter 方法进行属性的依赖注入；</li>\n<li>如果实现 BeanNameAware 接口的话，会设置 Bean 的 name；</li>\n<li>如果实现了 BeanFactoryAware，会把 BeanFactory 设置给 Bean；</li>\n<li>如果实现了 ApplicationContextAware，会给 Bean 设置 ApplictionContext；</li>\n<li>如果实现了 BeanPostProcessor 接口，则执行前置处理方法；</li>\n<li>实现了 InitializingBean 接口的话，执行 afterPropertiesSet 方法；</li>\n<li>执行自定义的 init 方法；</li>\n<li>执行 BeanPostProcessor 接口的后置处理方法；</li>\n<li>在使用完 Bean 需要销毁时，会先执行 DisposableBean 接口的 destroy 方法，然后在执行自定义的 destroy 方法。</li>\n</ol>\n<h1 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h1><h2 id=\"SpringBoot启动流程\"><a href=\"#SpringBoot启动流程\" class=\"headerlink\" title=\"SpringBoot启动流程\"></a>SpringBoot启动流程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">    StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</div><div class=\"line\">    stopWatch.start();</div><div class=\"line\">    ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    configureHeadlessProperty();</div><div class=\"line\">    SpringApplicationRunListeners listeners = getRunListeners(args);</div><div class=\"line\">    listeners.starting();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</div><div class=\"line\">                args);</div><div class=\"line\">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</div><div class=\"line\">                applicationArguments);</div><div class=\"line\">        configureIgnoreBeanInfo(environment);</div><div class=\"line\">        Banner printedBanner = printBanner(environment);</div><div class=\"line\">        context = createApplicationContext();</div><div class=\"line\">        exceptionReporters = getSpringFactoriesInstances(</div><div class=\"line\">                SpringBootExceptionReporter.class,</div><div class=\"line\">                <span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</div><div class=\"line\">        prepareContext(context, environment, listeners, applicationArguments,</div><div class=\"line\">                printedBanner);</div><div class=\"line\">        refreshContext(context);</div><div class=\"line\">        afterRefresh(context, applicationArguments);</div><div class=\"line\">        stopWatch.stop();</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</div><div class=\"line\">                    .logStarted(getApplicationLog(), stopWatch);</div><div class=\"line\">        &#125;</div><div class=\"line\">        listeners.started(context);</div><div class=\"line\">        callRunners(context, applicationArguments);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</div><div class=\"line\">        handleRunFailure(context, ex, exceptionReporters, listeners);</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        listeners.running(context);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</div><div class=\"line\">        handleRunFailure(context, ex, exceptionReporters, <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> context;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>配置Environment。</li>\n<li>准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。</li>\n<li>执行 refreshContext。</li>\n</ol>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><ul>\n<li>bootstrap</li>\n<li>application</li>\n</ul>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><ul>\n<li>SpringBootApplication</li>\n<li>SpringBootConfiguration</li>\n<li>EnableAutoConfiguration</li>\n<li>@Conditional</li>\n</ul>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><ul>\n<li>Starter</li>\n<li>Actuator</li>\n<li>DevTools</li>\n<li>CLI</li>\n</ul>\n<h1 id=\"Spring-Cloud\"><a href=\"#Spring-Cloud\" class=\"headerlink\" title=\"Spring Cloud\"></a>Spring Cloud</h1><h1 id=\"Spring-Data\"><a href=\"#Spring-Data\" class=\"headerlink\" title=\"Spring Data\"></a>Spring Data</h1><h1 id=\"Spring-Security\"><a href=\"#Spring-Security\" class=\"headerlink\" title=\"Spring Security\"></a>Spring Security</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h1><h2 id=\"Context初始化流程\"><a href=\"#Context初始化流程\" class=\"headerlink\" title=\"Context初始化流程\"></a>Context初始化流程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</div><div class=\"line\">        prepareRefresh();</div><div class=\"line\">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class=\"line\">        prepareBeanFactory(beanFactory);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            postProcessBeanFactory(beanFactory);</div><div class=\"line\">            invokeBeanFactoryPostProcessors(beanFactory);</div><div class=\"line\">            registerBeanPostProcessors(beanFactory);</div><div class=\"line\">            initMessageSource();</div><div class=\"line\">            initApplicationEventMulticaster();</div><div class=\"line\">            onRefresh();</div><div class=\"line\">            registerListeners();</div><div class=\"line\">            finishBeanFactoryInitialization(beanFactory);</div><div class=\"line\">            finishRefresh();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span> (BeansException ex) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</div><div class=\"line\">                logger.warn(<span class=\"string\">\"Exception encountered during context initialization - \"</span> +</div><div class=\"line\">                        <span class=\"string\">\"cancelling refresh attempt: \"</span> + ex);</div><div class=\"line\">            &#125;</div><div class=\"line\">            destroyBeans();</div><div class=\"line\">            cancelRefresh(ex);</div><div class=\"line\">            <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            resetCommonCaches();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>首先对刷新进行准备，包括设置开始时间、设置激活状态、初始化 Context 环境中的占位符，这个动作根据子类的需求由子类来执行，然后验证是否缺失必要的 properties。</li>\n<li>刷新并获得内部的 Bean Factory。</li>\n<li>对 BeanFactory 进行准备工作，比如设置类加载器和后置处理器、配置不进行自动装配的类型、注册默认的环境 Bean。</li>\n<li>为 Context 的子类提供后置处理 BeanFactory 的扩展能力。如果子类想在 Bean 定义加载完成后，开始初始化上下文之前做一些特殊逻辑，可以复写这个方法。</li>\n<li>执行 Context 中注册的 Bean Factory 后缀处理器。这里有两种后置处理器，一种是可以注册 Bean 的后缀处理器，另一种是针对 BeanFactory 进行处理的后置处理器。执行的顺序是，先按优先级执行可注册 Bean 的处理器，在按优先级执行针对 BeanFactory的处理器。对 Spring Boot 来说，这一步会进行注解 Bean Definition 的解析。流程如图右侧所示，由 ConfigurationClassPostProcessor 触发、由 ClassPathBeanDefinitionScanner 解析并注册到 BeanFactory。</li>\n<li>按优先级顺序在 BeanFactory 中注册  Bean的后缀处理器，Bean 后置处理器可以在 Bean 初始化前、后执行处理。</li>\n<li>初始化消息源，消息源用来支持消息的国际化。</li>\n<li>初始化应用事件广播器。事件广播器用来向 ApplicationListener 通知各种应用产生的事件，是一个标准的观察者模式。</li>\n<li>是留给子类的扩展步骤，用来让特定的 Context 子类初始化其他的 Bean。</li>\n<li>把实现了 ApplicationListener 的 Bean 注册到事件广播器，并对广播器中的早期未广播事件进行通知。</li>\n<li>冻结所有 Bean 描述信息的修改，实例化非延迟加载的单例 Bean。</li>\n<li>完成上下文的刷新工作，调用 LifecycleProcessor 的 onFresh() 方法以及发布 ContextRefreshedEvent 事件。</li>\n<li>在 finally 中，执行第十三步，重置公共的缓存，比如 ReflectionUtils 中的缓存、 AnnotationUtils 中的缓存等等。</li>\n</ol>\n<h2 id=\"Bean生命周期\"><a href=\"#Bean生命周期\" class=\"headerlink\" title=\"Bean生命周期\"></a>Bean生命周期</h2><ol>\n<li>调用 Bean 的构造方法创建 Bean；</li>\n<li>通过反射调用 setter 方法进行属性的依赖注入；</li>\n<li>如果实现 BeanNameAware 接口的话，会设置 Bean 的 name；</li>\n<li>如果实现了 BeanFactoryAware，会把 BeanFactory 设置给 Bean；</li>\n<li>如果实现了 ApplicationContextAware，会给 Bean 设置 ApplictionContext；</li>\n<li>如果实现了 BeanPostProcessor 接口，则执行前置处理方法；</li>\n<li>实现了 InitializingBean 接口的话，执行 afterPropertiesSet 方法；</li>\n<li>执行自定义的 init 方法；</li>\n<li>执行 BeanPostProcessor 接口的后置处理方法；</li>\n<li>在使用完 Bean 需要销毁时，会先执行 DisposableBean 接口的 destroy 方法，然后在执行自定义的 destroy 方法。</li>\n</ol>\n<h1 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h1><h2 id=\"SpringBoot启动流程\"><a href=\"#SpringBoot启动流程\" class=\"headerlink\" title=\"SpringBoot启动流程\"></a>SpringBoot启动流程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">    StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</div><div class=\"line\">    stopWatch.start();</div><div class=\"line\">    ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    configureHeadlessProperty();</div><div class=\"line\">    SpringApplicationRunListeners listeners = getRunListeners(args);</div><div class=\"line\">    listeners.starting();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</div><div class=\"line\">                args);</div><div class=\"line\">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</div><div class=\"line\">                applicationArguments);</div><div class=\"line\">        configureIgnoreBeanInfo(environment);</div><div class=\"line\">        Banner printedBanner = printBanner(environment);</div><div class=\"line\">        context = createApplicationContext();</div><div class=\"line\">        exceptionReporters = getSpringFactoriesInstances(</div><div class=\"line\">                SpringBootExceptionReporter.class,</div><div class=\"line\">                <span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</div><div class=\"line\">        prepareContext(context, environment, listeners, applicationArguments,</div><div class=\"line\">                printedBanner);</div><div class=\"line\">        refreshContext(context);</div><div class=\"line\">        afterRefresh(context, applicationArguments);</div><div class=\"line\">        stopWatch.stop();</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</div><div class=\"line\">                    .logStarted(getApplicationLog(), stopWatch);</div><div class=\"line\">        &#125;</div><div class=\"line\">        listeners.started(context);</div><div class=\"line\">        callRunners(context, applicationArguments);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</div><div class=\"line\">        handleRunFailure(context, ex, exceptionReporters, listeners);</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        listeners.running(context);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</div><div class=\"line\">        handleRunFailure(context, ex, exceptionReporters, <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> context;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>配置Environment。</li>\n<li>准备 Context 上下文，包括执行 ApplicationContext 的后置处理、初始化 Initializer、通知Listener 处理 ContextPrepared 和 ContextLoaded 事件。</li>\n<li>执行 refreshContext。</li>\n</ol>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><ul>\n<li>bootstrap</li>\n<li>application</li>\n</ul>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><ul>\n<li>SpringBootApplication</li>\n<li>SpringBootConfiguration</li>\n<li>EnableAutoConfiguration</li>\n<li>@Conditional</li>\n</ul>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><ul>\n<li>Starter</li>\n<li>Actuator</li>\n<li>DevTools</li>\n<li>CLI</li>\n</ul>\n<h1 id=\"Spring-Cloud\"><a href=\"#Spring-Cloud\" class=\"headerlink\" title=\"Spring Cloud\"></a>Spring Cloud</h1><h1 id=\"Spring-Data\"><a href=\"#Spring-Data\" class=\"headerlink\" title=\"Spring Data\"></a>Spring Data</h1><h1 id=\"Spring-Security\"><a href=\"#Spring-Security\" class=\"headerlink\" title=\"Spring Security\"></a>Spring Security</h1>"},{"title":"消息队列","_content":"\n## 应用场景\n解耦合、削峰填谷、异步\n\n## 消息协议\nAMQP\nJMS\n\n## 常用队列\n* ActiveMQ: 单机吞吐量万级，有较低概率丢失消息\n* RabbitMQ: Erlang开发，单机吞吐万级\n* RocketMQ: 阿里开源，单机吞吐量10W级\n* Kafka: Scala开发, 单机吞吐量10W级，发布订阅模式","source":"_posts/20181010.md","raw":"---\ntitle: 消息队列\n---\n\n## 应用场景\n解耦合、削峰填谷、异步\n\n## 消息协议\nAMQP\nJMS\n\n## 常用队列\n* ActiveMQ: 单机吞吐量万级，有较低概率丢失消息\n* RabbitMQ: Erlang开发，单机吞吐万级\n* RocketMQ: 阿里开源，单机吞吐量10W级\n* Kafka: Scala开发, 单机吞吐量10W级，发布订阅模式","slug":"20181010","published":1,"date":"2021-07-28T03:24:17.649Z","updated":"2021-07-28T09:25:02.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazl000cs0nmqcb9o50e","content":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>解耦合、削峰填谷、异步</p>\n<h2 id=\"消息协议\"><a href=\"#消息协议\" class=\"headerlink\" title=\"消息协议\"></a>消息协议</h2><p>AMQP<br>JMS</p>\n<h2 id=\"常用队列\"><a href=\"#常用队列\" class=\"headerlink\" title=\"常用队列\"></a>常用队列</h2><ul>\n<li>ActiveMQ: 单机吞吐量万级，有较低概率丢失消息</li>\n<li>RabbitMQ: Erlang开发，单机吞吐万级</li>\n<li>RocketMQ: 阿里开源，单机吞吐量10W级</li>\n<li>Kafka: Scala开发, 单机吞吐量10W级，发布订阅模式</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>解耦合、削峰填谷、异步</p>\n<h2 id=\"消息协议\"><a href=\"#消息协议\" class=\"headerlink\" title=\"消息协议\"></a>消息协议</h2><p>AMQP<br>JMS</p>\n<h2 id=\"常用队列\"><a href=\"#常用队列\" class=\"headerlink\" title=\"常用队列\"></a>常用队列</h2><ul>\n<li>ActiveMQ: 单机吞吐量万级，有较低概率丢失消息</li>\n<li>RabbitMQ: Erlang开发，单机吞吐万级</li>\n<li>RocketMQ: 阿里开源，单机吞吐量10W级</li>\n<li>Kafka: Scala开发, 单机吞吐量10W级，发布订阅模式</li>\n</ul>\n"},{"title":"数据库","_content":"\n## 常用数据库\n\n* 关系型数据库\n    * MySQL\n    * Oracle\n    * PostgreSQL(PGSQL)\n    * MariaDB\n* NoSQL\n    * MongoDB\n    * HBase\n    * Cassandra\n    * Pika\n* NewSQL\n    * TiDB\n    * OceanBase\n    \n## 事务\n### 事务特性\nA(Atomicity)C(Consistency)I(Isolation)D(Durability)\n\n### 隔离级别\n* 读未提交\n* 读已提交\n* 可重复读\n* 串行化\n\n### 事务分类\n* 扁平化事务\n* 带保存点的扁平化事务\n* 链事务\n* 嵌套事务\n* 分布式事务\n    * XA协议方案：2PC、3PC\n    * TCC方案\n    * 消息一致性方案\n    * GTS方案","source":"_posts/20181023.md","raw":"---\ntitle: 数据库\n---\n\n## 常用数据库\n\n* 关系型数据库\n    * MySQL\n    * Oracle\n    * PostgreSQL(PGSQL)\n    * MariaDB\n* NoSQL\n    * MongoDB\n    * HBase\n    * Cassandra\n    * Pika\n* NewSQL\n    * TiDB\n    * OceanBase\n    \n## 事务\n### 事务特性\nA(Atomicity)C(Consistency)I(Isolation)D(Durability)\n\n### 隔离级别\n* 读未提交\n* 读已提交\n* 可重复读\n* 串行化\n\n### 事务分类\n* 扁平化事务\n* 带保存点的扁平化事务\n* 链事务\n* 嵌套事务\n* 分布式事务\n    * XA协议方案：2PC、3PC\n    * TCC方案\n    * 消息一致性方案\n    * GTS方案","slug":"20181023","published":1,"date":"2021-07-28T03:24:17.650Z","updated":"2021-07-28T09:20:42.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazn000ds0nm7b073get","content":"<h2 id=\"常用数据库\"><a href=\"#常用数据库\" class=\"headerlink\" title=\"常用数据库\"></a>常用数据库</h2><ul>\n<li>关系型数据库<ul>\n<li>MySQL</li>\n<li>Oracle</li>\n<li>PostgreSQL(PGSQL)</li>\n<li>MariaDB</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB</li>\n<li>HBase</li>\n<li>Cassandra</li>\n<li>Pika</li>\n</ul>\n</li>\n<li>NewSQL<ul>\n<li>TiDB</li>\n<li>OceanBase</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h3 id=\"事务特性\"><a href=\"#事务特性\" class=\"headerlink\" title=\"事务特性\"></a>事务特性</h3><p>A(Atomicity)C(Consistency)I(Isolation)D(Durability)</p>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><ul>\n<li>读未提交</li>\n<li>读已提交</li>\n<li>可重复读</li>\n<li>串行化</li>\n</ul>\n<h3 id=\"事务分类\"><a href=\"#事务分类\" class=\"headerlink\" title=\"事务分类\"></a>事务分类</h3><ul>\n<li>扁平化事务</li>\n<li>带保存点的扁平化事务</li>\n<li>链事务</li>\n<li>嵌套事务</li>\n<li>分布式事务<ul>\n<li>XA协议方案：2PC、3PC</li>\n<li>TCC方案</li>\n<li>消息一致性方案</li>\n<li>GTS方案</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用数据库\"><a href=\"#常用数据库\" class=\"headerlink\" title=\"常用数据库\"></a>常用数据库</h2><ul>\n<li>关系型数据库<ul>\n<li>MySQL</li>\n<li>Oracle</li>\n<li>PostgreSQL(PGSQL)</li>\n<li>MariaDB</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB</li>\n<li>HBase</li>\n<li>Cassandra</li>\n<li>Pika</li>\n</ul>\n</li>\n<li>NewSQL<ul>\n<li>TiDB</li>\n<li>OceanBase</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h3 id=\"事务特性\"><a href=\"#事务特性\" class=\"headerlink\" title=\"事务特性\"></a>事务特性</h3><p>A(Atomicity)C(Consistency)I(Isolation)D(Durability)</p>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><ul>\n<li>读未提交</li>\n<li>读已提交</li>\n<li>可重复读</li>\n<li>串行化</li>\n</ul>\n<h3 id=\"事务分类\"><a href=\"#事务分类\" class=\"headerlink\" title=\"事务分类\"></a>事务分类</h3><ul>\n<li>扁平化事务</li>\n<li>带保存点的扁平化事务</li>\n<li>链事务</li>\n<li>嵌套事务</li>\n<li>分布式事务<ul>\n<li>XA协议方案：2PC、3PC</li>\n<li>TCC方案</li>\n<li>消息一致性方案</li>\n<li>GTS方案</li>\n</ul>\n</li>\n</ul>\n"},{"title":"MySQL","_content":"\n# 索引\n\n* 聚簇索引\n* 非聚簇索引\n\n* 唯一索引：索引列中的值必须是唯一的，但是允许出现空值。\n* 主键索引：一种特殊的唯一索引，但是它不允许出现空值。\n* 普通索引：唯一索引不同，它允许索引列中存在相同的值。\n* 联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。\n* 全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。\n\n\n# 引擎\n\n## InnoDB\n\n## MyISAM\n\n\n","source":"_posts/20181113.md","raw":"---\ntitle: MySQL\n---\n\n# 索引\n\n* 聚簇索引\n* 非聚簇索引\n\n* 唯一索引：索引列中的值必须是唯一的，但是允许出现空值。\n* 主键索引：一种特殊的唯一索引，但是它不允许出现空值。\n* 普通索引：唯一索引不同，它允许索引列中存在相同的值。\n* 联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。\n* 全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。\n\n\n# 引擎\n\n## InnoDB\n\n## MyISAM\n\n\n","slug":"20181113","published":1,"date":"2021-07-28T03:24:17.653Z","updated":"2021-07-28T09:11:18.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazo000es0nmj5doqfpo","content":"<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><ul>\n<li>聚簇索引</li>\n<li><p>非聚簇索引</p>\n</li>\n<li><p>唯一索引：索引列中的值必须是唯一的，但是允许出现空值。</p>\n</li>\n<li>主键索引：一种特殊的唯一索引，但是它不允许出现空值。</li>\n<li>普通索引：唯一索引不同，它允许索引列中存在相同的值。</li>\n<li>联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。</li>\n<li>全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。</li>\n</ul>\n<h1 id=\"引擎\"><a href=\"#引擎\" class=\"headerlink\" title=\"引擎\"></a>引擎</h1><h2 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h2><h2 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><ul>\n<li>聚簇索引</li>\n<li><p>非聚簇索引</p>\n</li>\n<li><p>唯一索引：索引列中的值必须是唯一的，但是允许出现空值。</p>\n</li>\n<li>主键索引：一种特殊的唯一索引，但是它不允许出现空值。</li>\n<li>普通索引：唯一索引不同，它允许索引列中存在相同的值。</li>\n<li>联合索引：由多个列共同组成的索引，需遵循最左原则，就是 where 查询条件中的字段必须与索引字段从左到右进行匹配。</li>\n<li>全文索引：全文索引只能在 CHAR、VARCHAR、TEXT 类型字段上使用，底层使用倒排索引实现。</li>\n</ul>\n<h1 id=\"引擎\"><a href=\"#引擎\" class=\"headerlink\" title=\"引擎\"></a>引擎</h1><h2 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h2><h2 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h2>"},{"title":"HBase","_content":"\n## 索引类型\n* 本地索引\n* 全局索引\n* 覆盖索引\n\n## RowKey设计\n* 长度原则\n* 唯一原则\n* 散列原则\n\n## 参考文章\n* [HBase技术细节笔记上](https://cloud.tencent.com/developer/article/1006043)\n* [HBase技术细节笔记下](https://cloud.tencent.com/developer/article/1006044)\n* [我终于看懂了HBase，太不容易了](https://zhuanlan.zhihu.com/p/145551967)\n* [2018 HBase技术总结](https://www.slidestalk.com/HBaseGroup/HBase_ebook28532)","source":"_posts/20181114.md","raw":"---\ntitle: HBase\n---\n\n## 索引类型\n* 本地索引\n* 全局索引\n* 覆盖索引\n\n## RowKey设计\n* 长度原则\n* 唯一原则\n* 散列原则\n\n## 参考文章\n* [HBase技术细节笔记上](https://cloud.tencent.com/developer/article/1006043)\n* [HBase技术细节笔记下](https://cloud.tencent.com/developer/article/1006044)\n* [我终于看懂了HBase，太不容易了](https://zhuanlan.zhihu.com/p/145551967)\n* [2018 HBase技术总结](https://www.slidestalk.com/HBaseGroup/HBase_ebook28532)","slug":"20181114","published":1,"date":"2021-07-28T03:24:17.654Z","updated":"2021-07-28T09:42:20.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazp000fs0nmem4ihllj","content":"<h2 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h2><ul>\n<li>本地索引</li>\n<li>全局索引</li>\n<li>覆盖索引</li>\n</ul>\n<h2 id=\"RowKey设计\"><a href=\"#RowKey设计\" class=\"headerlink\" title=\"RowKey设计\"></a>RowKey设计</h2><ul>\n<li>长度原则</li>\n<li>唯一原则</li>\n<li>散列原则</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006043\" target=\"_blank\" rel=\"external\">HBase技术细节笔记上</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006044\" target=\"_blank\" rel=\"external\">HBase技术细节笔记下</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/145551967\" target=\"_blank\" rel=\"external\">我终于看懂了HBase，太不容易了</a></li>\n<li><a href=\"https://www.slidestalk.com/HBaseGroup/HBase_ebook28532\" target=\"_blank\" rel=\"external\">2018 HBase技术总结</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h2><ul>\n<li>本地索引</li>\n<li>全局索引</li>\n<li>覆盖索引</li>\n</ul>\n<h2 id=\"RowKey设计\"><a href=\"#RowKey设计\" class=\"headerlink\" title=\"RowKey设计\"></a>RowKey设计</h2><ul>\n<li>长度原则</li>\n<li>唯一原则</li>\n<li>散列原则</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006043\" target=\"_blank\" rel=\"external\">HBase技术细节笔记上</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1006044\" target=\"_blank\" rel=\"external\">HBase技术细节笔记下</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/145551967\" target=\"_blank\" rel=\"external\">我终于看懂了HBase，太不容易了</a></li>\n<li><a href=\"https://www.slidestalk.com/HBaseGroup/HBase_ebook28532\" target=\"_blank\" rel=\"external\">2018 HBase技术总结</a></li>\n</ul>\n"},{"title":"Kafka","_content":"","source":"_posts/20181112.md","raw":"---\ntitle: Kafka\n---\n","slug":"20181112","published":1,"date":"2021-07-28T03:24:17.652Z","updated":"2021-07-28T06:37:11.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazq000gs0nm23lgqmdt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Cassandra","_content":"","source":"_posts/20181115.md","raw":"---\ntitle: Cassandra\n---","slug":"20181115","published":1,"date":"2021-07-28T03:24:17.655Z","updated":"2021-07-28T06:40:55.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazq000hs0nmdkwztcud","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"架构","_content":"\n# CAP理论\nConsistency: 一致性，所有节点访问同一份最新的数据副本\nAvailability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\nPartition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。\n在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。\n\n## CA\n放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。\n## CP\n选择强一致和分区容错，允许极端情况下出现短时的服务不可用。\nCP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos\n## AP\n选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。\nAP实现的系统：Eureka、Nacos、Cassandra\n\n# BASE\nBasically Available：基本可用\nSoft-state：软状态\nEventual Consistency：最终一致性\n它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。","source":"_posts/20190112.md","raw":"---\ntitle: 架构\n---\n\n# CAP理论\nConsistency: 一致性，所有节点访问同一份最新的数据副本\nAvailability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。\nPartition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。\n在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。\n\n## CA\n放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。\n## CP\n选择强一致和分区容错，允许极端情况下出现短时的服务不可用。\nCP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos\n## AP\n选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。\nAP实现的系统：Eureka、Nacos、Cassandra\n\n# BASE\nBasically Available：基本可用\nSoft-state：软状态\nEventual Consistency：最终一致性\n它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。","slug":"20190112","published":1,"date":"2021-07-28T03:24:17.657Z","updated":"2021-07-28T07:07:31.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazr000is0nm0xemc6cb","content":"<h1 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h1><p>Consistency: 一致性，所有节点访问同一份最新的数据副本<br>Availability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。<br>Partition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。<br>在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。</p>\n<h2 id=\"CA\"><a href=\"#CA\" class=\"headerlink\" title=\"CA\"></a>CA</h2><p>放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。</p>\n<h2 id=\"CP\"><a href=\"#CP\" class=\"headerlink\" title=\"CP\"></a>CP</h2><p>选择强一致和分区容错，允许极端情况下出现短时的服务不可用。<br>CP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos</p>\n<h2 id=\"AP\"><a href=\"#AP\" class=\"headerlink\" title=\"AP\"></a>AP</h2><p>选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。<br>AP实现的系统：Eureka、Nacos、Cassandra</p>\n<h1 id=\"BASE\"><a href=\"#BASE\" class=\"headerlink\" title=\"BASE\"></a>BASE</h1><p>Basically Available：基本可用<br>Soft-state：软状态<br>Eventual Consistency：最终一致性<br>它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h1><p>Consistency: 一致性，所有节点访问同一份最新的数据副本<br>Availability: 可用性，非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。<br>Partition tolerance: 分区容错性，分布式系统出现网络分区的时候，仍然能够对外提供服务。<br>在一个分布式系统中，这三个特性最多只能同时满足两个，三者不可兼得。</p>\n<h2 id=\"CA\"><a href=\"#CA\" class=\"headerlink\" title=\"CA\"></a>CA</h2><p>放弃分区容错，这也就等同于放弃了分布式系统，所以 CA 只存在于单机系统。</p>\n<h2 id=\"CP\"><a href=\"#CP\" class=\"headerlink\" title=\"CP\"></a>CP</h2><p>选择强一致和分区容错，允许极端情况下出现短时的服务不可用。<br>CP实现的系统：ZooKeeper、Consul、Etcd、HBase、Nacos</p>\n<h2 id=\"AP\"><a href=\"#AP\" class=\"headerlink\" title=\"AP\"></a>AP</h2><p>选择分区容错和高可用，允许数据出现短时间不一致。在服务注册的场景，短期的不一致一般不会对服务交互产生影响，因此采用 AP 原则的注册中心才是微服务比较适合的选择。<br>AP实现的系统：Eureka、Nacos、Cassandra</p>\n<h1 id=\"BASE\"><a href=\"#BASE\" class=\"headerlink\" title=\"BASE\"></a>BASE</h1><p>Basically Available：基本可用<br>Soft-state：软状态<br>Eventual Consistency：最终一致性<br>它是对 CAP 中一致性和可用性权衡的结果。BASE 的核心思想是即使无法做到强一致性，也可以根据系统特点，采用适当的方式达到最终一致性。</p>\n"},{"title":"Redis","_content":"","source":"_posts/20181111.md","raw":"---\ntitle: Redis\n---","slug":"20181111","published":1,"date":"2021-07-28T03:24:17.651Z","updated":"2021-07-28T06:37:11.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazs000js0nmubrhgmgm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Mongo","_content":"\n## 索引\n\n* 单键索引\n* 复合索引\n* 多键值索引\n* 地理索引\n* 全文索引\n* 散列索引\n\n* 稀疏索引\n* 唯一索引\n* 过期索引\n\n## 部署方式\n分片\n副本集","source":"_posts/20190107.md","raw":"---\ntitle: Mongo\n---\n\n## 索引\n\n* 单键索引\n* 复合索引\n* 多键值索引\n* 地理索引\n* 全文索引\n* 散列索引\n\n* 稀疏索引\n* 唯一索引\n* 过期索引\n\n## 部署方式\n分片\n副本集","slug":"20190107","published":1,"date":"2021-07-28T03:24:17.656Z","updated":"2021-07-28T09:30:02.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbaazt000ks0nma99m6zqc","content":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>单键索引</li>\n<li>复合索引</li>\n<li>多键值索引</li>\n<li>地理索引</li>\n<li>全文索引</li>\n<li><p>散列索引</p>\n</li>\n<li><p>稀疏索引</p>\n</li>\n<li>唯一索引</li>\n<li>过期索引</li>\n</ul>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><p>分片<br>副本集</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>单键索引</li>\n<li>复合索引</li>\n<li>多键值索引</li>\n<li>地理索引</li>\n<li>全文索引</li>\n<li><p>散列索引</p>\n</li>\n<li><p>稀疏索引</p>\n</li>\n<li>唯一索引</li>\n<li>过期索引</li>\n</ul>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><p>分片<br>副本集</p>\n"},{"title":"缓存","_content":"\n## 类型\n* 本地缓存\n    * Caffeine\n* 分布式缓存\n    * Redis\n    * Memcache\n* 多级缓存：本地缓存 + 分布式缓存\n\n## 缓存常见问题\n* 缓存更新方式：数据变更、缓存时效性\n* 缓存不一致：同步更新失败、异步更新\n* 缓存穿透：恶意攻击\n* 缓存击穿：热点key失效\n* 缓存雪崩：缓存挂掉","source":"_posts/20180916.md","raw":"---\ntitle: 缓存\n---\n\n## 类型\n* 本地缓存\n    * Caffeine\n* 分布式缓存\n    * Redis\n    * Memcache\n* 多级缓存：本地缓存 + 分布式缓存\n\n## 缓存常见问题\n* 缓存更新方式：数据变更、缓存时效性\n* 缓存不一致：同步更新失败、异步更新\n* 缓存穿透：恶意攻击\n* 缓存击穿：热点key失效\n* 缓存雪崩：缓存挂掉","slug":"20180916","published":1,"date":"2021-07-28T03:24:17.648Z","updated":"2021-07-28T09:26:03.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrnbab0d000ms0nmj9wganha","content":"<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>本地缓存<ul>\n<li>Caffeine</li>\n</ul>\n</li>\n<li>分布式缓存<ul>\n<li>Redis</li>\n<li>Memcache</li>\n</ul>\n</li>\n<li>多级缓存：本地缓存 + 分布式缓存</li>\n</ul>\n<h2 id=\"缓存常见问题\"><a href=\"#缓存常见问题\" class=\"headerlink\" title=\"缓存常见问题\"></a>缓存常见问题</h2><ul>\n<li>缓存更新方式：数据变更、缓存时效性</li>\n<li>缓存不一致：同步更新失败、异步更新</li>\n<li>缓存穿透：恶意攻击</li>\n<li>缓存击穿：热点key失效</li>\n<li>缓存雪崩：缓存挂掉</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>本地缓存<ul>\n<li>Caffeine</li>\n</ul>\n</li>\n<li>分布式缓存<ul>\n<li>Redis</li>\n<li>Memcache</li>\n</ul>\n</li>\n<li>多级缓存：本地缓存 + 分布式缓存</li>\n</ul>\n<h2 id=\"缓存常见问题\"><a href=\"#缓存常见问题\" class=\"headerlink\" title=\"缓存常见问题\"></a>缓存常见问题</h2><ul>\n<li>缓存更新方式：数据变更、缓存时效性</li>\n<li>缓存不一致：同步更新失败、异步更新</li>\n<li>缓存穿透：恶意攻击</li>\n<li>缓存击穿：热点key失效</li>\n<li>缓存雪崩：缓存挂掉</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}